// Define a singleton object for the Car "type". This object will be
// the factory for all other cars.
Car <- [
  // Define a constructor method on the factory.
  make: make model: model {
    // The constructor simply derives a new car from the car
    // prototype and then stores the make and model in it.
    [|Cars| _make <- make, _model <- model ]
    // Like ruby, the last expression in the method is implicitly
    // the returned value.
  }
]

// Define the car prototype. All cars will derive from this.
Cars <- [
  // Accessors for their make and model.
  make { _make }
  model { _model }

  to-string {
    "This car is a " + _make + " " + _model + "."
  }
]

// now lets make a car
jetta <- Car make: "volkswagen" model: "jetta"

// and call a method on its prototype, which in turn references the
// specific car's state
write-line: jetta to-string

// now let's try adding something to the car prototype. first we'll
// check to see that it isn't there
// write-line: jetta short-name ' this should write nil

// now we'll add a method to the prototype
Cars :: short-name { _make + " " + _model }

// now lets call it on jetta and see if we can find it
write-line: jetta short-name
