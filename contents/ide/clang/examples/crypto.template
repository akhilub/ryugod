/*
    C 언어 간단한 암/복호화 수행 예제
    출처: https://www.ryugod.com
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>

/* 아래의 charset 코드 순서를 바꾸면 새로운 암호문 생성이 가능, 영문대소문자/숫자/특수문자만 암호화가능 */
static const char charset[] = "`1qaz2wsx3edc4rfv5tgb6yhn7ujm8ik,9ol.0p;/- ['=]\\~!QAZ@WSX#EDC$RFV%TGB^YHN&UJM*IK<(OL>)P:?_{\"+}|";
static const int CHARSET_SZ = (sizeof(charset)-1);

static int strpos(char ch)
{
    int i;
    for (i=0; i<CHARSET_SZ; i++) {
        if (ch == charset[i])
            return i;
    }
    return -1;
}

static char rotate(char ch, int cnt)
{
    int pos;

    if (cnt == 0)
        return ch;

    if ((pos = strpos(ch)) < 0)
        return '\0';

    pos += cnt;

    while (pos < 0) {
        pos += CHARSET_SZ;
    }

    pos %= CHARSET_SZ;

    return charset[pos];
}

int apEncrypt(const char *data, char *out)
{
    char ch;
    int len = strnlen(data, BUFSIZ)-1;
    int i;
    int sum = 0;

    for (i=0; i<len; i++)
        sum += data[i];

    sum %= CHARSET_SZ;

    out[0] = charset[sum];
    for (i=0; i<len; i++) {
        ch = rotate(data[i], (i+1)*13 - (len + out[0]));

        if (ch == '\0') {
            fprintf(stderr, "Invalid character 0x%x(%d)\n", data[i], data[i]);
            return -1;
        }

        out[i+1] = ch;
    }

    out[i+1] = '\0';

    return i;
}

int apDecrypt(const char *data, char *out)
{
    char ch;
    const char *udata = data + 1;
    int len = strlen(udata);
    int i;

    for (i=0; i<len; i++) {
        ch = rotate(udata[i], (i+1)*-13 + (len + data[0]));

        if (ch == '\0') {
            fprintf(stderr, "Invalid character 0x%x(%d)\n", udata[i], udata[i]);
            return -1;
        }

        out[i] = ch;
    }

    out[i] = '\0';

    return i;
}

int main()
{
    char buf[200] = {'\0', };
    char out[200] = {'\0', };

    for (;;) {
        bzero(buf, sizeof(out));
        bzero(buf, sizeof(buf));
        fprintf(stdout, "Enter: ");
        fgets(buf, sizeof(buf)-1, stdin);

        if (*buf == '\n')
            break;

        apEncrypt(buf, out);
        fprintf(stdout, "Encrypted: [%s]\n", out);
        bzero(buf, sizeof(buf));
        apDecrypt(out, buf);
        fprintf(stdout, "Decrypted: [%s]", buf);
        printf("\n");
    }

    return 0;
}