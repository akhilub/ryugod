#
#   Amber: pattern matching
#   https://github.com/nineties/amber
#

### dontcare pattern ###
f(_) := puts("dontcare")
f(0) # => dontcare

### literal pattern ###
f(0)       := puts("integer 0")
f(1)       := puts("integer 1")
f("Hello") := puts("string Hello")

f(0)       # => integer 0
f(1)       # => integer 1
f("Hello") # => string Hello

### head pattern ###
f(x @ Int)    := puts("integer")
f(x @ String) := puts("string")

f(0)       # => integer
f("Hello") # => string

### list pattern ###
f([x,2,y]) := puts(x + y)
f([1,2,3]) # => 4

f([_,_,x...]) := puts(x)
f([1,2,3,4,5]) # => [3,4,5]

### composite pattern ###
f((x,_,_)) := puts(x)
f((0,1,2)) # => 0

f((_,x,y)) := puts(x+y)
f((0,1,2)) # => 3

f(Hoge{x, y}) := puts(x+y)
f('Hoge{1, 2}) # => 3

f(Hoge{x, y, ...}) := puts(x+y)
f('Hoge{1,2,3,4,5}) # => 3

f(1 + 2) := puts("one plus two")
f('(1 + 2)) # => "one plus two"

### conditional pattern ###

f(x) when x > 0  := puts("positive")
f(x) when x < 0  := puts("negative")

f(1)  # => positive
f(-1) # => negative

gcd(m, n) when  m >= n := gcd(n, m%n)
gcd(m, n) when  m < n  := gcd(n, m)
gcd(m, 0)              := m

puts(gcd(1071,1029)) # => 21

f(x) when x > 0 and x < 10 := puts("0 < x < 10")
f(5) # => 0 < x < 10