fun print_hex(n: Int, lower: Bool) {
    if n < 10 {
        print((n + '0' as Int) as Char);
    } else if n < 16 {
        print((n - 10 + (if lower { 'a' } else { 'A' }) as Int) as Char);
    } else {
        print_hex(n / 16, lower);
        print_hex(n % 16, lower);
    }
}

fun print_byte(mut n: Int, lower: Bool) {
    n &= 0xFF;
    print_hex(n / 16, lower);
    print_hex(n % 16, lower);
}

fun left_shift(mut a: Int, mut b: Int): Int {
    while b {
        a *= 2;
        b -= 1;
    }
    return a;
}

const MIN_INT = -2147483648;

fun right_shift(mut a: Int, mut b: Int): Int {
    let mut offset = MIN_INT;
    let was_negative = a < 0;
    for let mut i=0; i < b - 1; i += 1; {
        offset /= 2;
    }

    if was_negative { a = ~a; }
    
    while b {
        a /= 2;
        b -= 1;
    }

    if was_negative { a = ~a ^ offset; }

    return a;
}

fun print_hexln(n: Int, lower: Bool) {
    print_hex(n, lower);
    print("\n");
}

fun print_byteln(n: Int, lower: Bool) {
    print_byte(n, lower);
    print("\n");
}

fun xtime(mut n: Int): Int {
    n &= 0xFF;
    n *= 2;

    if n < 0x100 {
        n
    } else {
        n ^ 0x1B
    }
}

fun multiply(mut a: Int, mut b: Int): Int {
    a &= 0xFF;
    b &= 0xFF;
    let mut result = 0;
    let mut next_term = a;
    for let mut i=0; i < 8; i += 1; {
        if b & 1 {
            result ^= next_term;
        }
        next_term = xtime(next_term);
        b /= 2;
    }

    return result & 0xFF;
}

type State = [Int * 16];

fun row_major(c0r0: Int, c1r0: Int, c2r0: Int, c3r0: Int,
    c0r1: Int, c1r1: Int, c2r1: Int, c3r1: Int,
    c0r2: Int, c1r2: Int, c2r2: Int, c3r2: Int,
    c0r3: Int, c1r3: Int, c2r3: Int, c3r3: Int): State {
    return [
        c0r0, c0r1, c0r2, c0r3,
        c1r0, c1r1, c1r2, c1r3,
        c2r0, c2r1, c2r2, c2r3,
        c3r0, c3r1, c3r2, c3r3
    ];
}

fun col_major(c0r0: Int, c0r1: Int, c0r2: Int, c0r3: Int,
    c1r0: Int, c1r1: Int, c1r2: Int, c1r3: Int,
    c2r0: Int, c2r1: Int, c2r2: Int, c2r3: Int,
    c3r0: Int, c3r1: Int, c3r2: Int, c3r3: Int): State {
    return [
        c0r0, c0r1, c0r2, c0r3,
        c1r0, c1r1, c1r2, c1r3,
        c2r0, c2r1, c2r2, c2r3,
        c3r0, c3r1, c3r2, c3r3
    ];
}

fun get(state: &State, row: Int, col: Int): Int {
    return (state as &Int)[row * 4 + col];
}

fun set(state: &mut State, row: Int, col: Int, value: Int) {
    (state as &mut Int)[row * 4 + col] = value;
}

fun print_state(self: &State) {
    for let mut i=0; i < 4; i += 1; {
        for let mut j=0; j < 4; j += 1; {
            print_byte(get(self, i, j), False);
            print(" ");
        }
        print("\n");
    }
}

fun rotate_row(self: &mut State, row: Int, steps: Int) {
    for let mut i=0; i<steps; i += 1; {
        let temp = get(self, row, 0);
        set(self, row, 0, get(self, row, 1));
        set(self, row, 1, get(self, row, 2));
        set(self, row, 2, get(self, row, 3));
        set(self, row, 3, temp);
    }
}

fun shift_rows(self: &mut State) {
    rotate_row(self, 1, 1);
    rotate_row(self, 2, 2);
    rotate_row(self, 3, 3);
}

fun inverse_shift_rows(self: &mut State) {
    rotate_row(self, 1, 3);
    rotate_row(self, 2, 2);
    rotate_row(self, 3, 1);
}

fun add_round_key(self: &mut State, round_key: &State) {
    let round_key_ptr = round_key as &Int;
    let self_ptr = self as &mut Int;
    for let mut i=0; i < 16; i += 1; {
        self_ptr[i] ^= round_key_ptr[i];
    }
}

fun mix_columns(self: &mut State) {
    for let mut j=0; j < 4; j += 1; {
        let s0 = get(self, 0, j);
        let s1 = get(self, 1, j);
        let s2 = get(self, 2, j);
        let s3 = get(self, 3, j);

        set(self, 0, j, multiply(0x02, s0) ^ multiply(0x03, s1) ^ s2 ^ s3);
        set(self, 1, j, s0 ^ multiply(0x02, s1) ^ multiply(0x03, s2) ^ s3);
        set(self, 2, j, s0 ^ s1 ^ multiply(0x02, s2) ^ multiply(0x03, s3));
        set(self, 3, j, multiply(0x03, s0) ^ s1 ^ s2 ^ multiply(0x02, s3));
    }
}

fun inverse_mix_columns(self: &mut State) {
    for let mut j=0; j < 4; j += 1; {
        let s0 = get(self, 0, j);
        let s1 = get(self, 1, j);
        let s2 = get(self, 2, j);
        let s3 = get(self, 3, j);

        set(self, 0, j, multiply(0x0e, s0) ^ multiply(0x0b, s1) ^ multiply(0x0d, s2) ^ multiply(0x09, s3));
        set(self, 1, j, multiply(0x09, s0) ^ multiply(0x0e, s1) ^ multiply(0x0b, s2) ^ multiply(0x0d, s3));
        set(self, 2, j, multiply(0x0d, s0) ^ multiply(0x09, s1) ^ multiply(0x0e, s2) ^ multiply(0x0b, s3));
        set(self, 3, j, multiply(0x0b, s0) ^ multiply(0x0d, s1) ^ multiply(0x09, s2) ^ multiply(0x0e, s3));
    }
}


fun substitute_byte(mut byte: Int): Int {
    let S_BOX = [[99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118], [202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192], [183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21], [4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117], [9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132], [83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207], [208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168], [81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210], [205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115], [96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219], [224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121], [231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8], [186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138], [112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158], [225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223], [140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]];
    byte &= 0xFF;
    let row = right_shift(byte, 4) & 0xF;
    let col = byte & 0xF;
    return S_BOX[row][col];
}

fun inverse_substitute_byte(mut byte: Int): Int {
    let INVERSE_S_BOX = [[82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251], [124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203], [84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78], [8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37], [114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146], [108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132], [144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6], [208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107], [58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115], [150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110], [71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27], [252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244], [31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95], [96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239], [160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97], [23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]];
    byte &= 0xFF;
    let row = right_shift(byte, 4) & 0xF;
    let col = byte & 0xF;
    return INVERSE_S_BOX[row][col];
}

fun substitute_bytes(self: &mut State) {
    for let mut i=0; i < 4; i += 1; {
        for let mut j=0; j < 4; j += 1; {
            set(self, i, j, substitute_byte(get(self, i, j)));
        }
    }
}

fun inverse_substitute_bytes(self: &mut State) {
    for let mut i=0; i < 4; i += 1; {
        for let mut j=0; j < 4; j += 1; {
            set(self, i, j, inverse_substitute_byte(get(self, i, j)));
        }
    }
}

enum Key {
    Key128([Int * 16]),
    Key192([Int * 24]),
    Key256([Int * 32]),
}

fun get_key_rounds(self: &Key): Int {
    match self {
        &of Key128(_) => 10,
        &of Key192(_) => 12,
        &of Key256(_) => 14,
        _ => 0
    }
}

fun get_key_length(self: &Key): Int {
    match self {
        &of Key128(_) => 4,
        &of Key192(_) => 6,
        &of Key256(_) => 8,
        _ => 0
    }
}

fun get_key_size(self: &Key): Int {
    return get_key_length(self) * 4;
}

fun get_key_data(key: &Key): &Int = key as &Int;

fun print_key(self: &Key) {
    match self {
        &of Key128(key) => print("Key128: "),
        &of Key192(key) => print("Key192: "),
        &of Key256(key) => print("Key256: "),
        _ => print("Unknown key type: ")
    }
    let size = get_key_size(self);
    let data = get_key_data(self);
    for let mut i=0; i < size; i+=1; {
        print_byte(data[i], False);
    }
}

fun print_keyln(self: &Key) {
    print_key(self);
    print("\n");
}


fun substitute_word(word: Int): Int {
    let byte0 = substitute_byte(right_shift(word, 24) & 0xFF);
    let byte1 = substitute_byte(right_shift(word, 16) & 0xFF);
    let byte2 = substitute_byte(right_shift(word, 8) & 0xFF);
    let byte3 = substitute_byte(word & 0xFF);
    return left_shift(byte0, 24) + left_shift(byte1, 16) + left_shift(byte2, 8) + byte3;
}

fun rotate_word(word: Int): Int {
    let byte0 = right_shift(word, 24) & 0xFF;
    let byte1 = right_shift(word, 16) & 0xFF;
    let byte2 = right_shift(word, 8) & 0xFF;
    let byte3 = word & 0xFF;
    return left_shift(byte1, 24) + left_shift(byte2, 16) + left_shift(byte3, 8) + byte0;
}

fun word(byte3: Int, byte2: Int, byte1: Int, byte0: Int): Int {
    return left_shift(byte3, 24) + left_shift(byte2, 16) + left_shift(byte1, 8) + byte0;
}

fun bytes(word: Int): [Int * 4] {
    let byte0 = right_shift(word, 24) & 0xFF;
    let byte1 = right_shift(word, 16) & 0xFF;
    let byte2 = right_shift(word, 8) & 0xFF;
    let byte3 = word & 0xFF;
    return [byte0, byte1, byte2, byte3];
}

fun round_key(word0: Int, word1: Int, word2: Int, word3: Int): State {
    let bytes0 = bytes(word0);
    let bytes1 = bytes(word1);
    let bytes2 = bytes(word2);
    let bytes3 = bytes(word3);
    return col_major(bytes0[0], bytes1[0], bytes2[0], bytes3[0],
              bytes0[1], bytes1[1], bytes2[1], bytes3[1],
              bytes0[2], bytes1[2], bytes2[2], bytes3[2],
              bytes0[3], bytes1[3], bytes2[3], bytes3[3]);
}

fun key_expansion(key: &Key, nr: Int, nk: Int): &Int {
    let key_data = key as &Int;
    let w = alloc(4 * (nr + 1) * sizeof<Int>()) as &mut Int;
    for let mut i=0; i < nk; i+=1; {
        w[i] = word(key_data[4*i], key_data[4*i+1], key_data[4*i+2], key_data[4*i+3]);
    }

    let rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
    for let mut i=nk; i < 4 * (nr + 1); i += 1; {
        let mut temp = w[i-1];
        if i % nk == 0 {
            temp = substitute_word(rotate_word(temp)) ^ word(rcon[i / nk - 1], 0, 0, 0);
        } else if nk == 8 && i % nk == 4 {
            temp = substitute_word(temp);
        }

        w[i] = w[i-nk] ^ temp;
    }

    return w;
}

fun cipher(self: &mut State, key: &Key) {
    let len = get_key_length(key);
    let nr = get_key_rounds(key);
    let k = key_expansion(key, nr, len);
    let mut rk = round_key(k[0], k[1], k[2], k[3]);
    add_round_key(self, &rk);
    for let mut i=4; i < 4 * (nr + 1); i+=4; {
        rk = round_key(k[i], k[i+1], k[i+2], k[i+3]);
        substitute_bytes(self);
        shift_rows(self);
        if i < 4 * nr {
            mix_columns(self);
        }
        add_round_key(self, &rk);
    }

    free(k);
}

fun inverse_cipher(self: &mut State, key: &Key) {
    let len = get_key_length(key);
    let nr = get_key_rounds(key);
    let k = key_expansion(key, nr, len);

    let mut rk = round_key(k[4*nr], k[4*nr+1], k[4*nr+2], k[4*nr+3]);
    add_round_key(self, &rk);
    for let mut i=4*nr-4; i >= 0; i-=4; {
        rk = round_key(k[i], k[i+1], k[i+2], k[i+3]);
        inverse_shift_rows(self);
        inverse_substitute_bytes(self);
        add_round_key(self, &rk);
        if i > 0 {
            inverse_mix_columns(self);
        }
    }

    free(k);
}
let key = Key of Key128 [
    0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B,
    0x0C, 0x0D, 0x0E, 0x0F
];


let mut state: State = row_major(
    0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B,
    0x0C, 0x0D, 0x0E, 0x0F
);

print_keyln(&key);
print("Raw\n");
print_state(&state);
print("\n");
print("Cipher\n");
cipher(&mut state, &key);
print_state(&state);
print("\n");
print("Inverse-Cipher\n");
inverse_cipher(&mut state, &key);
print_state(&state);
print("\n");
