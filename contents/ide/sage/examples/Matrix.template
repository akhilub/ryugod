fun main() {
    // Create two 4x4 matrices
    let x = Matrix.new<Int, 4, 4>(10); // Populate with 10
    let y = Matrix.new<Int, 4, 4>(5);  // Populate with 5

    // Print the two matrices
    x.print();
    y.print();

    // Provide the matrix with the operations for the elem type
    fun add_ints(a: Int, b: Int): Int = a + b;
    fun mul_ints(a: Int, b: Int): Int = a * b;

    // Perform the mat mul!
    let z = y.mul<4>(&x, 0, add_ints, mul_ints);
    // Print the result
    z.print();
}

// Define a constant sized matrix with a generic element type
// and parameterized width and height.
struct Matrix<T, const Rows: Int, const Cols: Int> {
    arr: [[T * Cols] * Rows]
}

// Add some methods to our matrix
impl Matrix<T, Rows, Cols> {
    // Create a new matrix populated with initial values
    fun new(x: T): Matrix<T, Rows, Cols> {
        return {arr=[[x] * Cols] * Rows};
    }

    // Get a value from a matrix
    fun get(&self, row: Int, col: Int): &T {
        return &self.arr[row][col];
    }

    // Multiply with another matrix
    fun mul<const NewCols: Int>(
        &self,
        other: &Matrix<T, Cols, NewCols>,
        zero: T,
        add: fun(T, T) -> T,
        mul: fun(T, T) -> T
    ): Matrix<T, Rows, NewCols> {
        let mut result = Matrix.new<T, Rows, NewCols>(zero);
        for let mut j=0; j<NewCols; j+=1; {
            for let mut i=0; i<Rows; i+=1; {
                let mut sum = zero;
                for let mut k=0; k<Cols; k+=1; {
                    sum = add(sum, mul(self.arr[i][k], other.arr[k][j]));
                }
                result.arr[i][j] = sum;
            }
        }
        result
    }

    // Print the matrix
    fun print(&self) {
        for let mut row=0; row<Rows; row+=1; {
            for let mut col=0; col<Cols; col+=1; {
                print(*self.get(row, col), " ");
            }
            println();
        }
        println();
    }
}

main();
