//
//  TotemScript: examples
//  https://github.com/tdsmale/TotemScript
//

// declaring a function
// named functions can only be declared in global scope
function test(var a, var b)
{
    return a + b;
}

var a = test(123, 456); 
a = test(123); // arguments default to null when not provided by caller

var b = test; // functions can also be stored in variables
a = b(123, 456, 789); // additional arguments provided by caller are discarded

// functions can also be anonymous, which can be declared anywhere
b = function(var a, var b)
{
    return a * b;
};

a = b(123, 456);

a = function(var b, var c)
{
    return b - c;
}
(456, 123);

// Strings are immutable, but can be combined to create new strings
var a = "Hello, ";
var b = a + " World!";
print(b); // Hello, World!
var c = a[2];
print(c); // l

// Defines an Array that holds 20 values
var a = [20];

for(var i = 0; i < 20; i++)
{
	a[i] = i;
}

var b = a[0] + a[1];

// Arrays cannot be resized and must be redeclared if additional space is needed
a[20] = 1; // runtime error

a = "some other value"; // Arrays are automatically garbage-collected when no-longer referenced

// Arrays can also be created with values already inserted
a = [1, 2, "3", b];

// Create new garbage-collected object
var obj = {};

// Objects map values to names
obj.test = 123;
var val = obj.test;

obj["test"] = 456; // objects can use either bracket-notation or dot-notation

// Objects can store any sort of value
obj["test2"] = function(var x, var y)
{
    return x * y;
};

val["test2"](123, 456);

// Objects are less efficient than arrays, but can hold any amount of values 
var key = "key";
obj[key] = [20];

for(var i = 0; i < 20; i++)
{
    obj[key][i] = i;
}

// non-string keys are implicitly cast to strings
obj[123] = 456;
assert(obj[123] == obj[(123 as string)]);

// objects can be initialized with values just like arrays
var y = { 123:456, "789":"Hello!" };

// values can be removed by shifting them out
key << obj[key];


// Coroutines are functions that pause when they return, and can be resumed later

// Coroutines are created by casting any function to a coroutine, and invoked like a regular function
var co = function(var start, var end)
{
    for(var i = start; i < end; i++)
    {
        return i + start + end;
    }

    return 0;
} as coroutine;

var start = 11;
var end = 20;

// Parameters can be overridden with new values on subsequent calls
co(start, end);

for(var numLoops = 1; var val = co(); numLoops++)
{
    print(val);
}

// Coroutines reset once they reach the end of a function
co(start + 1, end + 1);
for(var numLoops = 1; var val = co(); numLoops++)
{
    print(val);
}

// Coroutines are also garbage-collected, just like Arrays - when no longer referenced, they are destroyed
co = 123;