using os
using math 

# distance from a to b
func distance(a :: Number,b :: Number)->Number {
    return ({math.max(a,b)} - {math.min(a,b)})
}

# returns b if a is closer to b and c if a is closer to c
func closer_to(a :: Number,b :: Number,c :: Number)->Number {
    if({distance(a,b)} < {distance(a,c)}) {
        return b
    }
    return c
}

# returns the closest direction for a given time
func closest(a :: Number)->Number {
    if({closer_to(a,45,15)} == 15) {
        if({closer_to(a,0,30)} == 30) {
            return {closer_to(a,15,30)}
        }
        else {
            return {closer_to(a,0,15)}
        }
    }
    else {
        if({closer_to(a,0,30)} == 30) {
            return {closer_to(a,45,30)}
        }
        else {
            return {closer_to(a,0,45)}
        }
    }
}

func get_min_pos()->List {
    new L0 [
        ["","","","","","","","",""],
        ["","","","","|","","","",""],
        ["","","","","|","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]
    new L15 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","-","-","-",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]
    new L30 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","|","","","",""],
        ["","","","","|","","","",""],
        ["","","","","","","","",""]
    ]
    new L45 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","-","-","-","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]

    new clst {closest({os.time("minutes")})}

    if(clst == 0) {
        return L0
    }
    elif(clst == 15) {
        return L15
    }
    elif(clst == 30) {
        return L30
    }
    elif(clst == 45) {
        return L45
    }
}

func get_hour_pos()->List {
    new L0 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","#","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]
    new L15 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","#","#","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]
    new L30 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","#","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]
    new L45 [
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","#","#","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""]
    ]

    new clst {closest({os.time("hours")})}

    if(clst == 0) {
        return L0
    }
    elif(clst == 15) {
        return L15
    }
    elif(clst == 30) {
        return L30
    }
    elif(clst == 45) {
        return L45
    }
}

func generate_buffer()->String {
    new buffer ">> CLOCK: <<\n"

    new min_pos {get_min_pos()}
    new hour_pos {get_hour_pos()}

    new time_numbers [
        ["","","","","0","","","",""],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["9","","","","@","","","","3"],
        ["","","","","","","","",""],
        ["","","","","","","","",""],
        ["","","","","6","","","",""]
    ]

    for y in {min_pos.length()} {
        new line_m {min_pos.at(y)}
        new line_h {hour_pos.at(y)}
        new line_t {time_numbers.at(y)}
        for x in {line_h.length()} {
            new add " "
            if({line_m.at(x)} != "") {
                set add {line_m.at(x)}
            }
            if({line_h.at(x)} != "") {
                set add {line_h.at(x)}
            }
            if({line_t.at(x)} != "") {
                set add {line_t.at(x)}
            }

            set buffer (buffer + add)
        }
        if(y+1 != {min_pos.length()}) {
            set buffer (buffer + "\n")
        }
    }
    return buffer
}

func schedule()->Void {
    while(1) {
        os.clear()
        print {generate_buffer()}
        os.sleep(3000)
    }
}

if({os.main_file()}) {
    schedule()
}
