#!/usr/bin/node

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ExecuteCode;
(function (ExecuteCode) {
    ExecuteCode[ExecuteCode["Input"] = 0] = "Input";
    ExecuteCode[ExecuteCode["Output"] = 1] = "Output";
})(ExecuteCode || (ExecuteCode = {}));
class Garam {
    constructor() {
        this.Storage = Array.apply(null, Array(255)).map(() => { return 0; });
        this.Pointer = 0;
    }
    Interpret(Code, onInputEvent, onOutputEvent) {
        this.CoreInterpret(Code, (ExecCode, Pointer) => {
            switch (ExecCode) {
                case ExecuteCode.Input:
                    break;
                case ExecuteCode.Output:
                    onOutputEvent(String.fromCharCode(this.Storage[Pointer]));
                    break;
            }
        });
    }
    Execute(Code) {
        this.CoreInterpret(Code, (ExecCode, Pointer) => {
            switch (ExecCode) {
                case ExecuteCode.Input:
                    break;
                case ExecuteCode.Output:
                    console.log(String.fromCharCode(this.Storage[Pointer]));
                    break;
            }
        });
    }
    CoreInterpret(Code, onExecuteCode) {
        return __awaiter(this, void 0, void 0, function* () {
            var InterpretIndex = 0;
            while (InterpretIndex <= Code.length) {
                const Char = Code[InterpretIndex];
                switch (Char) {
                    case "ㅗ":
                        this.Pointer++;
                        break;
                    case "ㅜ":
                        this.Pointer--;
                        break;
                    case "ㅏ":
                        this.Storage[this.Pointer]++;
                        break;
                    case "ㅓ":
                        this.Storage[this.Pointer]--;
                        break;
                    case "ㅇ":
                        onExecuteCode(ExecuteCode.Output, JSON.parse(JSON.stringify(this.Pointer)));
                        break;
                    case "ㅁ":
                        yield onExecuteCode(ExecuteCode.Input, JSON.parse(JSON.stringify(this.Pointer)));
                        break;
                    case "ㅕ":
                        if (this.Storage[this.Pointer] != 0) {
                            InterpretIndex = this.getNearbyWhileStart(Code, InterpretIndex);
                        }
                        else {
                            InterpretIndex++;
                        }
                        break;
                    case "ㅑ":
                        if (this.Storage[this.Pointer] == 0) {
                            InterpretIndex = this.getNearbyWhileEnd(Code, InterpretIndex);
                        }
                        else {
                            InterpretIndex++;
                        }
                        break;
                }
                if (Char != "ㅑ" && Char != "ㅕ") {
                    InterpretIndex++;
                }
            }
        });
    }
    getNearbyWhileStart(Code, Position) {
        for (var i = Position; i != 0; i--) {
            if (Code[i] == "ㅑ") {
                return i;
            }
        }
        return -1;
    }
    getNearbyWhileEnd(Code, Position) {
        for (var i = Position; i != Code.length; i++) {
            if (Code[i] == "ㅕ") {
                return i;
            }
        }
        return -1;
    }
}
var input = require("fs").readFileSync('/dev/stdin').toString();
var Interpreter = new Garam();
Interpreter.Interpret(input, (ApplyValue) => { }, (Out) => {
    process.stdout.write(Out);
});
