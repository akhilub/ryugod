/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.groovy',
    keywords: [
        'native',
        'package',
        'import',
        'goto',
        'const',
        'class',
        'if',
        'else',
        'switch',
        'while',
        'for',
        'do',
        'true',
        'false',
        'null',
        'this',
        'super',
        'new',
        'instanceof',
        'boolean',
        'char',
        'byte',
        'short',
        'int',
        'long',
        'float',
        'double',
        'void',
        'return',
        'static',
        'synchronized',
        'transient',
        'volatile',
        'final',
        'strictfp',
        'serializable',
        'throw',
        'try',
        'catch',
        'finally',
        'assert',
        'synchronized',
        'throws',
        'extends',
        'implements',
        'interface',
        'enum',
        'break',
        'continue',
        'public',
        'protected',
        'private',
        'abstract',
    ],
    builtins: [
        'Integer',
        'Double',
        'Date',
        'Boolean',
        'Float',
        'String',
        'Array',
        'Vector',
        'List',
        'Closure',
        'MetaMethod',
        'GroovyObject',
        'Cloneable',
        'Comparable',
        'Runnable',
        'Serializable',
        'Boolean',
        'Byte',
        'Class',
        'Object',
        'Character',
        'CharSequence',
        'ClassLoader',
        'Compiler',
        'Long',
        'InheritableThreadLocal',
        'Math',
        'Number',
        'Object',
        'Package',
        'Process',
        'Runtime',
        'RuntimePermission',
        'InheritableThreadLocal',
        'SecurityManager',
        'Short',
        'StrictMath',
        'StackTraceElement',
        'StringBuffer',
        'Thread',
        'ThreadGroup',
        'ThreadLocal',
        'Throwable',
        'Void',
        'ArithmeticException',
        'ArrayIndexOutOfBoundsException',
        'AssertionError',
        'ArrayStoreException',
        'ClassCastException',
        'ClassNotFoundException',
        'CloneNotSupportedException',
        'Exception',
        'IllegalAccessException',
        'IllegalArgumentException',
        'IllegalMonitorStateException',
        'IllegalStateException',
        'IllegalThreadStateException',
        'IndexOutOfBoundsException',
        'InstantiationException',
        'InterruptedException',
        'NegativeArraySizeException',
        'NoSuchFieldException',
        'NoSuchMethodException',
        'NullPointerException',
        'NumberFormatException',
        'RuntimeException',
        'SecurityException',
        'StringIndexOutOfBoundsException',
        'UnsupportedOperationException',
        'AbstractMethodError',
        'ClassCircularityError',
        'ClassFormatError',
        'Error',
        'ExceptionInInitializerError',
        'IllegalAccessError',
        'InstantiationError',
        'IncompatibleClassChangeError',
        'InternalError',
        'LinkageError',
        'NoClassDefFoundError',
        'NoSuchFieldError',
        'NoSuchMethodError',
        'OutOfMemoryError',
        'StackOverflowError',
        'ThreadDeath',
        'UnknownError',
        'UnsatisfiedLinkError',
        'UnsupportedClassVersionError',
        'VerifyError',
        'VirtualMachineError',
        'clone',
        'equals',
        'finalize',
        'getClass',
        'hashCode',
        'notify',
        'notifyAll',
        'toString',
        'wait',
        'as',
        'def',
        'in',
        'div',
        'minus',
        'plus',
        'abs',
        'round',
        'power',
        'multiply',
        'each',
        'call',
        'inject',
        'sort',
        'print',
        'println',
        'getAt',
        'putAt',
        'size',
        'push',
        'pop',
        'toList',
        'getText',
        'writeLine',
        'eachLine',
        'readLines',
        'withReader',
        'withStream',
        'withWriter',
        'withPrintWriter',
        'write',
        'read',
        'leftShift',
        'withWriterAppend',
        'readBytes',
        'splitEachLine',
        'newInputStream',
        'newOutputStream',
        'newPrintWriter',
        'newReader',
        'newWriter',
        'compareTo',
        'next',
        'previous',
        'isCase',
        'times',
        'step',
        'toInteger',
        'upto',
        'any',
        'collect',
        'dump',
        'every',
        'find',
        'findAll',
        'grep',
        'inspect',
        'invokeMethods',
        'join',
        'getErr',
        'getIn',
        'getOut',
        'waitForOrKill',
        'count',
        'tokenize',
        'asList',
        'flatten',
        'immutable',
        'intersect',
        'reverse',
        'reverseEach',
        'subMap',
        'append',
        'asWritable',
        'eachByte',
        'eachLine',
        'eachFile',
    ],
    typeKeywords: [],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"""/, 'string.escape', '@trpStringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']            
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        trpStringBody: [
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"""/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
