/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['#!', '--'],
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        //{ open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        //{ open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.ex',
    keywords: [
        'with',
        'without',
        'trace',
        'profile',
        'batch',
        'check',
        'indirect',
        'includes',
        'inline',
        'warning',
        'define',
        'elsedef',
        'elsifdef',
        'ifdef',
        'and',
        'as',
        'break',
        'by',
        'case',
        'constant',
        'continue',
        'do',
        'else',
        'elsif',
        'end',
        'entry',
        'enum',
        'exit',
        'export',
        'fallthru',
        'for',
        'function',
        'global',
        'goto',
        'if',
        'include',
        'label',
        'loop',
        'namespace',
        'not',
        'or',
        'override',
        'procedure',
        'public',
        'retry',
        'return',
        'routine',
        'switch',
        'then',
        'to',
        'type',
        'until',
        'while',
        'xor',
    ],
    builtins: [        
        'abort',
        'and_bits',
        'append',
        'arctan',
        'atom',
        'c_func',
        'c_proc',
        'call',
        'call_func',
        'call_proc',
        'clear_screen',
        'close',
        'command_line',
        'compare',
        'cos',
        'date',
        'delete',
        'delete_routine',
        'equal',
        'find',
        'floor',
        'get_key',
        'getc',
        'getenv',
        'gets',
        'hash',
        'head',
        'include_paths',
        'insert',
        'integer',
        'length',
        'log',
        'machine_func',
        'machine_proc',
        'match',
        'mem_copy',
        'mem_set',
        'not_bits',
        'object',
        'open',
        'option_switches',
        'or_bits',
        'peek',
        'peek2s',
        'peek2u',
        'peek4s',
        'peek4u',
        'peek_string',
        'peeks',
        'pixel',
        'platform',
        'poke',
        'poke2',
        'poke4',
        'position',
        'power',
        'prepend',
        'print',
        'printf',
        'puts',
        'rand',
        'remainder',
        'remove',
        'repeat',
        'replace',
        'routine_id',
        'sequence',
        'sin',
        'splice',
        'sprintf',
        'sqrt',
        'system',
        'system_exec',
        'tail',
        'tan',
        'task_clock_start',
        'task_clock_stop',
        'task_create',
        'task_list',
        'task_schedule',
        'task_self',
        'task_status',
        'task_suspend',
        'task_yield',
        'time',
        'xor_bits',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /@?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(^--.*$)/, 'comment'],
            [/(^#!.*$)/, 'comment'],
            //[/(^#.*$)/, 'comment'],
            [/\(\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
