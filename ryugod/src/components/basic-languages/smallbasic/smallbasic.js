/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: "'",
        blockComment: ['/*', '*/']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')'],
        ['<', '>'],
        ['addhandler', 'end addhandler'],
        ['class', 'end class'],
        ['enum', 'end enum'],
        ['event', 'end event'],
        ['function', 'end function'],
        ['get', 'end get'],
        ['if', 'end if'],
        ['interface', 'end interface'],
        ['module', 'end module'],
        ['namespace', 'end namespace'],
        ['operator', 'end operator'],
        ['property', 'end property'],
        ['raiseevent', 'end raiseevent'],
        ['removehandler', 'end removehandler'],
        ['select', 'end select'],
        ['set', 'end set'],
        ['structure', 'end structure'],
        ['sub', 'end sub'],
        ['synclock', 'end synclock'],
        ['try', 'end try'],
        ['while', 'end while'],
        ['with', 'end with'],
        ['using', 'end using'],
        ['do', 'loop'],
        ['for', 'next']
    ],
    autoClosingPairs: [
        { open: '{', close: '}', notIn: ['string', 'comment'] },
        { open: '[', close: ']', notIn: ['string', 'comment'] },
        { open: '(', close: ')', notIn: ['string', 'comment'] },
        { open: '"', close: '"', notIn: ['string', 'comment'] },
        { open: '<', close: '>', notIn: ['string', 'comment'] }
    ],
    folding: {
        markers: {
            start: new RegExp('^\\s*#Region\\b'),
            end: new RegExp('^\\s*#End Region\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.vb',
    ignoreCase: true,
    brackets: [
        { token: 'delimiter.bracket', open: '{', close: '}' },
        { token: 'delimiter.array', open: '[', close: ']' },
        { token: 'delimiter.parenthesis', open: '(', close: ')' },
        { token: 'delimiter.angle', open: '<', close: '>' },
        // Special bracket statement pairs
        // according to https://msdn.microsoft.com/en-us/library/tsw2a11z.aspx
        {
            token: 'keyword.tag-addhandler',
            open: 'addhandler',
            close: 'end addhandler'
        },
        { token: 'keyword.tag-class', open: 'class', close: 'end class' },
        { token: 'keyword.tag-enum', open: 'enum', close: 'end enum' },
        { token: 'keyword.tag-event', open: 'event', close: 'end event' },
        {
            token: 'keyword.tag-function',
            open: 'function',
            close: 'end function'
        },
        { token: 'keyword.tag-get', open: 'get', close: 'end get' },
        { token: 'keyword.tag-if', open: 'if', close: 'end if' },
        {
            token: 'keyword.tag-interface',
            open: 'interface',
            close: 'end interface'
        },
        { token: 'keyword.tag-module', open: 'module', close: 'end module' },
        {
            token: 'keyword.tag-namespace',
            open: 'namespace',
            close: 'end namespace'
        },
        {
            token: 'keyword.tag-operator',
            open: 'operator',
            close: 'end operator'
        },
        {
            token: 'keyword.tag-property',
            open: 'property',
            close: 'end property'
        },
        {
            token: 'keyword.tag-raiseevent',
            open: 'raiseevent',
            close: 'end raiseevent'
        },
        {
            token: 'keyword.tag-removehandler',
            open: 'removehandler',
            close: 'end removehandler'
        },
        { token: 'keyword.tag-select', open: 'select', close: 'end select' },
        { token: 'keyword.tag-set', open: 'set', close: 'end set' },
        {
            token: 'keyword.tag-structure',
            open: 'structure',
            close: 'end structure'
        },
        { token: 'keyword.tag-sub', open: 'sub', close: 'end sub' },
        {
            token: 'keyword.tag-synclock',
            open: 'synclock',
            close: 'end synclock'
        },
        { token: 'keyword.tag-try', open: 'try', close: 'end try' },
        { token: 'keyword.tag-while', open: 'while', close: 'end while' },
        { token: 'keyword.tag-with', open: 'with', close: 'end with' },
        // Other pairs
        { token: 'keyword.tag-using', open: 'using', close: 'end using' },
        { token: 'keyword.tag-do', open: 'do', close: 'loop' },
        { token: 'keyword.tag-for', open: 'for', close: 'next' }
    ],
    keywords: [
        'PRINT',
        'SPRINT',
        'INPUT',
        'SINPUT',
        'REM',
        'CHAIN',
        'ON',
        'LABEL',
        'GOTO',
        'IF',
        'THEN',
        'ELSE',
        'ELIF',
        'ELSEIF',
        'ENDIF',
        'FI',
        'FOR',
        'TO',
        'STEP',
        'NEXT',
        'WHILE',
        'WEND',
        'REPEAT',
        'UNTIL',
        'SELECT',
        'CASE',
        'GOSUB',
        'RETURN',
        'READ',
        'DATA',
        'RESTORE',
        'EXIT',
        'ERASE',
        'USE',
        'USING',
        'USG',
        'LINE',
        'COLOR',
        'RUN',
        'EXEC',
        'OPEN',
        'APPEND',
        'AS',
        'CLOSE',
        'LINEINPUT',
        'LINPUT',
        'SEEK',
        'WRITE',
        'INSERT',
        'DELETE',
        'TRY',
        'CATCH',
        'END TRY',
        'TRON',
        'TROFF',
        'OPTION',
        'BG',
        'LOGPRINT',
        'COLOR',
        'FILLED',
        'FOR',
        'INPUT',
        'OUTPUT',
        'APPEND',
        'USING',
        'USG',
        'AS',
        'TO',
        'DO',
        'STEP',
        'THEN',
        'SUB',
        'FUNC',
        'DEF',
        'LOOP',
        'ON',
        'OFF',
        'USE',
        'BG',
    ],
    tagwords: [
        'LOGPRINT',
        'COLOR',
        'FILLED',
        'FOR',
        'INPUT',
        'OUTPUT',
        'APPEND',
        'USING',
        'USG',
        'AS',
        'TO',
        'DO',
        'STEP',
        'THEN',
        'SUB',
        'FUNC',
        'DEF',
        'LOOP',
        'ON',
        'OFF',
        'USE',
        'BG',
        'ASC',
        'VAL',
        'CHR',
        'STR',
        'OCT',
        'HEX',
        'LCASE',
        'LOWER',
        'UCASE',
        'UPPER',
        'LTRIM',
        'RTRIM',
        'SPACE',
        'SPC',
        'TAB',
        'CAT',
        'ENV',
        'TRIM',
        'STRING',
        'SQUEEZE',
        'LEFT',
        'RIGHT',
        'LEFTOF',
        'RIGHTOF',
        'LEFTOFLAST',
        'RIGHTOFLAST',
        'MID',
        'REPLACE',
        'RUN',
        'INKEY',
        'TIME',
        'DATE',
        'INSTR',
        'RINSTR',
        'LBOUND',
        'UBOUND',
        'LEN',
        'EMPTY',
        'ISARRAY',
        'ISNUMBER',
        'ISSTRING',
        'ISMAP',
        'ATAN2',
        'POW',
        'ROUND',
        'COS',
        'SIN',
        'TAN',
        'COSH',
        'SINH',
        'TANH',
        'ACOS',
        'ASIN',
        'ATAN',
        'ATN',
        'ACOSH',
        'ASINH',
        'ATANH',
        'SEC',
        'ASEC',
        'SECH',
        'ASECH',
        'CSC',
        'ACSC',
        'CSCH',
        'ACSCH',
        'COT',
        'ACOT',
        'COTH',
        'ACOTH',
        'SQR',
        'ABS',
        'EXP',
        'LOG',
        'LOG10',
        'FIX',
        'INT',
        'DEG',
        'RAD',
        'PEN',
        'FLOOR',
        'CEIL',
        'FRAC',
        'FRE',
        'SGN',
        'EOF',
        'SEEK',
        'LOF',
        'RND',
        'MAX',
        'MIN',
        'ABSMAX',
        'ABSMIN',
        'SUM',
        'SUMSQ',
        'STATMEAN',
        'STATMEDIAN',
        'STATSTD',
        'STATMEANDEV',
        'STATSPREADS',
        'STATSPREADP',
        'SEGCOS',
        'SEGSIN',
        'SEGLEN',
        'POLYAREA',
        'POLYCENT',
        'PTDISTSEG',
        'PTSIGN',
        'PTDISTLN',
        'POINT',
        'XPOS',
        'YPOS',
        'INPUT',
        'LINEQN',
        'FILES',
        'INVERSE',
        'TRANSPOSE',
        'DETERM',
        'JULIAN',
        'DATEFMT',
        'WEEKDAY',
        'IFF',
        'FORMAT',
        'FREEFILE',
        'TICKS',
        'TIMER',
        'PROGLINE',
        'RUN',
        'TXTW',
        'TXTH',
        'TEXTWIDTH',
        'TEXTHEIGHT',
        'EXIST',
        'ISFILE',
        'ISDIR',
        'ISLINK',
        'ACCESS',
        'RGB',
        'RGBF',
        'BIN',
        'ENCLOSE',
        'DISCLOSE',
        'TRANSLATE',
        'CHOP',
        'BGETC',
        'SEQ',
        'CBS',
        'BCS',
        'CALL',
        'IMAGE',
        'ARRAY',
        'FORM',
        'WINDOW',
        'TIMESTAMP',
        'CLS',
        'THROW',
        'ENV',
        'LOCATE',
        'AT',
        'PEN',
        'DATEDMY',
        'BEEP',
        'SOUND',
        'NOSOUND',
        'PSET',
        'RECT',
        'CIRCLE',
        'RANDOMIZE',
        'SPLIT',
        'JOIN',
        'PAUSE',
        'DELAY',
        'ARC',
        'DRAW',
        'PAINT',
        'PLAY',
        'SORT',
        'SEARCH',
        'ROOT',
        'DIFFEQN',
        'CHART',
        'WINDOW',
        'VIEW',
        'DRAWPOLY',
        'M3IDENT',
        'M3ROTATE',
        'M3SCALE',
        'M3TRANS',
        'M3APPLY',
        'INTERSECT',
        'POLYEXT',
        'DERIV',
        'KILL',
        'RENAME',
        'COPY',
        'CHDIR',
        'MKDIR',
        'RMDIR',
        'TLOAD',
        'TSAVE',
        'LOCK',
        'CHMOD',
        'PLOT',
        'SWAP',
        'DIRWALK',
        'BPUTC',
        'BLOAD',
        'BSAVE',
        'TIMEHMS',
        'EXPRSEQ',
        'CALL',
        'DEFINEKEY',
        'SHOWPAGE',
        'TIMER',
        'STKDUMP',
    ],
    typeKeywords: [
        'LOCAL',
        'SUB',
        'FUNC',
        'DEF',
        'BYREF',
        'DECLARE',
        'IMPORT',
        'EXPORT',
        'UNIT',
        'LET',
        'CONST',
        'DIM',
        'REDIM',
        'STOP',
        'END',

        'AND',
        'OR',
        'BAND',
        'BOR',
        'XOR',
        'NOT',
        'MOD',
        'MDL',
        'EQV',
        'IMP',
        'NAND',
        'NOR',
        'XNOR',
        'IN',
        'LIKE',
        'LSHIFT',
        'RSHIFT',
    ],
    // we include these common regular expressions
    symbols: /[=><!~?;\.,:&|+\-*\/\^%]+/,
    integersuffix: /U?[DI%L&S@]?/,
    floatsuffix: /[R#F!]?/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            // whitespace
            { include: '@whitespace' },
            // special ending tag-words
            [/next(?!\w)/, { token: 'keyword.tag-for' }],
            [/loop(?!\w)/, { token: 'keyword.tag-do' }],
            // usual ending tags
            [
                /end\s+(?!for|do)(addhandler|class|enum|event|function|get|if|interface|module|namespace|operator|property|raiseevent|removehandler|select|set|structure|sub|synclock|try|while|with|using)/,
                { token: 'keyword.tag-$1' }
            ],
            [/[a-zA-Z]\w*\$/, 'variable'],
            // identifiers, tagwords, and keywords
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@tagwords': { token: 'keyword.tag-$0' },
                        '@keywords': { token: 'keyword.$0' },
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ],            
            // Preprocessor directive
            [/^\s*#\w+/, 'keyword'],
            // numbers
            [/\d*\d+e([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/\d*\.\d+(e[\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/&H[0-9a-f]+(@integersuffix)/, 'number.hex'],
            [/&0[0-7]+(@integersuffix)/, 'number.octal'],
            [/\d+(@integersuffix)/, 'number'],
            // date literal
            [/#.*#/, 'number'],
            // delimiters and operators
            [/[{}()\[\]]/, '@brackets'],
            [/@symbols/, 'delimiter'],
            // strings
            [/["\u201c\u201d]/, { token: 'string.quote', next: '@string' }]
        ],
        whitespace: [
            [/[ \t\r\n]+/, ''],
            [/(\'|REM(?!\w)).*$/, 'comment']
        ],
        string: [
            [/[^"\u201c\u201d]+/, 'string'],
            [/["\u201c\u201d]{2}/, 'string.escape'],
            [/["\u201c\u201d]C?/, { token: 'string.quote', next: '@pop' }]
        ]
    }
};
