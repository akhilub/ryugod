/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['#'],
        blockComment: ["#~", "~#"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        //{ open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        //{ open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.obs',
    keywords: [
        'if',
        'else',
        'select',
        'while',
        'do',
        'for',
        'each',
        'and',
        'or',
        'xor',
        'class',
        'function',
        'return',
        'interface',
        'enum',
        'public',
        'private',
        'virtual',
        'method',
        'consts',
        'use',
        'native',
    ],
    builtins: [
        'Add',
        'AddBack',
        'AddFront',
        'AES256',
        'AnimatedImageSprite',
        'Append',
        'Back',
        'BackwardIterator',
        'Base',
        'Base64',
        'BaseArrayHolder',
        'BasicCompare',
        'Bool',
        'BoolHolder',
        'Byte',
        'ByteArrayHolder',
        'ByteHolder',
        'Capacity',
        'Char',
        'CharArrayHolder',
        'CharHolder',
        'Class',
        'Clear',
        'ClearError',
        'Clone',
        'Compare',
        'Compress',
        'Console',
        'Count',
        'DataType',
        'Delete',
        'Deserializer',
        'Directory',
        'Each',
        'Empty',
        'Empty',
        'Empty',
        'EndsWith',
        'Equals',
        'Error',
        'ErrorLine',
        'File',
        'FileReader',
        'FileWriter',
        'Filter',
        'Find',
        'Find',
        'FindAll',
        'FindLast',
        'Float',
        'FloatArrayHolder',
        'FloatHolder',
        'Forward',
        'ForwardIterator',
        'Front',
        'Func2Holder',
        'Func3Holder',
        'Func4Holder',
        'FuncHolder',
        'Function',
        'GameFramework',
        'Get',
        'GetBasePath',
        'GetClass',
        'GetClassID',
        'GetError',
        'GetInstanceID',
        'GetKeys',
        'GetPrefPath',
        'GetValues',
        'GLExtensionSupported',
        'GLGetAttribute',
        'GLGetCurrentWindow',
        'GLGetSwapInterval',
        'GLLoadLibrary',
        'GLResetAttributes',
        'GLSetAttribute',
        'GLSetSwapInterval',
        'GLUnloadLibrary',
        'Has',
        'Has',
        'HashID',
        'Head',
        'ImageSprite',
        'Init',
        'InitSubSystem',
        'InputStream',
        'Insert',
        'Insert',
        'Insert',
        'Int',
        'IntArrayHolder',
        'IntHolder',
        'IsBack',
        'IsEmpty',
        'IsEmpty',
        'IsEmpty',
        'IsFront',
        'JsonBuilder',
        'JsonElement',
        'JsonParser',
        'JsonType',
        'Limit',
        'Logger',
        'Map',
        'Matrix2D',
        'MD5',
        'Method',
        'More',
        'New',
        'New',
        'New',
        'New',
        'New',
        'Next',
        'Nil',
        'Object',
        'OutputStream',
        'Pop',
        'Position',
        'Previous',
        'Print',
        'PrintLine',
        'Quit',
        'QuitSubSystem',
        'ReadString',
        'Rectangle',
        'Remove',
        'Remove',
        'Remove',
        'RemoveBack',
        'RemoveFront',
        'Replace',
        'ReplaceAll',
        'Resize',
        'Rest',
        'Reverse',
        'Rewind',
        'RIPEMD160',
        'Runtime',
        'Serializer',
        'Set',
        'SHA256',
        'Shape',
        'Size',
        'Size',
        'Size',
        'Size',
        'Split',
        'Sprite',
        'StartsWith',
        'String',
        'SubString',
        'TCPSecureSocket',
        'TCPSocket',
        'TCPSocketServer',
        'TextSprite',
        'TitledImageSprite',
        'ToByteArray',
        'ToCharArray',
        'ToFloat',
        'ToInt',
        'ToLower',
        'ToUpper',
        'Trim',
        'Type',
        'TypeId',
        'Vector2',
        'WasInit',
        'WriteBuffer',
        'WriteErrorBuffer',
        'XmlAttribute',
        'XmlBuilder',
        'XmlElement',
        'XmlParser',
        'Zip',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@comments' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /@?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
        ],
        comments: [
            [/#~/, 'comment', '@comment'],
            ['(^#.*$)', 'comment']            
        ],
        comment: [
            [/[^#~]+/, 'comment'],
            [/~#/, 'comment', '@pop'],
            [/[#~]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
