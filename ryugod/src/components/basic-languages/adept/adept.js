/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.adept',
    keywords: [
        'POD',
        'alias',
        'and',
        'as',
        'at',
        'break',
        'case',
        'cast',
        'continue',
        'def',
        'default',
        'defer',
        'delete',
        'each',
        'else',
        'enum',
        'external',
        'fallthrough',
        'for',
        'foreign',
        'func',
        'funcptr',
        'global',
        'if',
        'import',
        'in',
        'inout',
        'new',
        'or',
        'out',
        'packed',
        'private',
        'public',
        'repeat',
        'return',
        'sizeof',
        'static',
        'stdcall',
        'struct',
        'switch',
        'typeinfo',
        'unless',
        'until',
        'while',
        'va_start',
        'va_end',
        'va_copy',
        'va_arg',
        'verbatim',
        'void',
        'union',
        'exhaustive',
        'const',
        'define',
        'namespace',
        'using',
        'implicit',
        'pragma',
        'elif',
        'llvm_asm',
        'embed',
    ],
    builtins: [
        'system',
        'exit',
        'abort',
        'atexit',
        'calloc',
        'free',
        'malloc',
        'realloc',
        'atof',
        'atoi',
        'atol',
        'strtod',
        'strtol',
        'strtoul',
        'abs',
        'labs',
        'getenv',
        'qsort',
        'bsearch',
        'rand',
        'srand',
        'SEEK_SET',
        'SEEK_CUR',
        'SEEK_END',
        'BUFSIZ',
        'EOF',
        'FILENAME_MAX',
        'FOPEN_MAX',
        'TMP_MAX',
        '_IOFBF',
        '_IOLBF',
        '_IONBF',
        'L_tmpnam',
        'FILE',
        'stdin',
        'STDIN',
        'stdout',
        'STDOUT',
        'stderr',
        'STDERR',
        'remove',
        'rename',
        'tmpfile',
        'tmpnam',
        'fclose',
        'fflush',
        'fopen',
        'freopen',
        'setbuf',
        'setvbuf',
        'fgetc',
        'fgets',
        'fputc',
        'fputs',
        'getc',
        'putc',
        'putchar',
        'getchar',
        'ungetc',
        'puts',
        'gets',
        'fread',
        'fwrite',
        'fgetpos',
        'fseek',
        'fsetpos',
        'ftell',
        'rewind',
        'clearerr',
        'feof',
        'ferror',
        'perror',
        'printf',
        'fprintf',
        'sprintf',
        'snprintf',
        'scanf',
        'fscanf',
        'sscanf',
        'vprintf',
        'vfprintf',
        'vsprintf',
        'vsnprintf',
        'vscanf',
        'vfscanf',
        'vsscanf',
        'print',
        'place',
        'vplace',
        'placeEx',
        'placePlain',
        'place',
        'newline',
        'scan',
        'scanInt',
        'scanIntInto',
        'scanDouble',
        'scanDoubleInto',
        'skim',
        'skimInt',
        'skimIntInto',
        'skimIntInto',
        'skimDouble',
        'skimDoubleInto',
    ],
    typeKeywords: [
        'bool',
        'byte',
        'ubyte',
        'short',
        'ushort',
        'int',
        'uint',
        'long',
        'ulong',
        'usize',
        'successful',
        'float',
        'double',
        'ptr',
        'String',
        'List',
        'Array',
        'VariadicArray',
        'InitializerList',
        'Vector2f',
        'Vector3f',
        'Matrix4f',
        'AABB',
        'TypeInfo',
        'FILE',
        'va_list',
        'true',
        'false',
        'null',
        'undef',
        'this',
        'it',
        'idx',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/#[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
