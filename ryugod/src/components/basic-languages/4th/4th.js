/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '\\',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.4th',
    keywords: [        
        'begin',
        'again',
        'while',
        'if',
        'then',
        'else',        
        'and',
        'argn',
        'args',
        'c',
        'call',
        'catch',
        'do',
        'environ',
        'environ',
        'hold',
        'literal',
        'loop',
        'number',
        'offset',
        'omit',
        'or',
        'parse',
        'pause',
        'place',
        'r',
        'rdrop',
        'rp',
        'sp',
        'throw',
        'to',
        'trailing',
        'type',
        'use',
        'value',
        'variable',
        'vector',
        'xor',
    ],
    builtins: [
        'emit',
        'negate',
        'accept',
        'close',
        'open',
        'exit',
        'radix',
        'count',
        'cmove',
        'delete-file',
        'smove',
        'seek',
        'tell',
        'sync',
        'refill',
        'fill',
        'sign',
        'time',
        'quit',
        'min',
        'max',
        'execute',
        'cr',
        'spaces',
        'mod',
        'swap',
        'dup',
        'over',
        'rot',
        'drop',
        'invert',
        'branch',
        'shift',
        'abs',
    ],
    typeKeywords: [
        'constant',
        'char',
        'string',
        '2DROP',
        '2DUP',
        '2NIP',
        '2RDROP',
        '2SWAP',
        'ABORT',
        'ABORT',
        'AGAIN',
        'AKA',
        'ALIAS',
        'ALIGN',
        'ALIGNED',
        'ARRAY',
        'ASSERT',
        'BEGIN',
        'BINARY',
        'BLANK',
        'BODY',
        'BOUNDS',
        'BUFFER',
        'C',
        'CASE',
        'CATCH',
        'CELLS',
        'CFIELD',
        'CHAR',
        'CHARS',
        'CHOP',
        'CONSTANT',
        'CREATE',
        'D',
        'DECIMAL',
        'DEFER',
        'DEFER',
        'DEFINED',
        'DO',
        'DOES',
        'DONE',
        'ELSE',
        'ELSE',
        'END-STRUCT',
        'ENDCASE',
        'ENDOF',
        'ENUM',
        'EQUATES',
        'ERASE',
        'ERROR',
        'EXCEPT',
        'EXIT',
        'FIELD',
        'FILE',
        'FORCE',
        'GOTO',
        'HERE',
        'HEX',
        'HIDE',
        'IF',
        'IGNORE',
        'IMMEDIATE',
        'INCLUDE',
        'IS',
        'LEAVE',
        'LOOP',
        'MAX',
        'MOD',
        'NAMES',
        'NEEDS',
        'NIP',
        'NONAME',
        'NOT',
        'OCTAL',
        'OF',
        'OFFSET',
        'PARSE-WORD',
        'PLACE',
        'PRAGMA',
        'R',
        'RECURSE',
        'REDO',
        'REPEAT',
        'REWIND',
        'ROT',
        'RSHIFT',
        'S',
        'SCONSTANT',
        'SIGN',
        'SOURCE',
        'SPACE',
        'STOW',
        'STRING',
        'TABLE',
        'TAG',
        'THEN',
        'THROW',
        'TO',
        'TOKEN',
        'TUCK',
        'UNLESS',
        'UNLOOP',
        'UNTIL',
        'VALUE',
        'VARIABLE',
        'WHILE',
        'ZERO',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[*.][a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_][\w-]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\\ .+$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
