/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.jq',
    keywords: [
        'and',
        'as',
        'break',
        'catch',
        'def',
        'elif',
        'else',
        'empty',
        'end',
        'false',
        'if',
        'label',
        'not',
        'null',
        'or',
        'then',
        'true',
        'try',
    ],
    builtins: [        
        '$__loc__',
        '$ENV',
        'acos',
        'acosh',
        'add',
        'all',
        'any',
        'arrays',
        'ascii_downcase',
        'ascii_upcase',
        'asin',
        'asinh',
        'atan',
        'atan2',
        'atanh',
        'booleans',
        'bsearch',
        'capture',
        'cbrt',
        'ceil',
        'combinations',
        'contains',
        'copysign',
        'cos',
        'cosh',
        'debug',
        'del',
        'delpaths',
        'drem',
        'empty',
        'endswith',
        'env',
        'erf',
        'erfc',
        'error',
        'exp',
        'exp10',
        'exp2',
        'explode',
        'expm1',
        'fabs',
        'fdim',
        'finites',
        'first',
        'flatten',
        'floor',
        'floor',
        'fma',
        'fmax',
        'fmin',
        'fmod',
        'foreach',
        'frexp',
        'from_entries',
        'fromdate',
        'fromdateiso8601',
        'fromjson',
        'fromstream',
        'gamma',
        'getpath',
        'gmtime',
        'group_by',
        'gsub',
        'halt',
        'halt_error',
        'has',
        'hypot',
        'implode',
        'import',
        'in',
        'include',
        'index',
        'indices',
        'infinite',
        'input',
        'input_filename',
        'input_line_number',
        'inputs',
        'inside',
        'isempty',
        'isfinite',
        'isinfinite',
        'isnan',
        'isnormal',
        'iterables',
        'j0',
        'j1',
        'jn',
        'join',
        'JOIN',
        'keys',
        'keys_unsorted',
        'last',
        'ldexp',
        'leaf_paths',
        'length',
        'lgamma',
        'limit',
        'localtime',
        'log',
        'log10',
        'log1p',
        'log2',
        'logb',
        'ltrimstr',
        'map',
        'map_values',
        'match',
        'max',
        'max_by',
        'min',
        'min_by',
        'mktime',
        'modf',
        'module',
        'modulemeta',
        'nan',
        'nearbyint',
        'nextafter',
        'nexttoward',
        'normals',
        'now',
        'nth',
        'nulls',
        'numbers',
        'objects',
        'path',
        'paths',
        'pow',
        'pow10',
        'range',
        'recurse',
        'reduce',
        'RelativePathString',
        'remainder',
        'reverse',
        'rindex',
        'rint',
        'round',
        'rtrimstr',
        'scalars',
        'scalb',
        'scalbln',
        'scan',
        'select',
        'setpath',
        'significand',
        'sin',
        'sinh',
        'sort',
        'sort_by',
        'split',
        'splits',
        'sqrt',
        'sqrt',
        'startswith',
        'stderr',
        'stdin',
        'stdout',
        'strflocaltime',
        'strftime',
        'strings',
        'strptime',
        'sub',
        'tan',
        'tanh',
        'test',
        'tgamma',
        'to_entries',
        'todate',
        'todateiso8601',
        'tojson',
        'tonumber',
        'tostream',
        'tostring',
        'transpose',
        'trunc',
        'truncate_stream',
        'type',
        'unique',
        'unique_by',
        'until',
        'utf8bytelength',
        'values',
        'walk',
        'while',
        'with_entries',
        'y0',
        'y1',
        'yn',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[@\$][a-zA-Z_]\w*/, 'metatag'],
            [
                /\$?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
