/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.n5',
    keywords: [
        'string',
        'integer',
        'thread',
        'rational',
        'poly',
        'void',
        'auto',
        'public',
        'protected',
        'static',
        'global',
        'poly',
        'int',
        'rational',
        'real',
        'struct',
        'union',
        'function',
        'if',
        'else',
        'while',
        'do',
        'for',
        'switch',
        'case',
        'default',
        'twixt',
        'try',
        'catch',
        'raise',
        'break',
        'return',
        'extend',
        'import',
    ],
    builtins: [
        'printf',
        'gets',
        'scanf',
        'vscanf',
        'imprecise',
        'imprecise',
        'string_to_integer',
        'string_to_integer',
        'putchar',
        'sleep',
        'exit',
        'dim',
        'dims',
        'reference',
        'string_to_real',
        'abs',
        'floor',
        'ceil',
        'exponent',
        'mantissa',
        'numerator',
        'denominator',
        'precision',
        'sign',
        'bit_width',
        'is_int',
        'is_rational',
        'is_number',
        'is_string',
        'is_file',
        'is_thread',
        'is_semaphore',
        'is_continuation',
        'is_array',
        'is_ref',
        'is_struct',
        'is_func',
        'is_void',
        'gcd',
        'xor',
        'setjmp',
        'setjmp',
        'setjmp',
        'longjmp',
        'prompt',
        'prompt2',
        'prompt3',
        'format',
        'version',
        'build',
        'stdin',
        'stdout',
        'stderr',
        'pi',
        'real',
        'sqrt',
        'cbrt',
        'exp',
        'log',
        'log10',
        'log2',
        'pi_value',
        'sin',
        'cos',
        'sin_cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'atan2',
        'pow',
        'fprintf',
        'string_write',
        'close',
        'flush',
        'getc',
        'end',
        'error',
        'clear_error',
        'string_read',
        'string_string',
        'open',
        'fputc',
        'ungetc',
        'setbuf',
        'fgets ',
        'pipe',
        'pr',
        'fscanf',
        'vfscanf ',
        'kill',
        'trace',
        'cont',
        'thread current',
        'list',
        'get_priority',
        'thread id_to_thread',
        'poly join',
        'set_priority',
        'semaphore new',
        'semaphore new',
        'signal',
        'wait',
        'test',
        'length',
        'new',
        'new',
        'index',
        'substr',
        'library_path',
        'undefine',
        'undefine',
        'delete',
        'lex_file',
        'lex_library',
        'lex_string',
        'edit',
        'new',
        'new_names',
        'pretty_print',
        'display',
        'show',
        'show',
        'show',
        'poly insert',
        'check',
        'get',
        'unset',
        'set',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
