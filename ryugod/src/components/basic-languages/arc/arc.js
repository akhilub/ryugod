/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ';',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.arc',
    keywords: [
        'assign',
        'do',
        'fn',
        'if',
        'mac',
        'quote',
    ],
    builtins: [
        'aand',
        'abs',
        'accum',
        'acons',
        'adjoin',
        'afn',
        'aif',
        'alist',
        'all',
        'alref',
        'and',
        'andf',
        'assoc',
        'atend',
        'atom',
        'avg',
        'before',
        'best',
        'bestn',
        'caar',
        'cadr',
        'carif',
        'caris',
        'case',
        'caselet',
        'catch',
        'cddr',
        'check',
        'commonest',
        'compare',
        'complement',
        'compose',
        'consif',
        'conswhen',
        'copy',
        'copylist',
        'count',
        'counts',
        'cut',
        'dedup',
        'def',
        'do1',
        'dotted',
        'drain',
        'each',
        'empty',
        'even',
        'fill-table',
        'find',
        'firstn',
        'flat',
        'for',
        'forlen',
        'get',
        'idfn',
        'iflet',
        'in',
        'insert-sorted',
        'insort',
        'insortnew',
        'intersperse',
        'isa',
        'isnt',
        'iso',
        'join',
        'keep',
        'keys',
        'last',
        'len<',
        'len>',
        'let',
        'list',
        'listtab',
        'loop',
        'map',
        'map1',
        'mappend',
        'max',
        'med',
        'median',
        'mem',
        'memtable',
        'merge',
        'mergesort',
        'min',
        'mismatch',
        'most',
        'multiple',
        'n-of',
        'nearest',
        'no',
        'noisy-each',
        'nor',
        'nthcdr',
        'number',
        'obj',
        'odd',
        'on',
        'only',
        'ontable',
        'or',
        'orf',
        'pair',
        'point',
        'pop',
        'pos',
        'positive',
        'pr',
        'prn',
        'pull',
        'push',
        'pushnew',
        'quasiquote',
        'rand-choice',
        'rand-elt',
        'range',
        'reclist',
        'recstring',
        'reduce',
        'reinsert-sorted',
        'rem',
        'repeat',
        'retrieve',
        'rev',
        'rfn',
        'rotate',
        'round',
        'roundup',
        'rreduce',
        'set',
        'single',
        'some',
        'sort',
        'split',
        'sum',
        'summing',
        'swap',
        'tablist',
        'testify',
        'tuples',
        'trues',
        'union',
        'uniq',
        'unless',
        'until',
        'vals',
        'w/table',
        'w/uniq',
        'when',
        'whenlet',
        'while',
        'whiler',
        'whilet',
        'wipe',
        'with',
        'withs',
        'zap',
    ],
    typeKeywords: [
        'apply',
        'bound',
        'car',
        'ccc',
        'cdr',
        'close',
        'coerce',
        'cons',
        'cos',
        'disp',
        'err',
        'expt',
        'eval',
        'flushout',
        'infile',
        'int',
        'is',
        'len',
        'log',
        'macex',
        'maptable',
        'mod',
        'newstring',
        'outfile',
        'pipe-from',
        'quit',
        'rand',
        'read',
        'readline',
        'scar',
        'scdr',
        'sin',
        'sqrt',
        'sread',
        'sref',
        'stderr',
        'stdin',
        'stdout',
        'string',
        'sym',
        'system',
        't',
        'table',
        'tan',
        'trunc',
        'type',
        'write',
        'writeb',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/'[a-zA-Z_][^ ():;\[\].!]*/, 'string'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_][\w<>\-\/]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(;.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
