/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.ici',
    keywords: [
        'struct',
        'float',
        'array',
        'set',
        'class',
        'module',
        'func',        
        'in',
        'onerror',
        'else',
        'auto',
        'break',
        'case',
        'continue',
        'default',
        'do',
        'extern',
        'for',
        'forall',
        'if',
        'return',
        'static',
        'switch',
        'while',
        'try',
        'second',
        'minute',
        'hour',
        'day',
        'month',
        'year',
        'wday',
        'yday',
        'isdst',
        'pattern',
        'options',
        'name',
        'autos',
        'args',
        'this',
        'vargs',
        'core',
        'error',
        'argc',
        'argv',
        'subject',
        'callable',
        'load',
        'waitfor',
        'result',
        'critsect',
        'raw',
        'path',
        'aggr',
        'key',
        'ignore',
        'proto',
        'line',
    ],
    builtins: [
        'popen',
        'abs',
        'acos',
        'active',
        'alloc',
        'argcount',
        'argerror',
        'asin',
        'assign',
        'atan',
        'atan2',
        'basename',
        'build',
        'calendar',
        'call',
        'ceil',
        'chdir',
        'close',
        'cmp',
        'copy',
        'core1',
        'core2',
        'core3',
        'cos',
        'cputime',
        'currentfile',
        'debug',
        'del',
        'dir',
        'dirname',
        'eof',
        'eq',
        'eventloop',
        'exit',
        'exp',
        'explode',
        'fail',
        'failed',
        'fetch',
        'finished',
        'floor',
        'flush',
        'fmod',
        'fopen',
        'getchar',
        'getcwd',
        'getfile',
        'getline',
        'gettoken',
        'gettokens',
        'gsub',
        'implode',
        'include',
        'int',
        'interval',
        'isa',
        'isatom',
        'keys',
        'log',
        'log10',
        'max',
        'mem',
        'min',
        'mopen',
        'nels',
        'new',
        'now',
        'num',
        'parse',
        'parser',
        'parsetoken',
        'parsevalue',
        'pathjoin',
        'pfopen',
        'pi',
        'pop',
        'pow',
        'printf',
        'profile',
        'push',
        'put',
        'rand',
        'reclaim',
        'regexp',
        'regexpi',
        'rejectchar',
        'rejecttoken',
        'remove',
        'rename',
        'respondsto',
        'rpop',
        'rpush',
        'scope',
        'seek',
        'signal',
        'signam',
        'sin',
        'sleep',
        'smash',
        'sopen',
        'sort',
        'sprintf',
        'sqrt',
        'status',
        'strbuf',
        'strcat',
        'string',
        'sub',
        'super',
        'system',
        'tan',
        'tmpname',
        'tochar',
        'toint',
        'tokenobj',
        'top',
        'typecheck',
        'typeof',
        'use',
        'version',
        'vstack',
        'which',
    ],
    typeKeywords: [
        'NULL',
        'stdin',
        'stdout',
        'stderr',
        '_func_',
        '_file_',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
