/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.seq',
    keywords: [
        'and',
        'as',
        'assert',
        'async',
        'await',
        'break',
        'case',
        'cimport',
        'class',
        'continue',
        'def',
        'del',
        'elif',
        'else',
        'except',
        'extend',
        'finally',
        'for',
        'from',
        'global',
        'if',
        'import',
        'in',
        'is',        
        'lambda',
        'match',        
        'nonlocal',
        'not',
        'or',
        'pass',
        'print',
        'pydef',
        'pyimport',
        'raise',
        'return',
        'try',
        'type',
        'while',
        'with',
        'yield',
    ],
    builtins: [
        'algorithms',
        'algorithms.heapsort',
        'algorithms.insertionsort',
        'algorithms.pdqsort',
        'algorithms.qsort',
        'algorithms.strings',
        'algorithms.timsort',
        'bio',
        'bio.align',
        'bio.bam',
        'bio.bed',
        'bio.block',
        'bio.builtin',
        'bio.bwa',
        'bio.bwt',
        'bio.c_htslib',
        'bio.fai',
        'bio.fasta',
        'bio.fastq',
        'bio.fmindex',
        'bio.intervals',
        'bio.iter',
        'bio.kmer',
        'bio.locus',
        'bio.prefetch',
        'bio.pseq',
        'bio.seq',
        'bio.types',
        'bio.vcf',
        'bisect',
        'collections',
        'functools',
        'getopt',
        'gzip',
        'heapq',
        'internal',
        'internal.__init_test__',
        'internal.attributes',
        'internal.box',
        'internal.builtin',
        'internal.c_stubs',
        'internal.dlopen',
        'internal.file',
        'internal.gc',
        'internal.internal',
        'internal.khash',
        'internal.python',
        'internal.sort',
        'internal.str',
        'internal.types',
        'internal.types.array',
        'internal.types.bool',
        'internal.types.byte',
        'internal.types.collections',
        'internal.types.collections.dict',
        'internal.types.collections.list',
        'internal.types.collections.set',
        'internal.types.error',
        'internal.types.float',
        'internal.types.generator',
        'internal.types.int',
        'internal.types.intn',
        'internal.types.optional',
        'internal.types.ptr',
        'internal.types.range',
        'internal.types.slice',
        'internal.types.str',
        'itertools',
        'math',
        'openmp',
        'operator',
        'os',
        'os.path',
        'pickle',
        'python',
        'random',
        'sortedlist',
        'statistics',
        'string',
        'sys',
        'threading',
        'time',
        'self',
        'Ellipsis',
        'NotImplemented',
        'cls',
        '__abs__',
        '__add__',
        '__aenter__',
        '__aexit__',
        '__aiter__',
        '__and__',
        '__anext__',
        '__await__',
        '__bool__',
        '__bytes__',
        '__call__',
        '__complex__',
        '__contains__',
        '__del__',
        '__delattr__',
        '__delete__',
        '__delitem__',
        '__dir__',
        '__divmod__',
        '__enter__',
        '__eq__',
        '__exit__',
        '__float__',
        '__floordiv__',
        '__format__',
        '__ge__',
        '__get__',
        '__getattr__',
        '__getattribute__',
        '__getitem__',
        '__gt__',
        '__hash__',
        '__iadd__',
        '__iand__',
        '__ifloordiv__',
        '__ilshift__',
        '__imatmul__',
        '__imod__',
        '__import__',
        '__imul__',
        '__index__',
        '__init__',
        '__instancecheck__',
        '__int__',
        '__invert__',
        '__ior__',
        '__ipow__',
        '__irshift__',
        '__isub__',
        '__iter__',
        '__itruediv__',
        '__ixor__',
        '__le__',
        '__len__',
        '__length_hint__',
        '__lshift__',
        '__lt__',
        '__matmul__',
        '__missing__',
        '__mod__',
        '__mul__',
        '__ne__',
        '__neg__',
        '__new__',
        '__next__',
        '__or__',
        '__pos__',
        '__pow__',
        '__prepare__',
        '__radd__',
        '__rand__',
        '__rdivmod__',
        '__repr__',
        '__reversed__',
        '__rfloordiv__',
        '__rlshift__',
        '__rmatmul__',
        '__rmod__',
        '__rmul__',
        '__ror__',
        '__round__',
        '__rpow__',
        '__rrshift__',
        '__rshift__',
        '__rsub__',
        '__rtruediv__',
        '__rxor__',
        '__set__',
        '__setattr__',
        '__setitem__',
        '__str__',
        '__sub__',
        '__subclasscheck__',
        '__truediv__',
        '__xor__',
        '__annotations__',
        '__bases__',
        '__class__',
        '__closure__',
        '__code__',
        '__defaults__',
        '__dict__',
        '__doc__',
        '__file__',
        '__func__',
        '__globals__',
        '__kwdefaults__',
        '__module__',
        '__mro__',
        '__name__',
        '__objclass__',
        '__qualname__',
        '__self__',
        '__slots__',
        '__weakref__',
    ],
    typeKeywords: [
        '__import__',
        'abs',
        'all',
        'any',
        'bin',
        'bool',
        'bytearray',
        'bytes',
        'chr',
        'classmethod',
        'cmp',
        'compile',
        'complex',
        'delattr',
        'dict',
        'dir',
        'divmod',
        'enumerate',
        'eval',
        'filter',
        'float',
        'format',
        'frozenset',
        'getattr',
        'globals',
        'hasattr',
        'hash',
        'hex',
        'id',
        'input',
        'int',
        'isinstance',
        'issubclass',
        'iter',
        'len',
        'list',
        'locals',
        'map',
        'max',
        'memoryview',
        'min',
        'object',
        'oct',
        'open',
        'ord',
        'pow',
        'property',
        'range',
        'repr',
        'reversed',
        'round',
        'set',
        'setattr',
        'slice',
        'sorted',
        'staticmethod',
        'str',
        'sum',
        'super',
        'tuple',
        'vars',
        'zip',
        'seq',
        'byte',
        'ptr',
        'array',
        'Kmer',
        'Int',
        'UInt',
        'optional',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_][\w.]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/([uUbB]|[skprR]|[uUbB][rR]|[rR][uUbB])?'/, 'string.escape', '@stringBody'],
            [/([uUbB]|[skprR]|[uUbB][rR]|[rR][uUbB])?"""/, 'string.escape', '@trpStringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/([uUbB]|[skprR]|[uUbB][rR]|[rR][uUbB])?"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        trpStringBody: [
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"""/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
