/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
        blockComment: ["%", ";"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    ignoreCase: true,
    tokenPostfix: '.ndf',
    keywords: [
        'BEGIN',
        'CASE',
        'DO',
        'ELSE',
        'ELSEIF',
        'END',
        'ENDCASE',
        'ENDFOR',
        'ENDIF',
        'ENDREPEAT',
        'ENDWHILE',
        'EXIT',
        'EXPRESSION',
        'EXTERNAL',
        'FOR',
        'FROM',
        'GETS',
        'IF',
        'IS',
        'LOCAL',
        'NONLOCAL',
        'OP',
        'OPERATION',
        'REPEAT',
        'THEN',
        'TR',
        'TRANSFORMER',
        'UNTIL',
        'VARIABLE',
        'WHILE',
        'WITH',
    ],
    builtins: [
        'false',
        'null',
        'pi',
        'true',
        'break',
        'breaklist',
        'bye',
        'callstack',
        'exprs',
        'no_expr',
        'ops',
        'status',
        'time',
        'timestamp',
        'trs',
        'vars',
        'watchlist',
        'latent',
        'abs',
        'ceiling',
        'divide',
        'floor',
        'minus',
        'mod',
        'opposite',
        'plus',
        'power',
        'product',
        'quotient',
        'reciprocal',
        'sum',
        'times',
        'count',
        'grid',
        'random',
        'seed',
        'tell',
        'gt',
        'gte',
        'lt',
        'lte',
        'match',
        'mate',
        'max',
        'min',
        'up',
        'append',
        'cart',
        'catenate',
        'hitch',
        'laminate',
        'link',
        'pair',
        'single',
        'solitary',
        'throw',
        'char',
        'charrep',
        'fault',
        'fromraw',
        'gage',
        'phrase',
        'quiet_fault',
        'string',
        'tolower',
        'tonumber',
        'toraw',
        'toupper',
        'flip',
        'fuse',
        'pack',
        'reverse',
        'rotate',
        'transpose',
        'apply',
        'assign',
        'deepupdate',
        'deparse',
        'descan',
        'eval',
        'execute',
        'getdef',
        'getname',
        'getsyms',
        'parse',
        'scan',
        'update',
        'updateall',
        'value',
        'appendfile',
        'close',
        'getfile',
        'open',
        'putfile',
        'readfile',
        'writefile',
        'deepplace',
        'place',
        'placeall',
        'read',
        'readscreen',
        'write',
        'writechars',
        'writescreen',
        'innerproduct',
        'inverse',
        'solve',
        'and',
        'diverse',
        'equal',
        'not',
        'or',
        'xor',
        'unequal',
        'allbools',
        'allchars',
        'allints',
        'allnumeric',
        'allreals',
        'axes',
        'depth',
        'isboolean',
        'ischar',
        'isfault',
        'isinteger',
        'isphrase',
        'isreal',
        'isstring',
        'numeric',
        'shape',
        'tally',
        'type',
        'valence',
        'blend',
        'cols',
        'content',
        'lower',
        'mix',
        'raise',
        'rows',
        'split',
        'eraserecord',
        'filetally',
        'readarray',
        'readrecord',
        'writearray',
        'writerecord',
        'diagram',
        'display',
        'paste',
        'picture',
        'positions',
        'setformat',
        'sketch',
        'profile',
        'setprofile',
        'list',
        'mold',
        'pass',
        'post',
        'reshape',
        'vacate',
        'void',
        'arccos',
        'arcsin',
        'arctan',
        'cos',
        'cosh',
        'exp',
        'ln',
        'log',
        'sin',
        'sinh',
        'sqrt',
        'tan',
        'tanh',
        'find',
        'findall',
        'in',
        'notin',
        'seek',
        'choose',
        'cull',
        'cut',
        'cutall',
        'drop',
        'dropright',
        'except',
        'first',
        'front',
        'last',
        'pick',
        'reach',
        'rest',
        'second',
        'sublist',
        'take',
        'takeright',
        'third',
        'allin',
        'like',
        'atomic',
        'empty',
        'simple',
        'gradeup',
        'sortup',
        'breakin',
        'edit',
        'erase',
        'host',
        'library',
        'load',
        'loaddefs',
        'no_op',
        'save',
        'see',
        'seeprimcalls',
        'seeusercalls',
        'set',
        'setdeftrace',
        'setinterrupts',
        'setlogname',
        'setprompt',
        'settrigger',
        'setwidth',
        'symbols',
        'watch',
        'filelength',
        'readfield',
        'writefield',

        // transformers
        'bykey',
        'converse',
        'fold',
        'inner',
        'outer',
        'team',
        'bycols',
        'byrows',
        'partition',
        'rank',
        'reducecols',
        'reducerows',
        'catch',
        'fork',
        'iterate',
        'each',
        'eachall',
        'eachboth',
        'eachleft',
        'eachright',
        'leaf',
        'twig',
        'across',
        'down',
        'recur',
        'accumulate',
        'reduce',
        'filter',
        'grade',
        'sort'
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\"[a-zA-Z_]\w*/, 'metatag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
            [/%/, 'comment', '@comment'],
        ],
        comment: [
            [/[^%]+/, 'comment'],
            [/;/, 'comment', '@pop'],
            [/[%]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
    }
};
