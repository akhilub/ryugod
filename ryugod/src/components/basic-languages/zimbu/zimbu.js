/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.zu',
    keywords: [
        'IF',
        'ELSE',
        'ELSEIF',
        'WHILE',
        'REPEAT',
        'FOR',
        'IN',
        'TO',
        'STEP',
        'DO',
        'UNTIL',
        'SWITCH',
        'WITH',
        'TRY',
        'CATCH',
        'FINALLY',
        'GENERATE_IF',
        'GENERATE_ELSE',
        'GENERATE_ELSEIF',
        'CASE',
        'DEFAULT',
        'FINAL',
        'ABSTRACT',
        'VIRTUAL',
        'DEFINE',
        'REPLACE',
        'IMPLEMENTS',
        'EXTENDS',
        'PARENT',
        'LOCAL',
        'PART',
        'ALIAS',
        'CONNECT',
        'WRAP',
        'BREAK',
        'CONTINUE',
        'PROCEED',
        'RETURN',
        'EXIT',
        'THROW',
        'IMPORT',
        'AS',
        'OPTIONS',
        'MAIN',
        'INTERFACE',
        'MODULE',
        'ENUM',
        'BITS',
        'SHARED',
        'FUNC',
        'PROC',
        'DEF',
        'CLASS',
        'NEW',
    ],
    builtins: [
        'write',
        'writeByte',
        'size',
        'toBytes',
        'remove',
        'writeChar',
        'writeLine',
        'readByte',
        'readChar',
        'readAll',
        'readAllBytes',
        'readLine',
        'readLineRaw',
        'readAllLines',
        'readAllLinesRaw',
        'flush',
        'close',
        
    ],
    typeKeywords: [
        'bool',
        'status',
        'int1',
        'int2',
        'int3',
        'int4',
        'int5',
        'int6',
        'int7',
        'int9',
        'int10',
        'int11',
        'int12',
        'int13',
        'int14',
        'int15',
        'int',
        'int8',
        'int16',
        'int32',
        'int64',
        'bigInt',
        'nat',
        'nat8',
        'byte',
        'nat16',
        'nat32',
        'nat64',
        'bigNat',
        'nat1',
        'nat2',
        'nat3',
        'nat4',
        'nat5',
        'nat6',
        'nat7',
        'nat9',
        'nat10',
        'nat11',
        'nat12',
        'nat13',
        'nat14',
        'nat15',
        'float',
        'float32',
        'float64',
        'float80',
        'float128',
        'fixed1',
        'fixed2',
        'fixed3',
        'fixed4',
        'fixed5',
        'fixed6',
        'fixed7',
        'fixed8',
        'fixed9',
        'fixed10',
        'fixed11',
        'fixed12',
        'fixed13',
        'fixed14',
        'fixed15',
        'string',
        'stringval',
        'cstring',
        'varstring',
        'bytes',
        'varbytes',
        'tuple',
        'array',
        'list',
        'dict',
        'multiDict',
        'set',
        'multiSet',
        'complex',
        'complex32',
        'complex64',
        'complex80',
        'complex128',
        'proc',
        'func',
        'def',
        'thread',
        'evalThread',
        'lock',
        'cond',
        'pipe',
        'VAR',
        'ANY',
        'USE',
        'GET',
        'IO.File',
        'IO.Stat',
        'NIL',
        'eof',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[@$][a-zA-Z_]\w*/, 'metatag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
