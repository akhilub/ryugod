/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.leek',
    keywords: [
        'and',
        'break',
        'class',
        'continue',
        'do',
        'else',
        'end',
        'for',
        'function',
        'global',
        'if',
        'in',
        'is',
        'let',
        'match',
        'new',
        'not',
        'or',
        'parent',
        'return',
        'then',
        'throw',
        'var',
        'while',
        'xor',
    ],
    builtins: [
        '_mpz_cmp_si',
        'abs',
        'absolute',
        'acos',
        'add_capture',
        'add_field',
        'apply',
        'arrayFlatten',
        'arrayMap',
        'arraySort',
        'asin',
        'assocSort',
        'at_i_i',
        'at',
        'atan',
        'atan2',
        'atl',
        'atL',
        'attr',
        'attrL',
        'average',
        'call',
        'cbrt',
        'ceil',
        'char',
        'charAt',
        'chunk',
        'clear_fun',
        'clear',
        'clone',
        'code',
        'codePointAt',
        'compare',
        'construct',
        'contains',
        'convert_key',
        'copy',
        'cos',
        'count',
        'debug',
        'debugC',
        'debugE',
        'debugW',
        'dec_refs',
        'dec',
        'decl',
        'decode',
        'delete_exception',
        'delete_previous',
        'delete_ref',
        'delete_tmp',
        'delete',
        'encode',
        'end',
        'endsWith',
        'erase_fun',
        'erase',
        'exception_fill',
        'exp',
        'export_ctx_var',
        'fill_fun',
        'fill',
        'filter',
        'first',
        'floor',
        'fold',
        'foldLeft',
        'foldRight',
        'frequencies',
        'gcd',
        'get_capture_l',
        'get_capture',
        'get_class',
        'get_int',
        'getInstructionsCount',
        'getOperations',
        'hypot',
        'in_fun',
        'in_i',
        'in',
        'inArray',
        'inc',
        'incl',
        'include',
        'indexOf',
        'insert_fun',
        'insert',
        'int_to_any',
        'int_to_long',
        'int_to_real',
        'int_to_string',
        'int',
        'internal_plus_mpz_tmp',
        'internal_print',
        'is_null',
        'isEmpty',
        'isInteger',
        'isize',
        'isPalindrome',
        'isPermutation',
        'isPrime',
        'iter',
        'iterator_begin',
        'iterator_dec',
        'iterator_end',
        'iterator_get',
        'iterator_inc',
        'iterator_key',
        'iterator_next',
        'iterator_rget',
        'iterator_rkey',
        'join',
        'json',
        'jsonDecode',
        'jsonEncode',
        'keys',
        'last',
        'layer',
        'left',
        'length',
        'lines',
        'log',
        'log10',
        'long_to_string',
        'long',
        'look_fun',
        'look',
        'ls_insert_fun',
        'm_abs',
        'm_acos',
        'm_asin',
        'm_atan',
        'm_atan2',
        'm_ceil',
        'm_cos',
        'm_exp',
        'm_floor',
        'm_isint',
        'm_log',
        'm_log10',
        'm_max',
        'm_min',
        'm_round',
        'm_sin',
        'm_tan',
        'map',
        'map2',
        'max_fun',
        'max_key_fun',
        'max',
        'maxKey',
        'min_fun',
        'min_key_fun',
        'min',
        'minKey',
        'minus',
        'move_inc',
        'move',
        'mpz_add_ui',
        'mpz_add',
        'mpz_clear',
        'mpz_cmp',
        'mpz_get_si',
        'mpz_get_ui',
        'mpz_init_set',
        'mpz_init_str',
        'mpz_init',
        'mpz_log',
        'mpz_mod',
        'mpz_mul_si',
        'mpz_mul',
        'mpz_neg',
        'mpz_pow_ui',
        'mpz_probab_prime_p',
        'mpz_ptr_clear',
        'mpz_ptr_to_string',
        'mpz_sqrt',
        'mpz_sub_ui',
        'mpz_sub',
        'mpz_to_string',
        'new_exception',
        'nextPermutation',
        'not',
        'number',
        'partition',
        'pop',
        'pow',
        'powdd',
        'powii',
        'powli',
        'pre_dec',
        'pre_decl',
        'pre_inc',
        'pre_incl',
        'pre_tilde',
        'print',
        'product',
        'ptr',
        'push_all_fun',
        'push',
        'pushAll',
        'rand',
        'randFloat',
        'randInt',
        'random',
        'range',
        'real_delete',
        'real_to_any',
        'real_to_string',
        'real',
        'remove_element_fun',
        'remove',
        'removeElement',
        'removeKey',
        'repeat_fun',
        'replace',
        'reverse_fun',
        'reverse',
        'right',
        'round',
        'search',
        'shuffle',
        'signum',
        'sin',
        'size',
        'sort_fun',
        'sort',
        'split',
        'sqrt',
        'startsWith',
        'string',
        'subArray',
        'substring',
        'sum',
        'tan',
        'to_bool',
        'to_string',
        'toArray',
        'toDegrees',
        'toLower',
        'toRadians',
        'toUpper',
        'type',
        'typeID',
        'unique',
        'values_fun',
        'values',
        'vinsert',
        'vpush',
        'wordCount',
    ],
    typeKeywords: [
        'π',
        'true',
        'null',
        'false',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[πa-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
