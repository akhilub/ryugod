/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.algae',
    keywords: [
        'null',
        'if',
        'else',
        'elseif',
        'while',
        'break',
        'continue',
        'function',
        'for',
        'in',
        'return',
        'local',
        'self',
        'try',
        'catch',
        'veil',
    ],
    builtins: [
        'abs',
        'acos',
        'acosh',
        'arg',
        'asin',
        'asinh',
        'atan',
        'atanh',
        'atan2',
        'ceil',
        'conj',
        'cos',
        'cosh',
        'erf',
        'erfc',
        'exp',
        'floor',
        'gcd',
        'imag',
        'ingeger',
        'lcm',
        'log',
        'log10',
        'primef',
        'primes',
        'real',
        'round',
        'sin',
        'sinh',
        'sqrt',
        'tan',
        'tanh',
        'band',
        'bdiag',
        'btrans',
        'circshift',
        'combine',
        'cram',
        'dense',
        'diag',
        'dice',
        'diff',
        'exsparse',
        'fill',
        'find',
        'first',
        'form',
        'full',
        'gpskca',
        'grep',
        'hermitian',
        'ident',
        'imax',
        'imin',
        'isort',
        'label',
        'last',
        'linspace',
        'logspace',
        'lose',
        'magic',
        'matrix',
        'max',
        'merge',
        'min',
        'mksparse',
        'norm',
        'pick',
        'product',
        'rand',
        'randn',
        'reverse',
        'scalar',
        'select',
        'seq',
        'shape',
        'sign',
        'sort',
        'sparse',
        'srand',
        'sum',
        'surprise',
        'symmetric',
        'tril',
        'triu',
        'unlabel',
        'vector',
        'zero',
        'complement',
        'intersection',
        'set',
        'union',
        'backsub',
        'chol',
        'eig',
        'equilibrate',
        'factor',
        'ffit',
        'filter',
        'ifft',
        'inv',
        'iram',
        'leastsq',
        'mult',
        'solve',
        'ssi',
        'svd',
        'transform',
        'brent',
        'monte',
        'ode4',
        'roots',
        'spline',
        'trapz',
        'close',
        'digits',
        'fread',
        'fprintf',
        'fwrite',
        'message',
        'print',
        'printf',
        'read',
        'readnum',
        'sprintf',
        'tmp_file',
        'get',
        'getdyn',
        'getmat',
        'load',
        'put',
        'putdyn',
        'putmat',
        'save',
        'autosrc',
        'builtin',
        'cd',
        'eval',
        'exception',
        'exec',
        'exit',
        'file',
        'get_path',
        'getenv',
        'provide',
        'require',
        'search_path',
        'source',
        'src',
        'strip',
        'system',
        'npsol',
        'plot',
        'replot',
        'splot',
        'umin',
        'unplot',
        'all',
        'atof',
        'char',
        'class',
        'equal',
        'members',
        'info',
        'prof',
        'show',
        'split',
        'string',
        'substr',
        'test',
        'time',
        'tolower',
        'toupper',
        'what',
        'who',
    ],
    typeKeywords: [
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\$[a-zA-Z_]\w*/, 'metatag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
