/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.shtk',
    keywords: [
        'use',
        'generic',
        'as',
        'from',
        'if',
        'else',
        'while',
        'do',
        'for',
        'loop',
        'break',
        'continue',
        'return',
        'mut',
        'and',
        'or',
        'not',
        'void',
        'sizeof',
        'make',
        'addr',
        'in',
    ],
    builtins: [
        'print',
        'println',
        'write',
        'values',
        'upper',
        'triple',
        'toCharArrayOffset',
        'toCharArray',
        'time',
        'tell',
        'tan',
        'system',
        'swapRemove',
        'swap',
        'subString',
        'strip',
        'stringFromPreAllocated',
        'string',
        'startsWith',
        'sqrt',
        'split',
        'sortInPlace',
        'sort',
        'some',
        'sleep',
        'sin',
        'setItem',
        'setChar',
        'seek',
        'search',
        'rmdir',
        'rm',
        'reverseInPlace',
        'reverse',
        'replace',
        'remove',
        'realloc',
        'readStringFromFile',
        'readLine',
        'read',
        'randomLong',
        'randomInt',
        'random',
        'radians',
        'quad',
        'pow',
        'popen',
        'pop',
        'pointer',
        'pclose',
        'parseLong',
        'parseInt',
        'parseFloat',
        'parseDouble',
        'panic',
        'pair',
        'open',
        'ok',
        'nullptrArray',
        'nullptr',
        'none',
        'nil',
        'mkdir',
        'min',
        'memcpyOffset',
        'memcpy',
        'max',
        'malloc',
        'lower',
        'log',
        'list',
        'length',
        'last',
        'keys',
        'keyExists',
        'items',
        'isZero',
        'isUpper',
        'isSpace',
        'isNumber',
        'isNone',
        'isNil',
        'isLower',
        'isInteger',
        'isFail',
        'isError',
        'isEqual',
        'isEmpty',
        'isDigit',
        'isAlphaNumeric',
        'insert',
        'input',
        'hasValue',
        'getList',
        'getEnv',
        'getcwd',
        'getArg',
        'get',
        'fromPreAllocated',
        'free',
        'floorLong',
        'floorInt',
        'floor',
        'find',
        'failFrom',
        'fail',
        'expect',
        'expand',
        'exp',
        'error',
        'endsWith',
        'emptyList',
        'emptyDict',
        'dict',
        'degrees',
        'createCounter',
        'count',
        'cos',
        'close',
        'clone',
        'clear',
        'chdir',
        'ceilLong',
        'ceilInt',
        'ceil',
        'capacity',
        'binarySearch',
        'atan',
        'asin',
        'appendArray',
        'append',
        'allocateHeap',
        'addOffset',
        'acos',
        'absLong',
        'absInt',
        'abs',
        '_validateIndex',
        '_startsWithOffset',
        '_quickSortPartition',
        '_quickSort',
        '_intToError',
        '_incrementLength',
        '_getIndex',
        '_free',
        '__toCharArray__',
        '__subscriptSubString__',
        '__subscriptRange__',
        '__subscriptKeyList__',
        '__subscriptKeyArray__',
        '__subscriptItem__',
        '__questionMarkUnwrap__',
        '__questionMarkError__',
        '__questionMarkContinue__',
        '__questionMarkConstruct__',
        '__lessThanOrEqual__',
        '__lessThan__',
        '__isNotEqual__',
        '__isNonZero__',
        '__isEqual__',
        '__inString__',
        '__inCharArray__',
        '__inChar__',
        '__in__',
        '__greaterThanOrEqual__',
        '__greaterThan__',
        '__deconstructor__',
        '__coerceCharArray__',
        '__bitwiseOrResult__',
        '__bitwiseOrOptional__',
        '__bitwiseOrItem__',
        '__beforeCopy__',
        '__addArray__',
        '__add__',
    ],
    typeKeywords: [
        'fn',
        'extfn',
        'externC',
        'struct',
        'class',
        'enum',
        'def',
        'var',
        'const',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
