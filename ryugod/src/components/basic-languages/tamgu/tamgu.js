/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/@", "@/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '@"', close: '"@', notIn: ['string'] },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '@"', close: '"@' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.tmg',
    keywords: [
        'absent',
        'all',
        'and',
        'any',
        'append',
        'assert',
        'asserta',
        'assertz',
        'autorun',
        'block',
        'break',
        'case',
        'catch',
        'common',
        'concept',
        'role',
        'const',
        'continue',
        'cycle',
        'data',
        'default',
        'defun',
        'deriving',
        'do',
        'drop',
        'dropWhile',
        'elif',
        'else',
        'empty',
        'exclusive',
        'exit',
        'extension',
        'fail',
        'false',
        'fibre',
        'filter',
        'flip',
        'foldl',
        'foldr',
        'for',
        'frame',
        'from',
        'function',
        'get',
        'if',
        'ifnot',
        'If',
        'IF',
        'in',
        'is',
        'iterator',
        'joined',
        'label',
        'lambda',
        'cons',
        'cond',
        'eq',
        'let',
        'length',
        'map',
        'Maybe',
        'Nothing',
        'not',
        'notin',
        'null',
        'of',
        'ontology',
        'or',
        'otherwise',
        'polynomial',
        'ponder',
        'private',
        'property',
        'protected',
        'remove',
        'repeat',
        'replicate',
        'retract',
        'return',
        'scanl',
        'scanr',
        'setq',
        'static',
        'stop',
        'store',
        'strict',
        'switch',
        'table',
        'take',
        'takeWhile',
        'this',
        'thread',
        'true',
        'try',
        'where',
        'while',
        'with',
        'xor',
        'zip',
        'zipWith',
    ],
    builtins: [
        '_breakpoint',
        '_erroronkey',
        '_eval',
        '_evalfunction',
        '_exit',
        '_forcelocks',
        '_getdefaulttokenizerules',
        '_info',
        '_lispmode',
        '_mirrordisplay',
        '_nbthreads',
        '_poolstats',
        '_setenv',
        '_setmaxrange',
        '_setmaxthreads',
        '_setstacksize',
        '_setvalidfeatures',
        '_symbols',
        '_threadhandle',
        '_threadid',
        '_variables',
        'a_random',
        'abs',
        'acos',
        'acosh',
        'allobjects',
        'allobjectsbytype',
        'asin',
        'asinh',
        'atan',
        'atanh',
        'base',
        'bernoulli_distribution',
        'binomial_distribution',
        'cast',
        'catch',
        'cauchy_distribution',
        'cbrt',
        'chi_squared_distribution',
        'cos',
        'cosh',
        'discrete_distribution',
        'emojis',
        'erf',
        'erfc',
        'evaljson',
        'exp',
        'exp2',
        'expm1',
        'exponential_distribution',
        'extreme_value_distribution',
        'fisher_distribution',
        'floor',
        'gamma_distribution',
        'geometric_distribution',
        'GPSdistance',
        'grammar_macros',
        'kget',
        'lgamma',
        'ln',
        'loadin',
        'lock',
        'log',
        'log1p',
        'log2',
        'logb',
        'lognormal_distribution',
        'max',
        'min',
        'nearbyint',
        'negative_binomial_distribution',
        'nope',
        'normal_distribution',
        'not',
        'ord',
        'pause',
        'piecewise_constant_distribution',
        'piecewise_linear_distribution',
        'poisson_distribution',
        'print',
        'printerr',
        'printj',
        'printjerr',
        'printjln',
        'printjlnerr',
        'println',
        'printlnerr',
        'product',
        'raise',
        'random',
        'random_choice',
        'range',
        'redirectoutput',
        'restateoutput',
        'rint',
        'round',
        'sin',
        'sinh',
        'sleep',
        'sqrt',
        'student_distribution',
        'sum',
        'tan',
        'tanh',
        'tgamma',
        'trunc',
        'uniform_int',
        'uniform_real',
        'unlock',
        'use',
        'version',
        'wait',
        'waitonfalse',
        'waitonjoined',
        'weibull_distribution',
        'a_first',
        'a_change',
        'a_delete',
        'a_insert',
        'a_switch',
        'a_nocase',
        'a_offsets',
        'a_features',
        'a_surface',
        'a_repetition',
        'a_vowel',
        'a_longest',
        'e_latin_we',
        'e_latin_ce',
        'e_latin_se',
        'e_latin_ne',
        'e_cyrillic',
        'e_arabic',
        'e_greek',
        'e_hebrew',
        'e_turkish',
        'e_nordic',
        'e_thai',
        'e_baltic',
        'e_celtic',
        'e_latin_ffe',
        'e_latin_see',
        'e_windows',
        'e_cp1252',
    ],
    typeKeywords: [
        'self',
        'string',
        'int',
        'decimal',
        'float',
        'long',
        'bit',
        'short',
        'fraction',
        'bool',
        'date',
        'time',
        'call',
        'vector',
        'map',
        'imatrix',
        'fmatrix',
        'file',
        'iterator',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            [/(\.\.|[\+\-*\/><=\|&])/, 'invalid'],
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[?@#~][a-zA-Z_]\w*/, 'metatag'],
            [
                /[∏∑√∛a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/@/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/@]+/, 'comment'],
            [/@\//, 'comment', '@pop'],
            [/[\/@]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/@"/, 'string.escape', '@anoStringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        anoStringBody: [
            [/[^@\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"@/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
