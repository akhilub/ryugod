/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.citrine',
    keywords: [
        'absolute',
        'add:',
        'and:',
        'append',
        'append:',
        'apply:',
        'argument:',
        'arguments',
        'arguments:',
        'ask',
        'at:',
        'between:',
        'block',
        'Boolean',
        'boolean',
        'break',
        'by:',
        'byte',
        'byte:',
        'byte:',
        'bytes',
        'bytes:',
        'case:',
        'catch:',
        'ceil',
        'character:',
        'characters',
        'clean',
        'close',
        'code',
        'Code',
        'compare:',
        'contains:',
        'continue',
        'copy',
        'count',
        'day',
        'day:',
        'days',
        'delete',
        'divide',
        'do',
        'do:',
        'done',
        'each:',
        'either:',
        'else:',
        'end',
        'entries',
        'equals:',
        'error:',
        'even?',
        'exists',
        'False',
        'false:',
        'File',
        'fill:',
        'find:',
        'first',
        'floor',
        'flush',
        'format:',
        'from:',
        'has:',
        'hash:',
        'hour',
        'hour:',
        'hours',
        'include',
        'input',
        'join:',
        'last',
        'last',
        'last:',
        'learn:',
        'length',
        'length:',
        'like:',
        'list',
        'List',
        'list:',
        'lock',
        'lowercase',
        'Map',
        'map:',
        'matches:',
        'maximum',
        'means:',
        'memory',
        'memory:',
        'message:',
        'message:',
        'minimum',
        'minute',
        'minute:',
        'minutes',
        'modulo:',
        'Moment',
        'month',
        'month:',
        'months',
        'multiply',
        'myself',
        'negative?',
        'new',
        'new:',
        'Nil',
        'Nil?',
        'nor:',
        'not',
        'number',
        'Number',
        'Object',
        'odd?',
        'of',
        'offset:',
        'on:',
        'open:',
        'options:',
        'or:',
        'path',
        'pattern:',
        'pop',
        'position:',
        'positive?',
        'power:',
        'prepend:',
        'process:',
        'Program',
        'put:',
        'put:',
        'qualification',
        'qualify:',
        'read',
        'remove',
        'replace:',
        'respond:',
        'rewind',
        'root',
        'round',
        'run',
        'second',
        'second:',
        'seconds',
        'seek:',
        'set:',
        'setting:',
        'shell:',
        'shift',
        'size',
        'sort:',
        'spaces',
        'split:',
        'square',
        'stop',
        'string',
        'subtract:',
        'surrounding',
        'the',
        'this',
        'tidiness:',
        'time',
        'True',
        'true:',
        'type',
        'unlock',
        'uppercase',
        'value:',
        'values',
        'wait:',
        'week',
        'week:',
        'weekday',
        'weeks',
        'while:',
        'with:',
        'write',
        'write:',
        'year',
        'year:',
        'years',
        'zone',
        'zone:',
    ],
    builtins: [

    ],
    typeKeywords: [],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[-?*/•←+<=≠>≤≥☞⚿⛏✎]/, 'metatag'],
            [
                /[a-zA-Z_]\w*[:?]?/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/’$/, 'string.escape', '@popall'],
            [/‘/, 'string.escape', '@stringBody'],
            [/’$/, 'string.escape', '@popall'],
            [/“/, 'string.escape', '@dblStringBody'],
        ],
        stringBody: [
            [/[^\\’]+$/, 'string', '@popall'],
            [/[^\\’]+/, 'string'],
            [/\\./, 'string'],
            [/’/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\”]+$/, 'string', '@popall'],
            [/[^\\”]+/, 'string'],
            [/\\./, 'string'],
            [/”/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
    }
};
