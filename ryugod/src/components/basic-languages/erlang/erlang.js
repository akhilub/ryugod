/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: ['#', '%'],
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.erl',
    keywords: [
        'after',
        'begin',
        'case',
        'catch',
        'cond',
        'end',
        'fun',
        'if',
        'let',
        'of',
        'receive',
        'when',
        'try',
    ],
    builtins: [
        'abs',
        'alive',
        'apply',
        'atom_to_binary',
        'atom_to_list',
        'contained',
        'binary_part',
        'binary_to_atom',
        'contained',
        'binary_to_existing_atom',
        'binary_to_float',
        'contained',
        'binary_to_integer',
        'bitstring_to_list',
        'contained',
        'binary_to_list',
        'binary_to_term',
        'bit_size',
        'contained',
        'byte_size',
        'check_old_code',
        'check_process_code',
        'contained',
        'concat_binary',
        'date',
        'delete_module',
        'demonitor',
        'contained',
        'disconnect_node',
        'element',
        'erase',
        'error',
        'exit',
        'contained',
        'float',
        'float_to_binary',
        'float_to_list',
        'contained',
        'garbage_collect',
        'get',
        'get_keys',
        'group_leader',
        'contained',
        'halt',
        'hd',
        'integer_to_binary',
        'integer_to_list',
        'contained',
        'iolist_to_binary',
        'iolist_size',
        'is_alive',
        'contained',
        'is_atom',
        'is_binary',
        'is_bitstring',
        'is_boolean',
        'contained',
        'is_float',
        'is_function',
        'is_integer',
        'is_list',
        'is_map',
        'is_map_key',
        'contained',
        'is_number',
        'is_pid',
        'is_port',
        'is_process_alive',
        'contained',
        'is_record',
        'is_reference',
        'is_tuple',
        'length',
        'link',
        'contained',
        'list_to_atom',
        'list_to_binary',
        'contained',
        'list_to_bitstring',
        'list_to_existing_atom',
        'contained',
        'list_to_float',
        'list_to_integer',
        'list_to_pid',
        'contained',
        'list_to_tuple',
        'load_module',
        'make_ref',
        'map_size',
        'max',
        'contained',
        'min',
        'module_loaded',
        'monitor',
        'monitor_node',
        'node',
        'contained',
        'nodes',
        'now',
        'open_port',
        'pid_to_list',
        'port_close',
        'contained',
        'port_command',
        'port_connect',
        'pre_loaded',
        'contained',
        'process_flag',
        'process_flag',
        'process_info',
        'contained',
        'process',
        'purge_module',
        'put',
        'register',
        'registered',
        'contained',
        'round',
        'self',
        'setelement',
        'size',
        'spawn',
        'spawn_link',
        'contained',
        'spawn_monitor',
        'spawn_opt',
        'split_binary',
        'contained',
        'statistics',
        'term_to_binary',
        'throw',
        'time',
        'tl',
        'contained',
        'trunc',
        'tuple_size',
        'tuple_to_list',
        'unlink',
        'contained',
        'unregister',
        'whereis',
        'contained',
    ],
    typeKeywords: [
        'integer',
        'float',
        'binary',
        'bytes',
        'bitstring',
        'bits',
        'binary',
        'utf8',
        'utf16',
        'utf32',
        'signed',
        'unsigned',
        'big',
        'little',
        'native',
        'unit',
    ],
    metatags: [
        'behaviour',
        'compile',
        'export',
        'file',
        'import',
        'module',
        'author',
        'copyright',
        'doc',
        'vsn',
        'on_load',
        'optional_callbacks',
        'include',
        'include_lib',
        'record',
        'define',
        'undef',
        'ifdef',
        'ifndef',
        'else',
        'endif',
        'spec',
        'type',
        'opaque',
        'callback',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@metatags': 'metatag',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(%.*$)/, 'comment'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
