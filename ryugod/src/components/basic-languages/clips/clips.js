/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ';',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.clp',
    keywords: [
        'abs',
        'acos',
        'acosh',
        'acot',
        'acoth',
        'acsc',
        'acsch',
        'active-duplicate-instance',
        'active-initialize-instance',
        'active-make-instance',
        'active-message-duplicate-instance',
        'active-message-modify-instance',
        'active-modify-instance',
        'agenda',
        'and',
        'any-instancep',
        'apropos',
        'asec',
        'asech',
        'asin',
        'asinh',
        'assert',
        'assert-string',
        'atan',
        'atanh',
        'batch',
        'batch*',
        'bind',
        'bload',
        'bload-facts',
        'bload-instances',
        'break',
        'browse-classes',
        'bsave',
        'bsave-facts',
        'bsave-instances',
        'build',
        'call-next-handler',
        'call-next-method',
        'call-specific-method',
        'chdir',
        'class',
        'class-abstractp',
        'class-existp',
        'class-reactivep',
        'class-slots',
        'class-subclasses',
        'class-superclasses',
        'clear',
        'clear-error',
        'clear-focus-stack',
        'close',
        'conserve-mem',
        'constructs-to-c',
        'cos',
        'cosh',
        'cot',
        'coth',
        'create$',
        'csc',
        'csch',
        'defclass-module',
        'deffacts-module',
        'deffunction-module',
        'defgeneric-module',
        'defglobal-module',
        'definstances-module',
        'defrule-module',
        'deftemplate-module',
        'deg-grad',
        'deg-rad',
        'delayed-do-for-all-instances',
        'delete$',
        'delete-instance',
        'dependencies',
        'dependents',
        'describe-class',
        'div',
        'do-for-all-instances',
        'do-for-instance',
        'dribble-off',
        'dribble-on',
        'duplicate',
        'duplicate-instance',
        'duplicate-instance',
        'dynamic-get',
        'dynamic-put',
        'edit',
        'eq',
        'eval',
        'evenp',
        'exit',
        'exp',
        'expand$',
        'explode$',
        'fact-existp',
        'fact-index',
        'fact-relation',
        'fact-slot-names',
        'fact-slot-value',
        'facts',
        'fetch',
        'find-all-instances',
        'find-instance',
        'first$',
        'float',
        'floatp',
        'flush',
        'focus',
        'foreach',
        'format',
        'gensym',
        'gensym*',
        'get',
        'get-current-module',
        'get-defclass-list',
        'get-deffacts-list',
        'get-deffunction-list',
        'get-defgeneric-list',
        'get-defglobal-list',
        'get-definstances-list',
        'get-defmessage-handler-list',
        'get-defmethod-list',
        'get-defmodule-list',
        'get-defrule-list',
        'get-deftemplate-list',
        'get-dynamic-constraint-checking',
        'get-error',
        'get-fact-duplication',
        'get-fact-list',
        'get-focus',
        'get-focus-stack',
        'get-function-restrictions',
        'get-method-restrictions',
        'get-reset-globals',
        'get-salience-evaluation',
        'get-sequence-operator-recognition',
        'get-strategy',
        'gm-time',
        'grad-deg',
        'halt',
        'if',
        'implode$',
        'init-slots',
        'initialize-instance',
        'initialize-instance',
        'insert$',
        'instance-address',
        'instance-addressp',
        'instance-existp',
        'instance-name',
        'instance-name-to-symbol',
        'instance-namep',
        'instancep',
        'instances',
        'integer',
        'integerp',
        'length$',
        'lexemep',
        'list-defclasses',
        'list-deffacts',
        'list-deffunctions',
        'list-defgenerics',
        'list-defglobals',
        'list-definstances',
        'list-defmessage-handlers',
        'list-defmethods',
        'list-defmodules',
        'list-defrules',
        'list-deftemplates',
        'list-focus-stack',
        'list-watch-items',
        'load',
        'load*',
        'load-facts',
        'load-instances',
        'local-time',
        'log',
        'log10',
        'loop-for-count',
        'lowcase',
        'make-instance',
        'make-instance',
        'matches',
        'max',
        'mem-requests',
        'mem-used',
        'member$',
        'message-duplicate-instance',
        'message-duplicate-instance',
        'message-handler-existp',
        'message-modify-instance',
        'message-modify-instance',
        'min',
        'mod',
        'modify',
        'modify-instance',
        'modify-instance',
        'multifieldp',
        'neq',
        'next-handlerp',
        'next-methodp',
        'not',
        'nth$',
        'numberp',
        'object-pattern-match-delay',
        'oddp',
        'open',
        'operating-system',
        'options',
        'or',
        'override-next-handler',
        'override-next-method',
        'pi',
        'pointerp',
        'pop-focus',
        'ppdefclass',
        'ppdeffacts',
        'ppdeffunction',
        'ppdefgeneric',
        'ppdefglobal',
        'ppdefinstances',
        'ppdefmessage-handler',
        'ppdefmethod',
        'ppdefmodule',
        'ppdefrule',
        'ppdeftemplate',
        'ppinstance',
        'preview-generic',
        'preview-send',
        'primitives-info',
        'print',
        'println',
        'print-region',
        'printout',
        'progn',
        'progn$',
        'put',
        'rad-deg',
        'random',
        'read',
        'readline',
        'refresh',
        'refresh-agenda',
        'release-mem',
        'remove',
        'remove-break',
        'rename',
        'replace$',
        'reset',
        'rest$',
        'restore-instances',
        'retract',
        'return',
        'rewind',
        'round',
        'rule-complexity',
        'rules',
        'run',
        'save',
        'save-facts',
        'save-instances',
        'sec',
        'sech',
        'seed',
        'seek',
        'send',
        'set-break',
        'set-current-module',
        'set-dynamic-constraint-checking',
        'set-error',
        'set-fact-duplication',
        'set-reset-globals',
        'set-salience-evaluation',
        'set-sequence-operator-recognition',
        'set-strategy',
        'setgen',
        'show-breaks',
        'show-defglobals',
        'show-fht',
        'show-fpn',
        'show-joins',
        'show-opn',
        'sin',
        'sinh',
        'slot-allowed-values',
        'slot-cardinality',
        'slot-delete$',
        'slot-direct-accessp',
        'slot-direct-delete$',
        'slot-direct-insert$',
        'slot-direct-replace$',
        'slot-existp',
        'slot-facets',
        'slot-initablep',
        'slot-insert$',
        'slot-publicp',
        'slot-range',
        'slot-replace$',
        'slot-sources',
        'slot-types',
        'slot-writablep',
        'sqrt',
        'str-assert',
        'str-cat',
        'str-compare',
        'str-index',
        'str-length',
        'stringp',
        'sub-string',
        'subclassp',
        'subseq$',
        'subsetp',
        'superclassp',
        'switch',
        'sym-cat',
        'symbol-to-instance-name',
        'symbolp',
        'system',
        'tan',
        'tanh',
        'tell',
        'time',
        'toss',
        'type',
        'type',
        'undefclass',
        'undeffacts',
        'undeffunction',
        'undefgeneric',
        'undefglobal',
        'undefinstances',
        'undefmessage-handler',
        'undefmethod',
        'undefrule',
        'undeftemplate',
        'unget-char',
        'unmake-instance',
        'unwatch',
        'upcase',
        'void',
        'watch',
        'while',
        'defmodule',
        'defrule',
        'deffacts',
        'deftemplate',
        'defglobal',
        'deffunction',
        'defclass',
        'definstances',
        'defmessage-handler',
        'defgeneric',
        'slot',
        'default',
        'allowed-symbols',
        'allowed-strings',
        'allowed-symbols',
        'allowed-lexemes',
        'allowed-integers',
        'allowed-floats',
        'allowed-numbers',
        'allowed-instance-names',
        'allowed-classes',
        'allowed-values',
        'allowed-values',
        'range',
    ],
    builtins: [
        'TRUE',
        'FALSE'
    ],
    typeKeywords: [
        'crlf',
        'tab',
        'vtab',
        'ff',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\?[a-zA-Z_][\w\-]*[$*]*/, 'metatag'],
            [
                /[a-zA-Z_][\w\-]*[$*]?/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(;.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
