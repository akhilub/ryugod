/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//'],
        blockComment: ["\[", "\]"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        //{ open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        //{ open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.ddp',
    keywords: [
        'ist',
        'der',
        'die',
        'Die',
        'von',
        'als',
        'wenn',
        'Wenn',
        'dann',
        'aber',
        'sonst',
        'solange',
        'Für',
        'für',
        'fuer',
        'jede',
        'jeden',
        'jedes',
        'bis',
        'mit',
        'Schrittgröße',
        'Schrittgroesse',
        'Zahl',
        'Zahlen',
        'Kommazahl',
        'Kommazahlen',
        'Wahrheitswert',
        'Buchstabe',
        'Buchstaben',
        'Text',
        'Liste',
        'Listen',
        'Referenz',
        'Funktion',
        'Binde',
        'ein',
        'gib',
        'zurück',
        'zurueck',
        'nichts',
        'um',
        'Bit',
        'nach',
        'links',
        'rechts',
        'verschoben',
        'Größe',
        'Groesse',
        'Länge',
        'Laenge',
        'kontra',
        'logisch',
        'mache',
        'wiederhole',
        'dem',
        'Parameter',
        'den',
        'Parametern',
        'vom',
        'Typ',
        'gibt',
        'eine',
        'einen',
        'macht',
        'kann',
        'so',
        'benutzt',
        'werden',
        'speichere',
        'Speichere',
        'das',
        'Ergebnis',
        'in',
        'verkettet',
        'erhöhe',
        'erhoehe',
        'verringere',
        'vervielfache',
        'teile',
        'verschiebe',
        'negiere',
        'an',
        'Stelle',
        'Logarithmus',
        'zur',
        'Basis',
        'definiert',
        'leere',
        'leeren',
        'aus',
        'besteht',
        'einer',
        'einem',
        'verlasse',
        'Mal',
        'Alias',
        'steht',
        'öffentliche',
        'oeffentliche',
        'öffentlichen',
        'oeffentlichen',
        'Wir',
        'nennen',
        'Kombination',
        'Standardwert',
        'erstellen',
        'sie',
        'fahre',
        'Schleife',
        'fort',
        'im',
        'Bereich',
        'ab',
        'zum',
        'Element',
        'falls',
        'ansonsten',
        'extern',
        'sichtbar',
        'sichtbare',
    ],
    builtins: [        
        'wahr',
        'falsch',
        'plus',
        'minus',
        'mal',
        'durch',
        'modulo',
        'hoch',
        'Wurzel',
        'Betrag',
        'und',
        'Und',
        'oder',
        'entweder',
        'nicht',
        'gleich',
        'ungleich',
        'kleiner',
        'größer',
        'groesser',
        'zwischen',
        'Name',
        'Kommentar',
        'Symbol',
        'Links',
        'Rechts',
        'kontr',
        'Verringere',
        'Vervielfache',
        'Teile',
        'Verschiebe',
        'Negiere',
        'Schrittgröße',
        'Gib',
        'Speichere',
        'Verlasse',
        'Steht',
        'St',
        'Fahre',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /@?[a-zA-Z_ÄÖÜäöüß][a-zA-ZÄÖÜäöüß_0-9]*/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/\[/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\]]+/, 'comment'],
            //[/\(\*/,    'comment', '@push' ],    // nested comment  not allowed :-(
            [/\]/, 'comment', '@pop'],
            [/[\[]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
