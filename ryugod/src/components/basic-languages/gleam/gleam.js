/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|if|else).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.gleam',
    keywords: [
        'as',
        'use',
        'case',
        'if',
        'assert',
        'type',
        'opaque',
        'todo',
        'panic',
        'else',
        'try',
    ],
    builtins: [
        'bit_array',
        'bool',
        'bytes_builder',
        'dict',
        'dynamic',
        'float',
        'function',
        'gleam',
        'int',
        'io',
        'iterator',
        'list',
        'option',
        'order',
        'pair',
        'queue',
        'regex',
        'result',
        'set',
        'string',
        'string_builder',
        'uri',
        'absolute_value',
        'add',
        'all',
        'and',
        'any',
        'append',
        'append_builder',
        'append_string',
        'apply1',
        'apply2',
        'apply3',
        'at',
        'base16_decode',
        'base16_encode',
        'base64_decode',
        'base64_encode',
        'base64_url_decode',
        'base64_url_encode',
        'byte_size',
        'capitalise',
        'ceiling',
        'check',
        'chunk',
        'clamp',
        'combination_pairs',
        'combinations',
        'combine',
        'compare',
        'compile',
        'compose',
        'concat',
        'concat_bit_arrays',
        'constant',
        'contains',
        'count',
        'crop',
        'curry2',
        'curry3',
        'curry4',
        'curry5',
        'curry6',
        'cycle',
        'debug',
        'delete',
        'difference',
        'divide',
        'drop',
        'drop_left',
        'drop_right',
        'drop_while',
        'each',
        'empty',
        'ends_with',
        'exclusive_nor',
        'exclusive_or',
        'filter',
        'filter_map',
        'find',
        'find_map',
        'first',
        'flat_map',
        'flatten',
        'flip',
        'floor',
        'fold',
        'fold_right',
        'fold_until',
        'from_bit_array',
        'from_list',
        'from_result',
        'from_string',
        'from_string_builder',
        'from_strings',
        'from_utf_codepoints',
        'get',
        'group',
        'guard',
        'has_key',
        'identity',
        'index',
        'index_fold',
        'index_map',
        'insert',
        'inspect',
        'interleave',
        'intersection',
        'intersperse',
        'is_disjoint',
        'is_empty',
        'is_equal',
        'is_logically_equal',
        'is_none',
        'is_some',
        'is_subset',
        'is_utf8',
        'iterate',
        'join',
        'key_filter',
        'key_find',
        'key_pop',
        'key_set',
        'keys',
        'last',
        'lazy_guard',
        'lazy_or',
        'lazy_unwrap',
        'length',
        'loosely_compare',
        'loosely_equals',
        'lowercase',
        'map',
        'map_first',
        'map_fold',
        'map_second',
        'map_values',
        'map2',
        'max',
        'merge',
        'min',
        'modulo',
        'multiply',
        'nand',
        'negate',
        'new',
        'nor',
        'once',
        'or',
        'origin',
        'pad_left',
        'pad_right',
        'parse',
        'parse_query',
        'partition',
        'path_segments',
        'percent_decode',
        'percent_encode',
        'permutations',
        'pop',
        'pop_back',
        'pop_front',
        'pop_grapheme',
        'pop_map',
        'power',
        'prepend',
        'prepend_builder',
        'prepend_string',
        'print',
        'print_error',
        'println',
        'println_error',
        'product',
        'push_back',
        'push_front',
        'query_to_string',
        'random',
        'range',
        'reduce',
        'repeat',
        'repeatedly',
        'replace',
        'rest',
        'reverse',
        'round',
        'run',
        'scan',
        'second',
        'shuffle',
        'single',
        'size',
        'sized_chunk',
        'slice',
        'sort',
        'split',
        'split_once',
        'split_while',
        'square_root',
        'starts_with',
        'step',
        'strict_zip',
        'subtract',
        'sum',
        'swap',
        'symmetric_difference',
        'take',
        'take_while',
        'tap',
        'then',
        'to_bit_array',
        'to_graphemes',
        'to_int',
        'to_list',
        'to_option',
        'to_result',
        'to_string',
        'to_utf_codepoints',
        'transform',
        'transpose',
        'trim',
        'trim_left',
        'trim_right',
        'truncate',
        'try_each',
        'try_fold',
        'try_map',
        'unfold',
        'union',
        'unique',
        'unwrap',
        'unzip',
        'uppercase',
        'upsert',
        'utf_codepoint',
        'utf_codepoint_to_int',
        'values',
        'window',
        'window_by_2',
        'wrap',
        'yield',
        'zip',
    ],
    typeKeywords: [
        'fn',
        'let',
        'pub',
        'const',
        'import',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
