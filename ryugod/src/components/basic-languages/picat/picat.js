/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['%'],
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.pi',
    keywords: [
        'do',
        'else',
        'elseif',
        'end',
        'foreach',
        'if',
        'in',
        'index',
        'max',
        'min',
        'module',
        'not',
        'notin',
        'nt',
        'private',
        'protected',
        'public',
        'table',
        'then',
        'while',
    ],
    builtins: [
        'abs',
        'acos',
        'acot',
        'acsc',
        'acyclic_term',
        'and_to_list',
        'append',
        'apply',
        'arity',
        'array',
        'asec',
        'asin',
        'at_end_of_stream',
        'atan',
        'atan2',
        'atom',
        'atom_chars',
        'atom_codes',
        'atomic',
        'attr_var',
        'avg',
        'between',
        'bind_vars',
        'call',
        'call_cleanup',
        'catch',
        'ceiling',
        'char',
        'chr',
        'clear',
        'close',
        'compare_terms',
        'compound',
        'copy_term',
        'cos',
        'cot',
        'count_all',
        'csc',
        'delete',
        'delete_all',
        'different_terms',
        'digit',
        'dvar',
        'dvar_or_int',
        'e',
        'even',
        'exp',
        'fail',
        'false',
        'find_all',
        'findall',
        'first',
        'flatten',
        'float',
        'floor',
        'flush',
        'fold',
        'frand',
        'freeze',
        'gcd',
        'get',
        'get_attr',
        'get_global_map',
        'get_heap_map',
        'get_table_map',
        'ground',
        'handle_exception',
        'has_key',
        'hash_code',
        'head',
        'insert',
        'insert_all',
        'insert_ordered',
        'insert_ordered_down',
        'int',
        'integer',
        'is',
        'keys',
        'last',
        'len',
        'length',
        'list',
        'list_to_and',
        'log',
        'log10',
        'log2',
        'lowercase',
        'map',
        'map_to_list',
        'max',
        'maxint_small',
        'maxof',
        'maxof_inc',
        'membchk',
        'member',
        'min',
        'minint_small',
        'minof',
        'minof_inc',
        'modf',
        'name',
        'new_array',
        'new_list',
        'new_map',
        'new_set',
        'new_struct',
        'nl',
        'nonvar',
        'not Call',
        'nth',
        'number',
        'number_chars',
        'number_codes',
        'number_vars',
        'odd',
        'once Call',
        'open',
        'ord',
        'parse_radix_string',
        'parse_term',
        'peek_byte',
        'peek_char',
        'pi',
        'post_event',
        'post_event_any',
        'post_event_bound',
        'post_event_dom',
        'post_event_ins',
        'pow',
        'pow_mod',
        'prime',
        'primes',
        'print',
        'printf',
        'println',
        'prod',
        'put',
        'put_attr',
        'rand_max',
        'random',
        'random = Val',
        'random2',
        'read_atom',
        'read_byte',
        'read_char',
        'read_char_code',
        'read_file_bytes',
        'read_file_chars',
        'read_file_codes',
        'read_file_lines',
        'read_file_terms',
        'read_int',
        'read_line',
        'read_number',
        'read_picat_token',
        'read_real',
        'read_term',
        'readln',
        'real',
        'reduce',
        'remove_dups',
        'repeat ',
        'reverse',
        'round',
        'sec',
        'second',
        'select',
        'sign',
        'sin',
        'size',
        'slice',
        'sort',
        'sort_down',
        'sort_down_remove_dups',
        'sort_remove_dups',
        'sorted',
        'sorted_down',
        'sqrt',
        'string',
        'struct',
        'subsumes',
        'sum',
        'tail',
        'tan',
        'throw E',
        'to_array',
        'to_atom',
        'to_binary_string',
        'to_codes',
        'to_degrees',
        'to_fstring',
        'to_hex_string',
        'to_int',
        'to_integer',
        'to_list',
        'to_lowercase',
        'to_number',
        'to_oct_string',
        'to_radians',
        'to_radix_string',
        'to_real',
        'to_string',
        'to_uppercase',
        'true',
        'truncate',
        'uppercase',
        'values',
        'var',
        'variant',
        'vars',
        'write',
        'write_byte',
        'write_char',
        'write_char_code',
        'writef',
        'writeln',
        'zip',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /[a-zA-Z_-]+/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/\/\*/, 'comment', '@comment'],
            [/%.*$/, 'comment']
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody'],
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
    }
};
