/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ';',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.j',
    keywords: [
        'aaload',
        'aastore',
        'aconst_null',
        'aload',
        'aload_0',
        'aload_1',
        'aload_2',
        'aload_3',
        'anewarray',
        'areturn',
        'arraylength',
        'astore',
        'astore_0',
        'astore_1',
        'astore_2',
        'astore_3',
        'athrow',
        'baload',
        'bastore',
        'bipush',
        'breakpoint',
        'caload',
        'castore',
        'checkcast',
        'd2f',
        'd2i',
        'd2l',
        'dadd',
        'daload',
        'dastore',
        'dcmpg',
        'dcmpl',
        'dconst_0',
        'dconst_1',
        'ddiv',
        'default',
        'dload',
        'dload_0',
        'dload_1',
        'dload_2',
        'dload_3',
        'dmul',
        'dneg',
        'double',
        'drem',
        'dreturn',
        'dstore',
        'dstore_0',
        'dstore_1',
        'dstore_2',
        'dstore_3',
        'dsub',
        'dup',
        'dup_x1',
        'dup_x2',
        'dup2',
        'dup2_x1',
        'dup2_x2',
        'f2d',
        'f2i',
        'f2l',
        'fadd',
        'faload',
        'fastore',
        'fcmpg',
        'fcmpl',
        'fconst_0',
        'fconst_1',
        'fconst_2',
        'fdiv',
        'fload',
        'fload_0',
        'fload_1',
        'fload_2',
        'fload_3',
        'float',
        'fmul',
        'fneg',
        'frem',
        'freturn',
        'fstore',
        'fstore_0',
        'fstore_1',
        'fstore_2',
        'fstore_3',
        'fsub',
        'getfield',
        'getstatic',
        'goto',
        'goto_w',
        'i2b',
        'i2c',
        'i2d',
        'i2f',
        'i2l',
        'i2s',
        'iadd',
        'iaload',
        'iand',
        'iastore',
        'iconst_0',
        'iconst_1',
        'iconst_2',
        'iconst_3',
        'iconst_4',
        'iconst_5',
        'iconst_m1',
        'idiv',
        'if_acmpeq',
        'if_acmpne',
        'if_icmpeq',
        'if_icmpge',
        'if_icmpgt',
        'if_icmple',
        'if_icmplt',
        'if_icmpne',
        'ifeq',
        'ifge',
        'ifgt',
        'ifle',
        'iflt',
        'ifne',
        'ifnonnull',
        'ifnull',
        'iinc',
        'iload',
        'iload_0',
        'iload_1',
        'iload_2',
        'iload_3',
        'imul',
        'ineg',
        'instanceof',
        'int',
        'int2byte',
        'int2char',
        'int2short',
        'invokedynamic',
        'invokeinterface',
        'invokenonvirtual',
        'invokespecial',
        'invokestatic',
        'invokevirtual',
        'ior',
        'irem',
        'ireturn',
        'ishl',
        'ishr',
        'istore',
        'istore_0',
        'istore_1',
        'istore_2',
        'istore_3',
        'isub',
        'iushr',
        'ixor',
        'jsr',
        'jsr_w',
        'l2d',
        'l2f',
        'l2i',
        'ladd',
        'laload',
        'land',
        'lastore',
        'lcmp',
        'lconst_0',
        'lconst_1',
        'ldc',
        'ldc_w',
        'ldc2',
        'ldc2_w',
        'ldiv',
        'lload',
        'lload_0',
        'lload_1',
        'lload_2',
        'lload_3',
        'lmul',
        'lneg',
        'lookupswitch',
        'lor',
        'lrem',
        'lreturn',
        'lshl',
        'lshr',
        'lstore',
        'lstore_0',
        'lstore_1',
        'lstore_2',
        'lstore_3',
        'lsub',
        'lushr',
        'lxor',
        'monitorenter',
        'monitorexit',
        'multianewarray',
        'new',
        'newarray',
        'nop',
        'pop',
        'pop2',
        'putfield',
        'putstatic',
        'return',
        'saload',
        'sastore',
        'short',
        'sipush',
        'swap',
        'tableswitch',
        'class',
        'static',
        'final',
        'public',
        'protected',
        'abstract',
        'interface',
        'private',
        'extends',
    ],
    builtins: [
        '.catch',
        '.class',
        '.end',
        '.field',
        '.implements',
        '.interface',
        '.limit',
        '.line',
        '.method',
        '.source',
        '.super',
        '.throws',
        '.var',
        'stack',
        'method',
        'locals',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[a-zA-Z_/]+;/, 'metatag'],
            [/[a-zA-Z_]\w*:/, 'variable'],
            [
                /\.?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(;.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
