/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ';',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.carp',
    keywords: [
        'def',
        'defn',
        'let',
        'do',
        'if',
        'while',
        'ref',
        'address',
        'set!',
        'the',
        'defmacro',
        'defdynamic',
        'defndynamic',
        'quote',
        'cons',
        'list',
        'array',
        'fn',
        'expand',
        'deftype',
        'register',
        'system-include',
        'register-type',
        'defmodule',
        'copy',
        'use',
        'module',
        'defalias',
        'definterface',
        'eval',
        'expand',
        'instantiate',
        'type',
        'info',
        'help',
        'quit',
        'env',
        'build',
        'run',
        'cat',
        'project-set!',
        'local-include',
        'cons-last',
        'add-cflag',
        'add-lib',
        'project',
        'load',
        'reload',
        'let-do',
        'ignore',
        'fmt',
        'mac-only',
        'linux-only',
        'windows-only',
        'use-all',
        'when',
        'unless',
        'defn-do',
        'comment',
        'forever-do',
        'case',
        'and*',
        'or*',
        'str*',
        'println*',
        'break',
        'doc',
        'sig',
        'hidden',
        'private',
        'while-do',
        'const-assert',
        'save-docs',
        'defproject',
        'relative-include',
        'not-on-windows',
        'load-and-use',
        'deftest',
        'quasiquote',
        'unquote',
        'unquote-splicing',
        'vca1r',
        'vca2r',
        'vca3r',
        'vca4r',
        'vcd1r',
        'vcd2r',
        'vcd3r',
        'vcd4r',
    ],
    builtins: [
        'Î»',
        'not',
        'or',
        'and',
        'inc',
        'dec',
        'println',
        'print',
        'get-line',
        'from-string',
        'mod',
        'random',
        'random-between',
        'str',
        'mask',
        'delete',
        'append',
        'length',
        'duplicate',
        'cstr',
        'chars',
        'from-chars',
        'to-int',
        'from-int',
        'sin',
        'cos',
        'sqrt',
        'acos',
        'atan2',
        'exit',
        'time',
        'seed-random',
        'for',
        'cond',
        'floor',
        'abs',
        'sort-with',
        'slice',
        'prefix',
        'suffix',
        'reverse',
        'sum',
        'min',
        'max',
        'first',
        'last',
        'reduce',
        'format',
        'zero',
        'read-file',
        'bit-shift-left',
        'bit-shift-right',
        'bit-and',
        'bit-or',
        'bit-xor',
        'bit-not',
        'safe-add',
        'safe-sub',
        'safe-mul',
        'even?',
        'odd?',
        'cmp',
        'allocate',
        'repeat-indexed',
        'sanitize-addresses',
        'memory-balance',
        'reset-memory-balance!',
        'log-memory-balance!',
        'memory-logged',
        'assert-balanced',
        'trace',
        'assert',
        'pi',
        'e',
        'swap!',
        'update!',
        'char-at',
        'tail',
        'head',
        'split-by',
        'words',
        'lines',
        'pad-left',
        'pad-right',
        'count-char',
        'empty?',
        'random-sized',
        'starts-with?',
        'ends-with?',
        'string-join',
        'free',
        'sleep-seconds',
        'sleep-micros',
        'substitute',
        'neg',
        'to-float',
        'match',
        'matches?',
        'find',
        'global-match',
        'match-str',
        'from-float',
        'tan',
        'asin',
        'atan',
        'cosh',
        'sinh',
        'tanh',
        'exp',
        'frexp',
        'ldexp',
        'log',
        'log10',
        'modf',
        'pow',
        'ceil',
        'clamp',
        'approx',
        'refstr',
        'foreach',
        'repeat',
        'nth',
        'replicate',
        'range',
        'raw',
        'aset',
        'aset!',
        'push-back',
        'pop-back',
        'sort',
        'index-of',
        'element-count',
        'apply',
        'unsafe-from',
        'from',
        'just?',
        'nothing?',
        'ptr',
        'from-ptr',
        'map',
        'and-then',
        'unwrap-or-zero',
        'or-else',
        'unwrap-or-else',
        'unsafe-from-success',
        'from-success',
        'unsafe-from-error',
        'from-error',
        'to-maybe',
        'success?',
        'error?',
        'to-result',
        'create',
        'create-with-len',
        'put',
        'put!',
        'get-with-default',
        'get',
        'get-maybe',
        'update',
        'update-with-default',
        'contains?',
        'remove',
        'all?',
        'for-each',
        'endo-map',
        'kv-reduce',
        'vals',
        'keys',
        'from-array',
        'to-array',
        'subset?',
        'union',
        'difference',
        'intersection',
        'init-from-refs',
        'car',
        'cdr',
        'caar',
        'cadr',
        'cdar',
        'cddr',
        'caaar',
        'caadr',
        'cadar',
        'cdaar',
        'caddr',
        'cdadr',
        'cddar',
        'cdddr',
        'caaaar',
        'caaadr',
        'caaddr',
        'cadaar',
        'cadadr',
        'caddar',
        'cadddr',
        'cdaaar',
        'cdaadr',
        'cdadar',
        'cdaddr',
        'cddaar',
        'cddadr',
        'cdddar',
        'cddddr',
        'private?',
        'hidden?',
        'print-sig',
        'print-doc',
        'assert-op',
        'assert-equal',
        'assert-not-equal',
        'assert-true',
        'assert-false',
        'assert-exit',
        'print-test-results',
        'with-test',
        'dir-from-path',
        'file-from-path',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_][\w|-]*[\?!]?/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(;.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
