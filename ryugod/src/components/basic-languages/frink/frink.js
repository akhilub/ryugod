/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//'],
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        //{ open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        //{ open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.frink',
    keywords: [
        'array',
        'boolean',
        'break',
        'class',
        'date',
        'dict',
        'do',
        'else',
        'false',
        'finally',
        'for',
        'if',
        'import',
        'multifor',
        'regexp',
        'new',
        'next',
        'range',
        'return',
        'set',
        'string',
        'subst',
        'to',
        'true',
        'try',        
        'unit',
        'until',
        'use',
        'var',
        'while',
        'true',
        'TRUE',
        'false',
        'FALSE',
        'and',
        'mod',
        'MOD',
        'AND',
        'or',
        'OR',
        'NOT',
        'not',
        'nand',
        'NAND',
        'nor',
        'NOR',
        'xor',
        'XOR',
        'implies',
        'IMPLIES',
    ],
    builtins: [
        'abs',
        'approxLog2',
        'arccos',
        'arccosh',
        'arccot',
        'arccoth',
        'arccsc',
        'arccsch',
        'arcsec',
        'arcsech',
        'arcsin',
        'arcsinh',
        'arctan',
        'arctanh',
        'array',
        'base',
        'base2',
        'base36',
        'base64',
        'base8',
        'binaryToGray',
        'bitLength',
        'browse',
        'ceil',
        'ceil',
        'char',
        'charName',
        'charNames',
        'chars',        
        'clamp',
        'conjugate',
        'cos',
        'cosh',
        'cot',
        'coth',
        'countToArray',
        'countToDict',
        'csc',
        'csch',
        'deepCopy',
        'denominator',
        'DFT',
        'eval',
        'exp',
        'FFT',
        'first',
        'flatten',
        'floor',
        'format',
        'formatEng',
        'formatFix',
        'formatFixed',
        'formatMatrix',
        'formatSci',
        'formatSig',
        'formatTable',
        'formatTableBoxed',
        'formatTableInput',
        'FrinkGeneration',
        'FrinkVersion',
        'getExponent',
        'getPrecision',
        'grayCode',
        'grayToBinary',
        'Im',
        'indexOf',
        'input',
        'int',
        'integerDigits',
        'integerDigits',
        'intersection',
        'inv',
        'inverseDFT',
        'inverseFFT',
        'isArray',
        'isComplex',
        'isDate',
        'isDefined',
        'isDict',
        'isEnumerating',
        'isInteger',
        'isInterval',
        'isNegative',
        'isPositive',
        'isRational',
        'isReal',
        'isSet',
        'isString',
        'isUnit',
        'isVariableDefined',
        'join',
        'last',
        'lc',
        'left',
        'length',
        'lexicographicPermute',
        'ln',
        'log',
        'lowercase',
        'makeArray',
        'max',
        'messageDigest',
        'messageDigestBytes',
        'messageDigestInt',
        'min',
        'modDiv',
        'modInverse',
        'modPow',
        'nth',
        'numerator',
        'numeratorDenominator',
        'parseInt',
        'print',
        'println',
        'product',
        'random',
        'randomBits',
        'randomBytes',
        'randomFloat',
        'randomGaussian',
        'randomSeed',
        'rangeOf',
        'rationalAsFloat',
        'Re',
        'realSignum',
        'recip',
        'regex',
        'removeSlice',
        'removeSliceLength',
        'rest',
        'reverse',
        'right',
        'round',
        'sec',
        'sech',
        'select',
        'setEngineering',
        'setPrecision',
        'showApproximations',
        'showDimensionName',
        'signum',
        'sin',
        'sinh',
        'sleep',
        'slice',
        'sliceLength',
        'sort',
        'sqrt',
        'sqrtExact',
        'substr',
        'substring',
        'substrLen',
        'substringLen',
        'sum',
        'tan',
        'tanh',
        'toArray',
        'toString',
        'trunc',
        'uc',
        'union',
        'units',
        'lengthRaw',
        'charsRaw',
        'substrRaw',
        'substringRaw',
        'substrLenRaw',
        'substringLenRaw',
        'indexOfRaw',
        'indexOfRaw',
        'trim',
        'padLeft',
        'padRight',
        'base64Encode',
        'base64Decode',
        'stringToBytes',
        'bytesToString',
        'toASCII',
        'binary',
        'ternary',
        'trinary',
        'quaternary',
        'quinary',
        'senary',
        'sexenary',
        'septenary',
        'octal',
        'oct',
        'octonary',
        'nonary',
        'decimal',
        'denary',
        'undenary',
        'duodecimal',
        'duodenary',
        'tridecimal',
        'quattuordecimal',
        'quindecimal',
        'hexadecimal',
        'sexadecimal',
        'hex',
        'septendecimal',
        'octodecimal',
        'nonadecimal',
        'vigesimal',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /@?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/"""/, 'string', '@endDblDocString'],
            [/(^\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        endDblDocString: [
            [/[^"]+/, 'string'],
            [/\\"/, 'string'],
            [/"""/, 'string', '@popall'],
            [/"/, 'string']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
