/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '--',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.hell',
    keywords: [
        'qualified',
        'hiding',
        'case',
        'default',
        'deriving',
        'do',
        'else',
        'if',
        'import',
        'in',
        'infix',
        'infixr',
        'let',
        'module',
        'of',
    ],
    builtins: [
        '.adjust',
        '.all',
        '.and',
        '.any',
        '.appendFile',
        '.Array',
        '.bind',
        '.BlockBuffering',
        '.bool',
        '.Bool',
        '.breakOn',
        '.concat',
        '.concurrently',
        '.cons',
        '.copyFile',
        '.createDirectory',
        '.createDirectoryIfMissing',
        '.decode',
        '.decodeUtf8',
        '.delete',
        '.drop',
        '.dropEnd',
        '.either',
        '.encode',
        '.encodeUtf8',
        '.eq',
        '.error',
        '.False',
        '.filter',
        '.filterWithKey',
        '.fix',
        '.foldl',
        '.forM_',
        '.forM',
        '.fromInt',
        '.fromList',
        '.get',
        '.getArgs',
        '.getContents',
        '.getCurrentDirectory',
        '.getEnv',
        '.getEnvironment',
        '.getLine',
        '.groupBy',
        '.gt',
        '.hGet',
        '.hPutStr',
        '.hSetBuffering',
        '.id',
        '.insert',
        '.insertWith',
        '.interact',
        '.intercalate',
        '.isInfixOf',
        '.isPrefixOf',
        '.isSuffixOf',
        '.iterate',
        '.Just',
        '.Left',
        '.length',
        '.LineBuffering',
        '.lines',
        '.listDirectory',
        '.listToMaybe',
        '.lookup',
        '.lt',
        '.map',
        '.mapM_',
        '.mapM',
        '.mapMaybe',
        '.maybe',
        '.member',
        '.modify',
        '.nil',
        '.NoBuffering',
        '.not',
        '.Nothing',
        '.Null',
        '.Number',
        '.Object',
        '.or',
        '.plus',
        '.pooledForConcurrently_',
        '.pooledForConcurrently',
        '.pooledMapConcurrently_',
        '.pooledMapConcurrently',
        '.print',
        '.proc',
        '.pure',
        '.putStr',
        '.putStrLn',
        '.race',
        '.readFile',
        '.readProcess_',
        '.readProcess',
        '.readProcessStdout_',
        '.removeFile',
        '.renameFile',
        '.replace',
        '.return',
        '.reverse',
        '.Right',
        '.runProcess_',
        '.runProcess',
        '.set',
        '.setCurrentDirectory',
        '.setEnv',
        '.setStdin',
        '.show',
        '.singleton',
        '.size',
        '.sort',
        '.sortOn',
        '.splitOn',
        '.stderr',
        '.stdin',
        '.stdout',
        '.String',
        '.strip',
        '.stripPrefix',
        '.stripSuffix',
        '.subtract',
        '.Tagged',
        '.take',
        '.takeEnd',
        '.then',
        '.threadDelay',
        '.timeout',
        '.toList',
        '.toLower',
        '.toUpper',
        '.True',
        '.union',
        '.unionWith',
        '.unlines',
        '.unwords',
        '.value',
        '.when',
        '.words',
        '.writeFile',
        '.zip',
        '.zipWith',
    ],
    typeKeywords: [
        'Async',
        'Bool',
        'ByteString',
        'Char',
        'ConsL',
        'Double',
        'Either',
        'Eq',
        'Error',
        'Ether',
        'ExitCode',
        'Function',
        'Int',
        'IO',
        'Json',
        'List',
        'Map',
        'Maybe',
        'Monad',
        'NilL',
        'Ord',
        'ProcessConfig',
        'Record',
        'Set',
        'Show',
        'Tagged',
        'Text',
        'Timeout',
        'Tuple',
        'Value',
        'Vector',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\\[a-zA-Z_]\w*/, 'metatag'],
            [
                /\.?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                } 
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(--.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
