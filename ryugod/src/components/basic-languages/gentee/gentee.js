/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|if|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.g',
    keywords: [
        'arr',
        'bool',
        'buf',
        'catch',
        'char',
        'const',
        'elif',
        'else',
        'false',
        'float',
        'for',
        'func',
        'go',
        'handle',
        'if',
        'in',
        'int',
        'local',
        'map',
        'nil',
        'obj',
        'recover',
        'retry',
        'return',
        'run',
        'set',
        'str',
        'struct',
        'true',
        'try',
        'while',
    ],
    builtins: [
        'Abs',
        'AbsPath',
        'AESDecrypt',
        'AESEncrypt',
        'AppendFile',
        'ArchiveName',
        'Archiving',
        'Array',
        'Base64',
        'BaseName',
        'Boolean',
        'Buffer',
        'Ceil',
        'Characters',
        'ChDir',
        'ChMode',
        'ClearCarriage',
        'CloseFile',
        'CloseTarGz',
        'CloseZip',
        'CompressFile',
        'Console',
        'Constants',
        'Context',
        'CopyFile',
        'CreateDir',
        'CreateFile',
        'CreateTarGz',
        'CreateZip',
        'Cryptography',
        'Ctx',
        'CtxGet',
        'CtxIs',
        'CtxSet',
        'CtxValue',
        'CYCLE',
        'DecodeInt',
        'Del',
        'DEPTH',
        'Dir',
        'Download',
        'EncodeInt',
        'Encoding',
        'ErrID',
        'error',
        'ErrText',
        'ErrTrace',
        'ExistFile',
        'exit',
        'expressions',
        'Ext',
        'FileInfo',
        'FileMode',
        'Files',
        'Float',
        'Floor',
        'GetCurDir',
        'HeadInfo',
        'Hex',
        'HTTPGet',
        'HTTPPage',
        'HTTPRequest',
        'Insert',
        'Integer',
        'IOTA',
        'IsArray',
        'IsEmptyDir',
        'IsKey',
        'IsMap',
        'IsNil',
        'item',
        'Join',
        'JoinPath',
        'Json',
        'JsonToObj',
        'Key',
        'Lock',
        'Map',
        'MatchPath',
        'Max',
        'Md5',
        'Md5File',
        'Min',
        'Multithreading',
        'Network',
        'numbers',
        'Object',
        'OpenFile',
        'Path',
        'Print',
        'Println',
        'Process',
        'Progress',
        'ProgressEnd',
        'ProgressStart',
        'Random',
        'RandomBuf',
        'Read',
        'ReadDir',
        'ReadFile',
        'ReadString',
        'ReadTarGz',
        'ReadZip',
        'Regular',
        'Remove',
        'RemoveDir',
        'Rename',
        'resume',
        'Reverse',
        'Round',
        'Runtime',
        'SCRIPT',
        'SetFileTime',
        'SetLen',
        'SetPos',
        'Sets',
        'Sha256',
        'Sha256File',
        'sleep',
        'Slice',
        'Sort',
        'Strings',
        'StructDecode',
        'StructEncode',
        'Subbuf',
        'suspend',
        'System',
        'TarGz',
        'TempDir',
        'terminate',
        'thread',
        'Time',
        'Trace',
        'Type',
        'UnBase64',
        'UnHex',
        'Unlock',
        'UnpackTarGz',
        'UnpackTarGz',
        'UnpackZip',
        'UnpackZip',
        'VERSION',
        'wait',
        'WaitAll',
        'WaitDone',
        'WaitGroup',
        'Write',
        'WriteFile',
        'Zip',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    tokenizer: {
        root: [[/[{}]/, 'delimiter.bracket'], { include: 'common' }],
        common: [
            { include: '@whitespace' },
            { include: '@numbers' },
            [/[,:;]/, 'delimiter'],
            [/[\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'metatag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ],
            [/"/, 'string', '@string_double'],
            [/'/, 'string', '@string_single'],
            [/`/, 'string', '@string_backtick']
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        string_double: [
            [/[^\\"]+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/"/, 'string', '@pop']
        ],
        string_single: [
            [/[^\\']+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/'/, 'string', '@pop']
        ],
        string_backtick: [
            [/%\{/, { token: 'delimiter.bracket', next: '@bracketCounting' }],
            [/[^\\`%]+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/`/, 'string', '@pop']
        ],
        bracketCounting: [
            [/\{/, 'delimiter.bracket', '@bracketCounting'],
            [/\}/, 'delimiter.bracket', '@pop'],
            { include: 'common' }
        ]
    }
};
