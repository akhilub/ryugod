/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:Function|If|While|Until|ForEach).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.ys',
    keywords: [
        'If',
        'While',
        'Until',
        'For',
        'ForEach',
        'Local',
        'LocalSymbols',
        'MacroLocal',
        'Protect',
        'UnProtect',
        'Not',
        'And',
        'Or',
        'Type',
        'True',
        'False',
        'Undefined',
        'Infinity',
        'Pi',
    ],
    builtins: [        
        "Abs",
        "Add",
        "ArcCos",
        "ArcSin",
        "ArcTan",
        "Arg",
        "Array'Create",
        "Array'CreateFromList",
        "Array'Get",
        "Array'Set",
        "Array'Size",
        "Array'ToList",
        "Assert",
        "Backquoting",
        "BinSplitData",
        "BinSplitFinal",
        "BinSplitNum",
        "BitAnd",
        "BitOr",
        "BitXor",
        "Bodied",
        "BracketRational",
        "Builtin'Precision'Get",
        "Builtin'Precision'Set",
        "CachedConstant",
        "Check",
        "Clear",
        "ClearError",
        "ClearErrors",
        "Concat",
        "ContFracEval",
        "ContFracList",
        "Cos",
        "CurrentFile",
        "CurrentLine",
        "DefMacroRuleBase",
        "DefMacroRuleBaseListed",
        "DumpErrors",
        "Echo",
        "Equals",
        "Eval",
        "Exp",
        "ExtraInfo'Get",
        "ExtraInfo'Set",
        "FastArcSin",
        "FastLog",
        "FindFunction",
        "FromFile",
        "FromString",
        "Function",
        "GarbageCollect",
        "GenericTypeName",
        "GetCoreError",
        "GetError",
        "GetErrorTableau",
        "GetTime",
        "GreaterThan",
        "GuessRational",
        "HoldArg",
        "HoldArgNr",
        "Infix",
        "InNumericMode",
        "IntLog",
        "IntNthRoot",
        "IntPowerNum",
        "IsBodied",
        "IsError",
        "IsGeneric",
        "IsInfix",
        "IsPostfix",
        "IsPrefix",
        "IsPromptShown",
        "KnownFailure",
        "LeftPrecedence",
        "Length",
        "LessThan",
        "Ln",
        "LogicTest",
        "LogicVerify",
        "MacroClear",
        "MacroLocal",
        "MacroRule",
        "MacroRuleBase",
        "MacroRuleBaseListed",
        "MacroSet",
        "MathAbs",
        "MathAdd",
        "MathAnd",
        "MathArcCos",
        "MathArcCosh",
        "MathArcSin",
        "MathArcSinh",
        "MathArcTan",
        "MathArcTanh",
        "MathCeil",
        "MathCos",
        "MathCosh",
        "MathDiv",
        "MathDivide",
        "MathExp",
        "MathFloor",
        "MathGcd",
        "MathGetExactBits",
        "MathLog",
        "MathMod",
        "MathMultiply",
        "MathMultiply",
        "MathNot",
        "MathOr",
        "MathPower",
        "MathSetExactBits",
        "MathSin",
        "MathSinh",
        "MathSqrt",
        "MathSubtract",
        "MathTan",
        "MathTanh",
        "Multiply",
        "MultiplyNum",
        "NearRational",
        "NewLine",
        "NewtonNum",
        "Nl",
        "NonN",
        "NthRoot",
        "OpLeftPrecedence",
        "OpPrecedence",
        "OpRightPrecedence",
        "Pi",
        "Plot2D",
        "Plot3DS",
        "Postfix",
        "Prefix",
        "PrettyForm",
        "Prog",
        "Random",
        "RandomSeed",
        "RandVerifyArithmetic",
        "Read",
        "ReadToken",
        "Retract",
        "RightAssociative",
        "RightPrecedence",
        "RoundTo",
        "Rule",
        "RuleBase",
        "RuleBaseArgList",
        "RuleBaseListed",
        "Secure",
        "Set",
        "ShiftLeft",
        "ShiftRight",
        "Sign",
        "Sin",
        "String",
        "Sum",
        "SumTaylorNum",
        "Tan",
        "TestYacas",
        "ToFile",
        "ToString",
        "TrapError",
        "TruncRadian",
        "UnFence",
        "Verify",
        "VerifyArithmetic",
        "VerifyDiv",
        "Where",
        "Write",
        "WriteString",
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_][\w\']*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
