/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['#'],
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "~", close: "~", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "~", close: "~" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.fxl',
    keywords: [
        'put',
        'nl',
        'say',
        'fput',
        'fnl',
        'fsay',
        'fflush',
        'xor',
        'round',
        'ceil',
        'trunc',
        'abs',
        'sqrt',
        'exp',
        'log',
        'sin',
        'cos',
        'pi',
        'lt',
        'le',
        'eq',
        'ne',
        'ge',
        'gt',
        'I',
        'T',
        'F',
        'void',
        'cons',
        'null',
        'eval',
        'yield',
        'is_defined',
        'is_undef',
        'is_void',
        'is_good',
        'is_bool',
        'is_list',
        'length',
        'slice',
        'search',
        'str_num',
        'ord',
        'chr',
        'char_width',
        'dirname',
        'basename',
        'length_common',
        'is_str',
        'with',
        'fetch',
        'num_str',
        'is_num',
        'is_tuple',
        'tuple_to_list',
        'list_to_tuple',
        'stdin',
        'stdout',
        'stderr',
        'fopen',
        'fclose',
        'fgetc',
        'fget',
        'flook',
        'remove',
        'is_newer',
        'is_file',
        'is_dir',
        'flock_ex',
        'flock_sh',
        'flock_un',
        'readlink',
        'mkdir',
        'rmdir',
        'ftruncate',
        'fseek_set',
        'fseek_cur',
        'fseek_end',
        'ftell',
        'fread',
        'mkfile',
        'dir_names',
        'mod_time',
        'file_size',
        'symlink',
        'rename',
        'time',
        'localtime',
        'gmtime',
        'timelocal',
        'timegm',
        'microtime',
        'die',
        'argv',
        'sleep',
        'usleep',
        'run_process',
        'spawn',
        'exec',
        'fexl_benchmark',
        'seed_rand',
        'rand',
        'parse',
        'use_file',
        'is_closed',
        'def',
        'value;',
        'std;',
        'std',
        'value',
        'resolve',
        'hello',
        'hello',
        'buf_new',
        'buf_put',
        'buf_get',
        'readstr',
        'sgetc',
        'sget',
        'slook',
        'var_new',
        'var_get',
        'var_put',
        'is_var',
        'limit_time',
        'limit_memory',
        'limit_stack',
        'unpack',
        'pack',
        'random_bytes',
        'random_nonce',
        'random_secret_key',
        'nacl_box_public',
        'nacl_box_prepare',
        'nacl_box_seal',
        'nacl_box_open',
        'nacl_sign_public',
        'nacl_sign_open',
        'sha256',
        'sha512',
        'pack64',
        'unpack64',
        'hmac_sha512',
        'hmac_sha256',
        'set_alarm',
        'start_server',
        'kill',
        'connect',
        'receive_keystrokes',
        'defc',
        'if',
        '::',
        'use',
        'check',
        'default',
        'path_under',
        'dir_base',
        'dir_local',
        'trace',
        'error',
        'TAB',
        'NL',
        'CR',
        'LF',
        'QU',
        'remember',
        'cache',
        'do_benchmark',
        'show_benchmark',
        'and',
        'not',
        'or',
        'neg',
        'max',
        'min',
        'mod',
        'tau',
        'round2',
        'append',
        'flatten',
        'each',
        'map',
        'map_good',
        'filter',
        'reverse',
        'append_all',
        'shift',
        'combine_keys',
        'merge_keys',
        'group_items',
        'get_keys',
        'get_values',
        'sort_all',
        'sort_unique',
        'sort',
        'unique',
        'fold',
        'first',
        'drop',
        'list_sum',
        'list_length',
        'is_null',
        'range',
        'list_at',
        'list_combine',
        'column',
        'match_column',
        'stream_values',
        'get_list',
        'to_str',
        'get_str',
        'list_str',
        'str_bytes',
        'str_chars',
        'str_map',
        'join',
        'join_path',
        'split',
        'file_bytes',
        'file_content',
        'starts_with',
        'ends_with',
        'map_bytes_to_double',
        'random_double',
        'eq_data',
        'repeat_str',
        'format_num',
        'format_money',
        'fexl_quote',
        'uc',
        'lc',
        'render_data',
        'put_data',
        'fput_data',
        'as_str',
        'str_to_data',
        'count_match',
        'str_trim',
        'trim_spaces',
        'trim_beg_spaces',
        'trim_end_spaces',
        'i_render_data',
        'say_data',
        'fsay_data',
        'trace_data',
        'i_as_str',
        ':',
        'get_key',
        'del_key',
        'put_key',
        'push_key',
        'update_key',
        'add_key',
        'update_values',
        'sort_pairs',
        'put_default',
        'name_columns',
        'make_assoc',
        'hex_digit',
        'hex_byte',
        'hex_digit_to_dec',
        'xor_hex',
        'oct',
        'hex',
        'quote_ch',
        'quote',
        'colgroup',
        '_tag',
        'tag',
        'tr',
        'put_quote_data',
        'uri_escape',
        'uri_unescape',
        'make_url',
        'split_microtime',
        'subtract_microtime',
        'show_microtime',
        'trace_elapsed',
        'long_month_names',
        'short_month_names',
        'long_month_name',
        'short_month_name',
        'date_year',
        'date_month',
        'date_ymd',
        'split_date',
        'date_normal',
        'date_quarter',
        'month_ym',
        'ym_month',
        'ymd_date',
        'month_before',
        'month_after',
        'ym_num_days',
        'fill_day',
        'day_after',
        'date_end_prev_month',
        'date_end_prev_quarter',
        'date_end_prev_year',
        'same_quarter',
        'year_num_days',
        'day_in_year',
        'count_days',
        'day_of_week',
        'add_days',
        'add_year',
        'run_function',
        'run_program',
        'run_function_filter',
        'run_filter',
        'grab_output',
        'stop_server',
        'run_server',
        'read_csv_string',
        'read_csv_chars',
        'read_csv_file',
        'read_ssv_string',
        'read_ssv_chars',
        'read_ssv_file',
    ],
    builtins: [        
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\\[a-zA-Z_]\w*/, 'metatag'],
            [/^`\w+/, 'type.identifier'],
            [
                /(::?)|(\.)|([a-zA-Z0-9:._]+)/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/~([~|\w]+)?/, 'comment', '@comment'],
            [/(^#.*$)/, 'comment'],
            [/"/, 'string', '@endDblDocString']
        ],
        comment: [
            [/[^~]+/, 'comment'],
            [/~([~|\w]+)?/, 'comment', '@pop'],
            [/[~]/, 'comment']
        ],
        endDblDocString: [
            [/[^"]+/, 'string'],
            [/\\"/, 'string'],
            [/"/, 'string', '@popall'],
            [/"/, 'string']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/~$/, 'string.escape', '@popall'],
            [/~/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\~]+$/, 'string', '@popall'],
            [/[^\\~]+/, 'string'],
            [/\\./, 'string'],
            [/~/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
