/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.jnc',
    keywords: [
        'import',
        'namespace',
        'extension',
        'dynamiclib',
        'using',
        'friend',
        'public',
        'protected',
        'alignment',
        'setas',
        'typedef',
        'alias',
        'static',
        'threadlocal',
        'abstract',
        'virtual',
        'override',
        'mutable',
        'disposable',
        'unsigned',
        'bigendian',
        'const',
        'readonly',
        'cmut',
        'volatile',
        'weak',
        'thin',
        'safe',
        'unsafe',
        'errorcode',
        'cdecl',
        'stdcall',
        'jnccall',
        'thiscall',
        'array',
        'function',
        'property',
        'bindable',
        'autoget',
        'indexed',
        'multicast',
        'event',
        'reactor',
        'async',
        'enum',
        'struct',
        'union',
        'class',
        'opaque',
        'exposed',
        'bitflag',
        'get',
        'set',
        'construct',
        'destruct',
        'operator',
        'postfix',
        'new',
        'delete',
        'sizeof',
        'countof',
        'offsetof',
        'typeof',
        'bindingof',
        'dynamic',
        'if',
        'else',
        'for',
        'while',
        'do',
        'break',
        'break1',
        'break2',
        'break3',
        'break4',
        'continue',
        'continue1',
        'continue2',
        'continue3',
        'continue4',
        'return',
        'switch',
        'reswitch',
        'case',
        'default',
        'once',
        'onevent',
        'try',
        'throw',
        'catch',
        'finally',
        'nestedscope',
        'assert',
        'await',
        'basetype',
        'basetype1',
        'basetype2',
        'basetype3',
        'basetype4',
        'this',
        'true',
        'false',
        'null',
    ],
    builtins: [
        'start',
        'terminate',
        'close',
        'read',
        'write',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'resolve',
        'cancel',
        'close',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'open',
        'close',
        'clearLineErrors',
        'read',
        'write',
        'setupDevice',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'open',
        'close',
        'accept',
        'wait',
        'cancelWait',
        'blockingWait',
        'open',
        'close',
        'setSize',
        'read',
        'write',
        'flush',
        'open',
        'close',
        'unsuspend',
        'clear',
        'read',
        'write',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'open',
        'close',
        'read',
        'wait',
        'cancelWait',
        'blockingWait',
        'io.createNetworkAdapterDescList',
        'io.createSerialPortDescList',
        'io.getSymbolicLinkTarget',
        'io.getTempDir',
        'io.getHomeDir',
        'setSize',
        'open',
        'close',
        'view',
        'unmapAllViews',
        'open',
        'close',
        'unsuspend',
        'connect',
        'listen',
        'accept',
        'read',
        'write',
        'readDatagram',
        'writeDatagram',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'clear',
        'takeOver',
        'insertHead',
        'insertTail',
        'insertBefore',
        'insertAfter',
        'moveToHead',
        'moveToTail',
        'moveBefore',
        'moveAfter',
        'removeHead',
        'removeTail',
        'remove',
        'setSize',
        'reserve',
        'copy',
        'insert',
        'remove',
        'getString',
        'parse',
        'std.getLastError',
        'std.setErrno',
        'std.setError',
        'std.format',
        'strlen',
        'strcmp',
        'strncmp',
        'stricmp',
        'strnicmp',
        'strchr',
        'strrchr',
        'strichr',
        'strpbrk',
        'strstr',
        'stristr',
        'strcpy',
        'strcat',
        'strdup',
        'strdjb2',
        'stridjb2',
        'memcmp',
        'memchr',
        'memmem',
        'memcpy',
        'memmove',
        'memset',
        'memcat',
        'memdup',
        'memdjb2',
        'rand',
        'atoi',
        'atol',
        'strtol',
        'strtoul',
        'toupper',
        'tolower',
        'gets',
        'print',
        'print_u',
        'perror',
        'printf',
        'clear',
        'setCount',
        'reserve',
        'copy',
        'insert',
        'remove',
        'clear',
        'find',
        'visit',
        'remove',
        'clear',
        'reserve',
        'copy',
        'insert',
        'remove',
        'chop',
        'trimLeft',
        'trimRight',
        'detachString',
        'cloneString',
        'clear',
        'find',
        'visit',
        'remove',
        'openDevice',
        'openLive',
        'openFile',
        'close',
        'activate',
        'setFilter',
        'write',
        'read',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'io.createPcapDeviceDescList',
        'compile',
        'match',
        'cmp',
        'getValueString',
        'getArrayType',
        'getDataPtrType',
        'getPropertyPtrType',
        'extract',
        'getClassPtrType',
        'findConst',
        'findAttribute',
        'findBaseTypeOffset',
        'findItem',
        'getFunctionPtrType',
        'wait',
        'blockingWait',
        'asyncWait',
        'complete',
        'start',
        'stop',
        'restart',
        'addOnChangedBinding',
        'addOnEventBinding',
        'resetOnChangedBindings',
        'reset',
        'exec',
        'clear',
        'incrementalCompile',
        'finalize',
        'match',
        'jnc.collectGarbage',
        'jnc.getGcStats',
        'jnc.createDataPtr',
        'jnc.resetDynamicLayout',
        'open',
        'close',
        'getFunction',
        'open',
        'close',
        'connect',
        'authenticate',
        'resizePty',
        'read',
        'write',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'findEntry',
        'encode',
        'decode',
        'load',
        'save',
        'open',
        'close',
        'connect',
        'listen',
        'accept',
        'unsuspend',
        'read',
        'write',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'io.getSslNidShortName',
        'io.getSslNidLongName',
        'createSslState',
        'enableCiphers',
        'setEphemeralDhParams',
        'loadEphemeralDhParams',
        'setEphemeralDhStdParams',
        'setEphemeralEcdhCurve',
        'loadVerifyLocations',
        'loadCertificate',
        'loadPrivateKey',
        'shutdown',
        'signal',
        'reset',
        'wait',
        'signal',
        'reset',
        'wait',
        'lock',
        'unlock',
        'close',
        'create',
        'open',
        'read',
        'readDword',
        'readString',
        'write',
        'writeString',
        'start',
        'stop',
        'sys.getCurrentProcessId',
        'sys.getCurrentThreadId',
        'sys.getProcessImageName',
        'sys.getTimestamp',
        'sys.getPreciseTimestamp',
        'sys.formatTimestamp',
        'sys.sleep',
        'start',
        'wait',
        'waitAndClose',
        'terminate',
        'findName',
        'findValue',
        'getValue',
        'clear',
        'add',
        'format',
        'open',
        'close',
        'connect',
        'listen',
        'accept',
        'unsuspend',
        'serverHandshake',
        'read',
        'write',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'open',
        'close',
        'connect',
        'setIoctlDescTable',
        'read',
        'wait',
        'cancelWait',
        'blockingWait',
        'parse',
        'getString',
        'parse',
        'getString',
        'isEqual',
        'isMatch',
        'parse',
        'getString',
        'isEqual',
        'isMatch',
        'parse',
        'getString',
        'isEqual',
        'isMatch',
        'parse',
        'getString',
        'close',
        'unsuspend',
        'write',
        'read',
        'wait',
        'cancelWait',
        'blockingWait',
        'asyncWait',
        'open',
        'close',
        'getStringDesc',
        'attachKernelDriver',
        'detachKernelDriver',
        'claimInterface',
        'controlTransfer',
        'release',
        'openEndpoint',
        'io.getUsbClassString',
        'io.getUsbSpeedString',
        'io.getUsbTransferTypeString',
        'io.createUsbDeviceArray',
        'io.openUsbDevice',
    ],
    typeKeywords: [
        'auto',
        'anydata',
        'void',
        'variant',
        'bool',
        'int',
        'intptr',
        'char',
        'short',
        'long',
        'float',
        'double',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [
                /[a-zA-Z_][\w.]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
