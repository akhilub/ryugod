/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ';',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.b',
    keywords: [

    ],
    builtins: [
        'abs',
        'add',
        'all',
        'and',
        'any',
        'any-block',
        'any-word',
        'append',
        'assemble',
        'atan',
        'bind',
        'binding?',
        'break',
        'case',
        'catch',
        'change',
        'change-dir',
        'checksum',
        'clear',
        'collect',
        'complement',
        'compress',
        'construct',
        'continue',
        'copy',
        'cos',
        'cpu-cycles',
        'current-dir',
        'decode',
        'decompress',
        'delete',
        'difference',
        'dir?',
        'div',
        'do',
        'does',
        'either',
        'empty?',
        'encode',
        'encoding?',
        'equal?',
        'execute',
        'exists?',
        'exit',
        'find',
        'first',
        'forall',
        'foreach',
        'forever',
        'format',
        'free',
        'func',
        'ge?',
        'get',
        'getenv',
        'gt?',
        'halt',
        'hash',
        'head',
        'head?',
        'hostname',
        'if',
        'ifn',
        'in',
        'index?',
        'info?',
        'infuse',
        'insert',
        'intersect',
        'last',
        'le?',
        'load',
        'loop',
        'lowercase',
        'lt?',
        'make',
        'make-dir',
        'map',
        'mark-sol',
        'maximum',
        'minimum',
        'mod',
        'mold',
        'mul',
        'ne?',
        'negate',
        'next',
        'nop',
        'not',
        'now',
        'open',
        'or',
        'parse',
        'pick',
        'poke',
        'pop',
        'prev',
        'prin',
        'print',
        'probe',
        'quit',
        'random',
        'read',
        'recycle',
        'reduce',
        'remove',
        'remove-each',
        'rename',
        'reserve',
        'return',
        'reverse',
        'same?',
        'save',
        'second',
        'select',
        'serialize',
        'series?',
        'set',
        'set-addr',
        'setenv',
        'sin',
        'size?',
        'skip',
        'sleep',
        'slice',
        'sort',
        'split',
        'sqrt',
        'sub',
        'swap',
        'switch',
        'tail',
        'terminate',
        'third',
        'thread',
        'throw',
        'to-dec',
        'to-hex',
        'to-text',
        'trim',
        'try',
        'type?',
        'unbind',
        'union',
        'unserialize',
        'uppercase',
        'value?',
        'values-of',
        'wait',
        'while',
        'with-flock',
        'words-of',
        'write',
        'xor',
        'zero?',
    ],
    typeKeywords: [
        'unset!',
        'datatype!',
        'none!',
        'logic!',
        'word!',
        'lit-word',
        'set-word',
        'get-word',
        'option!',
        'char!',
        'int!',
        'double!',
        'coord!',
        'vec3!',
        'string!',
        'file!',
        'binary!',
        'bitset!',
        'time!',
        'vector!',
        'block!',
        'paren!',
        'path!',
        'lit-path',
        'set-path',
        'context!',
        'hash-map',
        'error!',
        'func!',
        'cfunc!',
        'port!',
        'u8',
        'i16',        
        'u16',
        'i32',
        'u32',
        'f32',
        'f64',
        'big-endian',
        'little-endian',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,;.]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[/'][a-zA-Z_][\w-]*/, 'variable'],
            [/[a-zA-Z_][\w-]*:/, 'tag'],
            [
                /[a-zA-Z_][\w-]*[!?]?/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(;.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody'],
            [/{/, 'string.escape', '@dblStringBody2']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody2: [
            [/[^\\}]+/, 'string'],
            [/\\./, 'string'],
            [/}/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
