/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.jx9',
    keywords: [
        'array',
        'as',
        'bool',
        'boolean',
        'break',
        'case',
        'class',
        'const',
        'continue',
        'default',
        'die',
        'do',
        'else',
        'elseif',
        'exit',
        'float',
        'for',
        'foreach',
        'function',
        'goto',
        'if',
        'import',
        'include',
        'int',
        'integer',
        'object',
        'print',
        'return',
        'static',
        'string',
        'switch',
        'uplink',
        'while',
    ],
    builtins: [
        'abs',
        'acos',
        'asin',
        'atan',
        'atan2',
        'base_convert',
        'base64_decode',
        'base64_encode',
        'basename',
        'bin2hex',
        'bindec',
        'ceil',
        'chop',
        'chr',
        'chunk_split',
        'closedir',
        'convert_uudecode',
        'convert_uuencode',
        'copy',
        'cos',
        'cosh',
        'crc32',
        'ctype_alnum',
        'ctype_alpha',
        'ctype_cntrl',
        'ctype_digit',
        'ctype_graph',
        'ctype_lower',
        'ctype_print',
        'ctype_punct',
        'ctype_space',
        'ctype_upper',
        'ctype_xdigit',
        'date',
        'decbin',
        'dechex',
        'decoct',
        'defined',
        'die',
        'dirname',
        'douleval',
        'dump',
        'empty',
        'exit',
        'exp',
        'explode',
        'extract',
        'fclose',
        'feof',
        'fflush',
        'fgetc',
        'fgetcsv',
        'fgets',
        'fgetss',
        'file_get_contents',
        'file_put_contents',
        'file',
        'floatval',
        'flock',
        'floor',
        'fmod',
        'fnmatch',
        'fopen',
        'fpassthru',
        'fprintf',
        'fputcsv',
        'fputs',
        'fread',
        'fseek',
        'fstat',
        'ftell',
        'ftruncate',
        'func_get_arg',
        'func_get_args',
        'func_num_args',
        'function_exists',
        'fwrite',
        'get_defined_constants',
        'get_defined_functions',
        'get_html_translation_table',
        'get_resource_type',
        'getdate',
        'getopt',
        'getrandmax',
        'gettimeofday',
        'gettype',
        'gmdate',
        'gmmktime',
        'hexdec',
        'html_entity_decode',
        'htmlentities',
        'htmlspecialchars_decode',
        'htmlspecialchars',
        'hypot',
        'idate',
        'implode_recursive',
        'implode',
        'import',
        'include',
        'intval',
        'is_array',
        'is_bool',
        'is_callable',
        'is_double',
        'is_float',
        'is_int',
        'is_integer',
        'is_long',
        'is_null',
        'is_numeric',
        'is_object',
        'is_real',
        'is_resource',
        'is_scalar',
        'is_string',
        'join_recursive',
        'join',
        'json_decode',
        'json_encode',
        'jx9_copyright',
        'jx9_credits',
        'jx9_info',
        'jx9_version',
        'localtime',
        'log',
        'log10',
        'ltrim',
        'mb_strtolower',
        'mb_strtoupper',
        'md5_file',
        'md5',
        'microtime',
        'mktime',
        'nl2br',
        'octdec',
        'opendir',
        'ord',
        'parse_ini_file',
        'parse_ini_string',
        'parse_url',
        'pathinfo',
        'pi',
        'pow',
        'print',
        'printf',
        'rand_str',
        'rand',
        'rawurldecode',
        'rawurlencode',
        'readdir',
        'readfile',
        'rewind',
        'rewinddir',
        'round',
        'rtrim',
        'sha1_file',
        'sha1',
        'sin',
        'sinh',
        'size_format',
        'soundex',
        'sprintf',
        'sqrt',
        'str_getcsv',
        'str_ireplace',
        'str_pad',
        'str_repeat',
        'str_replace',
        'str_split',
        'strcasecmp',
        'strchr',
        'strcmp',
        'strcoll',
        'strcspn',
        'strftime',
        'strglob',
        'strip_tags',
        'stripos',
        'stristr',
        'strlen',
        'strncasecmp',
        'strncmp',
        'strpbrk',
        'strpos',
        'strrchr',
        'strrev',
        'strripos',
        'strrpos',
        'strspn',
        'strstr',
        'strtok',
        'strtolower',
        'strtoupper',
        'strtr',
        'strval',
        'substr_compare',
        'substr_count',
        'substr',
        'tan',
        'tanh',
        'time',
        'trim',
        'urldecode',
        'urlencode',
        'utf8_decode',
        'utf8_encode',
        'vfprintf',
        'vprintf',
        'vsprintf',
        'wordwrap',
        'zip_close',
        'zip_entry_close',
        'zip_entry_compressedsize',
        'zip_entry_compressionmethod',
        'zip_entry_filesize',
        'zip_entry_name',
        'zip_entry_open',
        'zip_entry_read',
        'zip_entry_reset_read_cursor',
        'zip_open',
        'zip_read',
        'JX9_EOL',
    ],
    typeKeywords: [
        'null',
        'int',
        'float',
        'string',
        'bool',
        'resource',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\$[a-zA-Z_]\w*/, 'metatag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
