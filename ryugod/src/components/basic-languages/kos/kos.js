/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.kos',
    keywords: [
        '_',
        '__line__',
        'assert',
        'async',
        'break',
        'case',
        'catch',
        'class',
        'const',
        'constructor',
        'continue',
        'default',
        'defer',
        'delete',
        'do',
        'else',
        'extends',
        'fallthrough',
        'for',
        'fun',
        'get',
        'if',
        'import',
        'in',
        'instanceof',
        'loop',
        'match',
        'propertyof',
        'public',
        'repeat',
        'return',
        'set',
        'static',
        'super',
        'switch',
        'this',
        'throw',
        'try',
        'typeof',
        'var',
        'void',
        'while',
        'with',
        'yield',
    ],
    builtins: [
        'abs',
        'acos',
        'all',
        'any',
        'append',
        'append_flag',
        'apply',
        'array',
        'asin',
        'async',
        'atan',
        'backtrace',
        'boolean',
        'buffer',
        'cas',
        'ceil',
        'chdir',
        'class',
        'clear_cache',
        'close',
        'code',
        'collect_garbage',
        'copy_buffer',
        'cos',
        'count',
        'count_elements',
        'create',
        'create_flag',
        'cwd',
        'cycle',
        'datetime',
        'debug',
        'deep',
        'e',
        'each',
        'empty',
        'ends_with',
        'enumerate',
        'eof',
        'eol',
        'error',
        'exception',
        'execute',
        'exp',
        'expm1',
        'fd',
        'file',
        'file_exists',
        'file_lock',
        'file_lock.prototype.release',
        'fill',
        'filter',
        'find',
        'float',
        'floor',
        'flush',
        'fs',
        'function',
        'generator',
        'generator_end',
        'getenv',
        'hex',
        'indices',
        'infinity',
        'info',
        'insert',
        'insert_array',
        'instructions',
        'integer',
        'io',
        'iota',
        'iproduct',
        'is_infinity',
        'is_nan',
        'iter',
        'iterator',
        'join',
        'keys',
        'kos',
        'lexer',
        'line',
        'listdir',
        'ljust',
        'lock',
        'log',
        'log10',
        'log1p',
        'lowercase',
        'lstrip',
        'map',
        'math',
        'max',
        'method',
        'min',
        'mkdir',
        'name',
        'nan',
        'next',
        'now',
        'number',
        'object',
        'offset',
        'open',
        'os',
        'pack',
        'path_separator',
        'pi',
        'pipe',
        'pop',
        'position',
        'pow',
        'print',
        'print_lines',
        'process',
        'process.prototype.pid',
        'process.prototype.wait',
        'product',
        'push',
        'rand_float',
        'rand_integer',
        'random',
        'range',
        'raw_lexer',
        're',
        'read',
        'read_line',
        'read_lines',
        'read_some',
        'reduce',
        'registers',
        'remove',
        'repeat',
        'reserve',
        'resize',
        'reverse',
        'rfind',
        'rjust',
        'rmdir',
        'ro',
        'rscan',
        'rstrip',
        'rw',
        'scan',
        'seek',
        'shallow',
        'shuffle',
        'sin',
        'size',
        'slice',
        'sort',
        'spawn',
        'split',
        'split_lines',
        'sqrt',
        'starts_with',
        'state',
        'stderr',
        'stdin',
        'stdout',
        'string',
        'stringify',
        'strip',
        'sum',
        'sysname',
        'tan',
        'thread',
        'unpack',
        'uppercase',
        'version',
        'wait',
        'whitespace',
        'write',
        'zfill',
        'zip',
    ],
    typeKeywords: [
        'false',
        'true',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
