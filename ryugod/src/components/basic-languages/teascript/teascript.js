/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//', '#'],
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.tea',
    keywords: [
        'if',
        'else',
        'repeat',
        'forall',
        'in',
        'is',
        'as',
        'typename',
        'typeof',
        'func',
        'def',
        'const',
        'undef',
        'is_defined',
        'debug',
        'with',
        'stop',
        'loop',
        'return',
        'mod',
        'not',
        'or',
        'and',
        'false',
        'true',
        'suspend',
        'yield',
        '_Exit',
    ],
    builtins: [
        '_version_major',
        '_version_minor',
        '_version_patch',
        '_version_combined_number',
        '_version_build_date_time',
        '_api_version',
        'features',
        '_init_core_stamp',
        '_core_config',
        '_exit_success',
        '_exit_failure',
        'void',
        'PI',
        '_out',
        '_err',
        'print',
        'println',
        'readline',
        '_exit',
        '_strtonum',
        '_strtonumex',
        '_numtostr',
        '_f64toi64',
        'to_string',
        'to_number',
        '_eval',
        'eval_file',
        'fail',
        'fail_with_error',
        'fail_with_message',
        'clock',
        'clock_utc',
        '_timestamp',
        'sleep',
        'random',
        'min',
        'max',
        'clamp',
        'swap',
        'abs',
        'trunc',
        'floor',
        'ceil',
        'round',
        'pow',
        'sqrt',
        'timevals',
        'timetostr',
        'rolldice',
        'inc',
        'dec',
        '_seq',
        '_tuple_create',
        '_tuple_named_create',
        '_tuple_size',
        '_tuple_same_types',
        '_tuple_val',
        '_tuple_named_val',
        '_tuple_set',
        '_tuple_named_set',
        '_tuple_append',
        '_tuple_named_append',
        '_tuple_insert',
        '_tuple_named_insert',
        '_tuple_remove',
        '_tuple_named_remove',
        '_tuple_index_of',
        '_tuple_name_of',
        '_tuple_swap',
        'tuple_print',
        '_strlen',
        '_strglyphs',
        '_strglyphtobytepos',
        '_strat',
        '_strat',
        '_substr',
        '_strfind',
        '_strfindreverse',
        '_strreplacepos',
        'strreplacefirst',
        'strreplacelast',
        'strtrim',
        'strsplit',
        'strjoin',
        '_strfromascii',
        'utf8_begin',
        'utf8_end',
        'utf8_next',
        'cwd',
        'change_cwd',
        'tempdir',
        'path_exists',
        'file_exists',
        'file_size',
        'last_modified',
        'create_dir',
        'path_delete',
        'file_copy',
        'file_copy_newer',
        'readtextfile',
        'writetextfile',
        'readfile',
        'writefile',
        'readdirfirst',
        'readdirnext',
        'valid',
        'error',
        'path',
        'valid',
        'name',
        'size',
        'last_modified',
        'is_file',
        'is_dir',
        'path',
        '_handle',
        'readjsonstring',
        'readjsonfile',
        'writejsonstring',
        'writejsonfile',
        'json_is_object',
        'json_is_array',
        'json_object_size',
        'json_array_size',
        'json_make_object',
        'json_make_array',
        'json_array_empty',
        'json_array_append',
        'json_array_insert',
        'json_array_remove',
        'readtomlstring',
        'readtomlfile',
        'writetomlstring',
        'writetomlfile',
        'toml_is_table',
        'toml_is_array',
        'toml_table_size',
        'toml_array_size',
        'toml_make_table',
        'toml_make_array',
        'toml_array_empty',
        'toml_array_append',
        'toml_array_insert',
        'toml_array_remove',
        'make_rgb',
        'cprint',
        'cprintln',
        'format',
        '_buf',
        '_buf_size',
        '_buf_capacity',
        'buf_zero',
        '_buf_fill',
        '_buf_fill32',
        '_buf_resize',
        '_buf_copy',
        '_buf_at',
        '_buf_get_u8',
        '_buf_get_u16',
        '_buf_get_u32',
        '_buf_get_u64',
        '_buf_get_i8',
        '_buf_get_i16',
        '_buf_get_i32',
        '_buf_get_i64',
        '_buf_set_u8',
        '_buf_set_u16',
        '_buf_set_u32',
        '_buf_set_u64',
        '_buf_set_i8',
        '_buf_set_i16',
        '_buf_set_i32',
        '_buf_set_i64',
        '_buf_set_string',
        '_buf_get_string',
        '_buf_get_ascii',
    ],
    typeKeywords: [
        'TypeInfo',
        'i64',
        'f64',
        'u8',
        'u64',
        'Bool',
        'String',
        'Function',
        'Tuple',
        'IntegerSequence',
        'NaV',
        'Number',
        'Const',
        'Buffer',
        'eq',
        'ne',
        'gt',
        'lt',
        'ge',
        'le',
        'bit_and',
        'bit_or',
        'bit_xor',
        'bit_not',
        'bit_lsh',
        'bit_rsh',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/<\/?.*?>/, 'tag'],
            [/\$[a-zA-Z_]\w*/, 'variable'],
            [/\${.*?}/, 'variable'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/(#.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
