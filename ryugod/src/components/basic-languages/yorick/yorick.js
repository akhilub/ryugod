/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//'],
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        //{ open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        //{ open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.i',
    keywords: [
        'sizeof',
        'if',
        'else',
        'for',
        'do',
        'while',
        'break',
        'continue',
        'goto',
        'extern',
        'local',
        'func',
        'return',
    ],
    builtins: [        
        'animate',
        'array',
        'arrows',
        'aspect',
        'basis',
        'bessel',
        'bin',
        'binary',
        'binomial',
        'bookmark',
        'boundary',
        'brent',
        'bulirsch-stoer',
        'button',
        'calendar',
        'car',
        'case',
        'cdr',
        'chebyshev',
        'chi-square',
        'close',
        'color',
        'complex',
        'condition',
        'conjugate',
        'contour',
        'convolution',
        'copy',
        'copyright',
        'cos',
        'cosine',
        'cray',
        'cubic',
        'date',
        'dbexit',
        'debug',
        'decomposition',
        'derivative',
        'diffusion',
        'dimension',
        'disassemble',
        'display',
        'documentation',
        'double',
        'eigensystem',
        'eigenvalue',
        'eigenvector',
        'elliptic',
        'emacs',
        'enquire',
        'environment',
        'erfc',
        'error',
        'euler',
        'exponential',
        'extrapolation',
        'factorial',
        'factorization',
        'factorize',
        'fft',
        'file',
        'filesize',
        'fits',
        'fitting',
        'format',
        'fourier',
        'function',
        'gamma',
        'graphics',
        'grid',
        'hard',
        'harmonics',
        'hdf',
        'help',
        'histogram',
        'home',
        'hypergeometric',
        'ieee',
        'image',
        'imaginary',
        'index',
        'info',
        'integral',
        'integrate',
        'interpolate',
        'inverse',
        'keywords',
        'kolmogorov-smirnov',
        'lapack',
        'laplace',
        'least',
        'library',
        'line',
        'lisp',
        'list',
        'lower',
        'lu',
        'map',
        'marker',
        'match',
        'matrix',
        'merge',
        'mesh',
        'method',
        'minimization',
        'mouse',
        'movie',
        'netcdf',
        'newton-raphson',
        'number',
        'numerical',
        'ode',
        'open',
        'palette',
        'parse',
        'pause',
        'pixel',
        'plot',
        'plot',
        'poisson',
        'polynomial',
        'postscript',
        'ppm',
        'print',
        'printer',
        'qr',
        'random',
        'read',
        'real',
        'recipes',
        'record',
        'regression',
        'reshape',
        'restore',
        'roll',
        'roots',
        'runge-kutta',
        'save',
        'seed',
        'series',
        'shell',
        'simpson',
        'sin',
        'sine',
        'singular',
        'sort',
        'sound',
        'sparse',
        'spherical',
        'spline',
        'squares',
        'startup',
        'statistics',
        'string',
        'style',
        'surface',
        'tangent',
        'tensioned',
        'test',
        'time',
        'timer',
        'token',
        'transpose',
        'tridiagonal',
        'unix',
        'upper',
        'value',
        'vector',
        'viewport',
        'warranty',
        'waveform',
        'wavelet',
        'where',
        'window',
        'write',
        'write',
        'yplot',
        'zoom',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [/#(\s+)?[a-zA-Z_]\w*/, 'metatag'],
            [
                /@?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(^\/\/.*$)/, 'comment'],
            //[/(^#.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
