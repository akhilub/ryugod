/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: ';',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:for|if|else|while).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    ignoreCase: true,
    tokenPostfix: '.mps',
    keywords: [
        'BREAK',
        'CLOSE',
        'DO',
        'ELSE',
        'FOR',
        'GOTO',
        'HALT',
        'HANG',
        'IF',
        'JOB',
        'KILL',
        'LOCK',
        'MERGE',
        'NEW',
        'OPEN',
        'QUIT',
        'READ',
        'SET',
        'USE',
        'VIEW',
        'XECUTE',
        'CATCH',
        'CONTINUE',
        'ELSEIF',
        'TCOMMIT',
        'THROW',
        'TROLLBACK',
        'TRY',
        'TSTART',
        'WHILE',
    ],
    builtins: [
        'A',
        'ASCII',
        'B',
        'BIT',
        'BITCOUNT',
        'BITFIND',
        'BITLOGIC',
        'C',
        'CASE',
        'CHAR',
        'CHILD',
        'CLASSMETHOD',
        'CLASSNAME',
        'D',
        'DATA',
        'DECIMAL',
        'DEVICE',
        'DOUBLE',
        'E',
        'EC',
        'ECODE',
        'EOF',
        'ERROR',
        'ES',
        'ESTACK',
        'ET',
        'ETRAP',
        'EXTRACT',
        'F',
        'FACTOR',
        'FIND',
        'FN',
        'FNUMBER',
        'G',
        'GET',
        'H',
        'HALT',
        'HOROLOG',
        'I',
        'INCREMENT',
        'INUMBER',
        'IO',
        'ISOBJECT',
        'ISVALIDDOUBLE',
        'ISVALIDNUM',
        'J',
        'JOB',
        'JUSTIFY',
        'K',
        'KEY',
        'L',
        'LB',
        'LD',
        'LENGTH',
        'LF',
        'LFS',
        'LG',
        'LI',
        'LIST',
        'LISTBUILD',
        'LISTDATA',
        'LISTFIND',
        'LISTFROMSTRING',
        'LISTGET',
        'LISTLENGTH',
        'LISTNEXT',
        'LISTSAME',
        'LISTTOSTRING',
        'LISTVALID',
        'LL',
        'LOCATE',
        'LS',
        'LTS',
        'LV',
        'M',
        'MATCH',
        'METHOD',
        'MODE',
        'N',
        'NA',
        'NAME',
        'NAMESPACE',
        'NC',
        'NCONVERT',
        'NEXT',
        'NORMALIZE',
        'NOW',
        'NSPACE',
        'NUM',
        'NUMBER',
        'O',
        'ORDER',
        'P',
        'PARAMETER',
        'PARENT',
        'PI',
        'PIECE',
        'POS',
        'PREFETCHOFF',
        'PREFETCHON',
        'PRINCIPAL',
        'PROPERTY',
        'Q',
        'QL',
        'QLENGTH',
        'QS',
        'QSUBSCRIPT',
        'QUERY',
        'QUIT',
        'R',
        'RANDOM',
        'RE',
        'REFERENCE',
        'REPLACE',
        'REVERSE',
        'ROLES',
        'S',
        'SC',
        'SCONVERT',
        'SELECT',
        'SORTBEGIN',
        'SORTEND',
        'ST',
        'STACK',
        'STORAGE',
        'SYSTEM',
        'T',
        'TEST',
        'TEXT',
        'THIS',
        'TIMESTAMP',
        'TIMEZONE',
        'TL',
        'TLEVEL',
        'TR',
        'TRANSLATE',
        'TRAP',
        'TS',
        'TZ',
        'USERNAME',
        'V',
        'VERSION',
        'VIEW',
        'W',
        'WA',
        'WASCII',
        'WC',
        'WCHAR',
        'WE',
        'WEXTRACT',
        'WF',
        'WFIND',
        'WISWIDE',
        'WL',
        'WLENGTH',
        'WRE',
        'WREVERSE',
        'WRITE',
        'X',
        'XECUTE',
        'Y',
        'ZABS',
        'ZARCCOS',
        'ZARCSIN',
        'ZARCTAN',
        'ZCOS',
        'ZCOT',
        'ZCSC',
        'ZD',
        'ZDATE',
        'ZDATEH',
        'ZDATETIME',
        'ZDATETIMEH',
        'ZDH',
        'ZDT',
        'ZDTH',
        'ZEXP',
        'ZF',
        'ZH',
        'ZHEX',
        'ZLN',
        'ZLOG',
        'ZP',
        'ZPOWER',
        'ZPREVIOUS',
        'ZSEC',
        'ZSIN',
        'ZSQR',
        'ZT',
        'ZTAN',
        'ZTH',
        'ZTIME',
        'ZTIMEH',
        'ZU',
        'ZUTIL',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(;.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
