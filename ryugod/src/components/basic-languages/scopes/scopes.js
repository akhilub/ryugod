/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.scopes',
    keywords: [
        'else',
        'elseif',
        'then',
        'case',
        'pass',
        'default',
        'curly-list',
        'quote',
        'unquote-splice',
        'syntax-log',
        'in',
        'square-list',
        'options',
        'static',
        'plain',
        'packed',
        'new',
        'continue',
        'except',
        'define-infix',
        'this-function',
        'lslice',
        'rslice',
        'ln',
        'copy',
        'as',
        'raises',
        'returning',
        'unpack',
        'countof',
        'drop',
        'lose',
        'repr',
        'tostring',
        'dump',
        'globals',
        'assert',
        'define',
        'fn',
        'inline',
        'label',
        'sugar-quote',
        '_',
        'raise',
        'call',
        'rawcall',
        'do',
        'embed',
        'try',
        'return',
        'loop',
        'repeat',
        'break',
        'merge',
        'spice-quote',
        'spice-unquote',
        'spice-unquote-arguments',
        'let',
        'indirect-let',
        'if',
        'switch',
        '__this-scope',
        'run-stage',
        'sugar-log',
        'using"',
    ],
    builtins: [
        'script-launch-args',
        'compiler-version-string',
        'print-logo',
        'va-each',
        'va-zip',
        'gen-ptrtoglobal',
        'type__ptrtoglobal',
        'merge-scope-symbols',
        'popswap',
        'swap',
        'find-library',
        'constructor',
        'nested-union-field-accessor',
        'nested-struct-field-accessor',
        'CEnum.generate-repr',
        'defer-type',
        'typeinit',
        'typematcher',
        'trap',
        'debugtrap',
        'length',
        'build_matching_real_vector',
        'normalize',
        'distance',
        'cross',
        'step',
        'fsign',
        'radians',
        'degrees',
        'floorf',
        'mod',
        '&chararray?',
        'gen-allocator-sugar',
        '_memo',
        'memo',
        'io-write!',
        'compiler-version',
        'default-styler',
        'realpath',
        'set-globals!',
        'global-scope',
        'set-global-scope!',
        'exit',
        'launch-args',
        'set-signal-abort!',
        'list-load',
        'list-parse',
        'load-library',
        'load-object',
        'va-join',
        'infinite-range',
        'enumerate',
        'memoize',
        'type-factory',
        'sc_argument_list_join_values',
        'nodefault?',
        'spice-typematch?',
        'static-compile',
        'static-compile-glsl',
        'static-compile-spirv',
        'unpack*',
        'range',
        'rrange',
        'convert-assert-args',
        'make-unpack-function',
        'gen-tupleof',
        'gen-arrayof',
        'any?',
        'all?',
        'signed-vector-binary-op',
        'vector-binary-operator',
        'vector-binary-op-dispatch',
        'clamp',
        'extern-new',
        'extract-name-params-body',
        'check-count',
        'gen-match-block-parser',
        'gen-sugar-matcher',
        'uncomma',
        'gen-match-matcher',
        'gen-or-matcher',
        'compile',
        'compile-glsl',
        'compile-spirv',
        'compile-object',
        'tupleof',
        'arrayof',
        'vectorof',
        'min',
        'max',
        'va@',
        'movable?',
        'make-module-path',
        'exec-module',
        'dots-to-slashes',
        'cached-modules',
        'unload-all-modules',
        'load-module',
        'patterns-from-namestr',
        'slice',
        'find-module-path',
        'require-from',
        'gen-vector-reduction',
        'memcpy',
        'memset',
        'make-inplace-let-op',
        'make-inplace-op',
        'expand-apply',
        'next-head?',
        'sc_write',
        'gen-cast?',
        'function->SugarMacro',
        'sugar-block-scope-macro',
        'sugar-scope-macro',
        'sugar-macro',
        'empty?',
        'printrepr',
        'write',
        'print',
        'extract-integer',
        'extract-real',
        'string-array-ref-type?',
        'pointer-type-imply?',
        'pointer-imply',
        'pointer-as',
        'pointer-ras',
        'get-ifx-symbol',
        'expand-define-infix',
        'expand-define-greedy-infix',
        'make-expand-define-infix',
        'get-ifx-op',
        'unpack-infix-op',
        'has-greedy-infix-op?',
        'has-infix-ops?',
        'infix-op',
        'infix-op-gt',
        'infix-op-ge',
        'rtl-infix-op-eq',
        'parse-infix-expr',
        'has-rwrap-operator?',
        'expand-rwrap-expr',
        'parse-bind-expr',
        'parse-greedy-infix-expr',
        'dotted-symbol?',
        'split-dotted-symbol',
        'quasiquote-list',
        'quasiquote-any',
        'expand-and-or',
        'make-expand-and-or',
        'ltr-multiop',
        'rtl-multiop',
        'clone-scope-contents',
        'extract-single-arg',
        'extract-single-type-arg',
        'make-const-value-property-function',
        'make-const-type-property-function',
        'make-const-typename-property-function',
        'expand-define',
        'select-op-macro',
        'constant?',
        'mutable?',
        'signed?',
        'storageof',
        'superof',
        'sizeof',
        'bitcountof',
        'alignof',
        'list-handler',
        'symbol-handler',
        '#list',
        '#symbol',
        'unbox',
        'value-as',
        'spice-cast-macro',
        'spice-converter-macro',
        'integer-tobool',
        'safe-integer-cast',
        'integer-static-imply',
        'integer-imply',
        'integer-as',
        'real-imply',
        'real-as',
        'cast-error',
        'operator-valid?',
        'cast-converter',
        'imply-converter',
        'as-converter',
        'gen-cast-op',
        'unary-operator',
        'binary-operator',
        'binary-operator-r',
        'balanced-binary-operator',
        'balanced-lvalue-binary-operator',
        'unary-op-error',
        'binary-op-error',
        'balanced-binary-operation',
        'balanced-lvalue-binary-operation',
        'unbalanced-binary-operation',
        'unary-operation',
        'unary-or-balanced-binary-operation',
        'unary-or-unbalanced-binary-operation',
        'unary-op-dispatch',
        'unary-or-balanced-binary-op-dispatch',
        'unary-or-unbalanced-binary-op-dispatch',
        'balanced-binary-op-dispatch',
        'balanced-lvalue-binary-op-dispatch',
        'unbalanced-binary-op-dispatch',
        'spice-binary-op-macro',
        'simple-binary-op',
        'simple-folding-unary-op',
        'simple-folding-binary-op',
        'autoboxer',
        'simple-folding-autotype-binary-op',
        'simple-signed-binary-op',
        'simple-folding-signed-binary-op',
        'simple-folding-autotype-signed-binary-op',
        'string@',
        'dispatch-and-or',
        'powi',
        'intdiv',
        'abort',
        'fputs',
        'stdout',
        'stderr',
        'spice-macro-verify-signature',
        'function->SpiceMacro',
        'spice-macro',
        'box-spice-macro',
        'compare-type',
        'type-comparison-func',
        'sc_argument_list_map_new',
        'sc_argument_list_map_filter_new',
        'sc_argument_list_join',
        'aggregate-type-constructor',
        'runtime-aggregate-type-constructor',
        'unpack2',
        'none?',
        'type==',
        'cons',
        'build-typify-function',
        'prefix:str',
        'unbox-verify',
        'unbox-integer',
        'unbox-string',
        'unbox-symbol',
        'unbox-pointer',
        'verify-count',
        'Value-none?',
        'ptrcmp!=',
        'ptrcmp==',
        'box-integer',
        'box-symbol',
        'box-pointer',
        'error',
        'error@',
        'error@+',
        'sc_compiler_version',
        'sc_cache_misses',
        'sc_expand',
        'sc_eval',
        'sc_eval_stage',
        'sc_prove',
        'sc_eval_inline',
        'sc_typify_template',
        'sc_typify',
        'sc_compile',
        'sc_set_compile_handler',
        'sc_compile_spirv',
        'sc_compile_glsl',
        'sc_spirv_to_glsl',
        'sc_default_target_triple',
        'sc_compile_object',
        'sc_enter_solver_cli',
        'sc_launch_args',
        'sc_set_typecast_handler',
        'sc_prompt_set_autocomplete_handler',
        'sc_get_address',
        'sc_prompt',
        'sc_prompt_save_history',
        'sc_prompt_load_history',
        'sc_prompt_add_completion',
        'sc_prompt_add_completion_from_scope',
        'sc_default_styler',
        'sc_format_message',
        'sc_value_repr',
        'sc_value_content_repr',
        'sc_value_ast_repr',
        'sc_value_tostring',
        'sc_value_type',
        'sc_value_qualified_type',
        'sc_value_anchor',
        'sc_valueref_tag',
        'sc_value_is_constant',
        'sc_value_is_pure',
        'sc_value_compare',
        'sc_value_kind',
        'sc_value_block_depth',
        'sc_identity',
        'sc_value_wrap',
        'sc_value_unwrap',
        'sc_value_kind_string',
        'sc_keyed_new',
        'sc_empty_argument_list',
        'sc_argument_list_new',
        'sc_extract_argument_new',
        'sc_extract_argument_list_new',
        'sc_argcount',
        'sc_getarg',
        'sc_getarglist',
        'sc_template_new',
        'sc_template_set_name',
        'sc_template_get_name',
        'sc_template_append_parameter',
        'sc_template_set_body',
        'sc_template_get_body',
        'sc_template_set_docstring',
        'sc_template_set_inline',
        'sc_template_set_anchor',
        'sc_template_is_inline',
        'sc_template_is_hidden',
        'sc_template_is_forward_decl',
        'sc_template_parameter_count',
        'sc_template_parameter',
        'sc_expression_new',
        'sc_expression_set_scoped',
        'sc_expression_append',
        'sc_expression_complete',
        'sc_global_new',
        'sc_global_set_initializer',
        'sc_global_set_constructor',
        'sc_global_set_location',
        'sc_global_set_binding',
        'sc_global_set_descriptor_set',
        'sc_global_location',
        'sc_global_binding',
        'sc_global_descriptor_set',
        'sc_global_storage_class',
        'sc_global_name',
        'sc_global_flags',
        'sc_global_initializer',
        'sc_global_constructor',
        'sc_pure_cast_new',
        'sc_cond_new',
        'sc_case_new',
        'sc_pass_case_new',
        'sc_do_case_new',
        'sc_default_case_new',
        'sc_switch_new',
        'sc_switch_append',
        'sc_switch_append_case',
        'sc_switch_append_pass',
        'sc_switch_append_do',
        'sc_switch_append_default',
        'sc_parameter_new',
        'sc_parameter_is_variadic',
        'sc_parameter_name',
        'sc_call_new',
        'sc_call_append_argument',
        'sc_call_is_rawcall',
        'sc_call_set_rawcall',
        'sc_loop_new',
        'sc_loop_arguments',
        'sc_loop_set_body',
        'sc_const_int_new',
        'sc_const_int_words_new',
        'sc_const_real_new',
        'sc_const_aggregate_new',
        'sc_const_pointer_new',
        'sc_const_null_new',
        'sc_const_int_extract',
        'sc_const_int_extract_word',
        'sc_const_int_word_ptr',
        'sc_const_int_word_count',
        'sc_const_real_extract',
        'sc_const_extract_at',
        'sc_const_pointer_extract',
        'sc_const_pointer_to_global',
        'sc_const_string_new',
        'sc_const_string_extract',
        'sc_quote_new',
        'sc_unquote_new',
        'sc_label_new',
        'sc_label_set_body',
        'sc_merge_new',
        'sc_compile_stage_new',
        'sc_is_file',
        'sc_is_directory',
        'sc_realpath',
        'sc_dirname',
        'sc_basename',
        'sc_get_globals',
        'sc_get_original_globals',
        'sc_set_globals',
        'sc_error_append_calltrace',
        'sc_error_new',
        'sc_format_error',
        'sc_dump_error',
        'sc_abort',
        'sc_exit',
        'sc_set_signal_abort',
        'sc_map_get',
        'sc_map_set',
        'sc_hash',
        'sc_hash2x64',
        'sc_hashbytes',
        'sc_import_c',
        'sc_load_library',
        'sc_load_object',
        'sc_scope_at',
        'sc_scope_local_at',
        'sc_scope_module_docstring',
        'sc_scope_docstring',
        'sc_scope_bind',
        'sc_scope_bind_with_docstring',
        'sc_scope_new',
        'sc_scope_new_with_docstring',
        'sc_scope_reparent',
        'sc_scope_unparent',
        'sc_scope_new_subscope',
        'sc_scope_new_subscope_with_docstring',
        'sc_scope_get_parent',
        'sc_scope_unbind',
        'sc_scope_next',
        'sc_scope_any_next',
        'sc_scope_next_deleted',
        'sc_symbol_new',
        'sc_symbol_new_unique',
        'sc_symbol_to_string',
        'sc_symbol_is_variadic',
        'sc_symbol_count',
        'sc_symbol_style',
        'sc_string_new',
        'sc_string_new_from_cstr',
        'sc_string_join',
        'sc_string_match',
        'sc_string_count',
        'sc_string_compare',
        'sc_string_buffer',
        'sc_string_lslice',
        'sc_string_rslice',
        'sc_string_unescape',
        'sc_type_at',
        'sc_type_local_at',
        'sc_type_get_docstring',
        'sc_type_set_docstring',
        'sc_type_element_at',
        'sc_type_field_index',
        'sc_type_field_name',
        'sc_type_sizeof',
        'sc_type_alignof',
        'sc_type_offsetof',
        'sc_type_countof',
        'sc_type_is_unsized',
        'sc_type_kind',
        'sc_type_debug_abi',
        'sc_type_storage',
        'sc_type_is_opaque',
        'sc_type_is_plain',
        'sc_type_is_superof',
        'sc_type_compatible',
        'sc_type_is_default_suffix',
        'sc_type_string',
        'sc_type_next',
        'sc_type_set_symbol',
        'sc_type_del_symbol',
        'sc_type_is_refer',
        'sc_type_is_view',
        'sc_type_is_unique',
        'sc_view_id_count',
        'sc_view_id_at',
        'sc_type_key',
        'sc_key_type',
        'sc_pointer_type',
        'sc_pointer_type_get_flags',
        'sc_pointer_type_set_flags',
        'sc_pointer_type_get_storage_class',
        'sc_pointer_type_set_storage_class',
        'sc_pointer_type_set_element_type',
        'sc_type_bitcountof',
        'sc_integer_type',
        'sc_integer_type_is_signed',
        'sc_typename_type',
        'sc_typename_type_get_name',
        'sc_typename_type_get_original_name',
        'sc_typename_type_get_super',
        'sc_typename_type_set_storage',
        'sc_typename_type_set_opaque',
        'sc_typename_type_is_complete',
        'sc_array_type',
        'sc_array_type_set_zterm',
        'sc_array_type_is_zterm',
        'sc_array_type_set_count',
        'sc_vector_type',
        'sc_matrix_type',
        'sc_tuple_type',
        'sc_packed_tuple_type',
        'sc_union_storage_type',
        'sc_tuple_type_is_packed',
        'sc_arguments_type',
        'sc_arguments_type_join',
        'sc_arguments_type_argcount',
        'sc_arguments_type_getarg',
        'sc_arguments_type_to_tuple_type',
        'sc_view_type',
        'sc_unique_type',
        'sc_mutate_type',
        'sc_refer_type',
        'sc_refer_flags',
        'sc_refer_storage_class',
        'sc_strip_qualifiers',
        'sc_image_type',
        'sc_sampled_image_type',
        'sc_function_type_is_variadic',
        'sc_function_type',
        'sc_function_type_raising',
        'sc_function_type_return_type',
        'sc_list_cons',
        'sc_list_dump',
        'sc_list_repr',
        'sc_list_serialize',
        'sc_list_join',
        'sc_list_decons',
        'sc_list_count',
        'sc_list_at',
        'sc_list_next',
        'sc_list_reverse',
        'sc_list_compare',
        'sc_anchor_new',
        'sc_anchor_path',
        'sc_anchor_lineno',
        'sc_anchor_column',
        'sc_anchor_get_offset',
        'sc_anchor_offset',
        'sc_closure_get_docstring',
        'sc_closure_get_template',
        'sc_closure_get_context',
        'sc_closure_transplant',
        'sc_parse_from_path',
        'sc_parse_from_string',
        'sc_typed_value_body_count',
        'sc_typed_value_body',
        'sc_typed_value_name',
        'sc_typed_value_attribute_group_count',
        'sc_typed_value_attribute_count',
        'sc_typed_value_attribute_at',
        'sc_typed_value_op_kind',
        'sc_typed_value_index_count',
        'sc_typed_value_index',
        'sc_block_instruction_count',
        'sc_block_get_instruction',
        'sc_block_terminator',
        'sc_block_is_terminated',
        'raising',
        'branch',
        'dump-template',
        'dump-debug',
        'dump-spice',
        'dump-uniques',
        'alloca',
        'malloc',
        'free',
        'alloca-array',
        'malloc-array',
        'dupe',
        'move',
        'view',
        'viewing',
        'dropped?',
        'assign',
        'deref',
        'ptrtoref',
        'reftoptr',
        'hide-traceback',
        'unique-visible?',
        'icmp==',
        'icmp!=',
        'sample',
        'Image-read',
        'Image-write',
        '__drop',
        'Image-query-size',
        'Image-query-lod',
        'Image-query-levels',
        'Image-query-samples',
        'Image-texel-pointer',
        'cmpxchg',
        '__barrier',
        'atomicrmw',
        'atomic',
        'volatile',
        'icmp>u',
        'icmp>=u',
        'icmp<u',
        'icmp<=u',
        'icmp>s',
        'icmp>=s',
        'icmp<s',
        'icmp<=s',
        'fcmp==o',
        'fcmp!=o',
        'fcmp-ord',
        'fcmp>o',
        'fcmp>=o',
        'fcmp<o',
        'fcmp<=o',
        'fcmp==u',
        'fcmp!=u',
        'fcmp-uno',
        'fcmp>u',
        'fcmp>=u',
        'fcmp<u',
        'fcmp<=u',
        'typeof',
        'bitcast',
        'inttoptr',
        'ptrtoint',
        'load',
        'store',
        'volatile-load',
        'volatile-store',
        'set-execution-mode',
        'extractelement',
        'insertelement',
        'shufflevector',
        'extractvalue',
        'insertvalue',
        'swapvalue',
        'itrunc',
        'zext',
        'sext',
        'getelementref',
        'getelementptr',
        'offsetof',
        'va-countof',
        'undef',
        'nullof',
        'discard',
        'unreachable',
        'fptrunc',
        'fpext',
        'fptoui',
        'fptosi',
        'uitofp',
        'sitofp',
        'add',
        'add-nuw',
        'add-nsw',
        'sub',
        'sub-nuw',
        'sub-nsw',
        'mul',
        'mul-nuw',
        'mul-nsw',
        'sdiv',
        'udiv',
        'srem',
        'urem',
        'shl',
        'lshr',
        'ashr',
        'band',
        'bor',
        'bxor',
        'bitreverse',
        'bitcount',
        'findmsb',
        'findlsb',
        'fneg',
        'fadd',
        'fsub',
        'fmul',
        'fdiv',
        'frem',
        'bnand',
        'smin',
        'smax',
        'umin',
        'umax',
        'xchg',
        '?',
        'fmix',
        'round',
        'roundeven',
        'trunc',
        'fabs',
        'ssign',
        'floor',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        'atan2',
        'exp',
        'log',
        'exp2',
        'log2',
        'powf',
        'sqrt',
        'inversesqrt',
        'fma',
        'frexp',
        'ldexp',
        'parse-number',
        'console',
        '__call',
        'integer->string',
        'bin',
        'oct',
        'dec',
        'hex',
        'dot',
        'transpose',
        'image1D',
        'image2D',
        'image3D',
        'imageCube',
        'image2DRect',
        'image1DArray',
        'image2DArray',
        'imageCubeArray',
        'imageBuffer',
        'image2DMS',
        'image2DMSArray',
        'iimage1D',
        'iimage2D',
        'iimage3D',
        'iimageCube',
        'iimage2DRect',
        'iimage1DArray',
        'iimage2DArray',
        'iimageCubeArray',
        'iimageBuffer',
        'iimage2DMS',
        'iimage2DMSArray',
        'uimage1D',
        'uimage2D',
        'uimage3D',
        'uimageCube',
        'uimage2DRect',
        'uimage1DArray',
        'uimage2DArray',
        'uimageCubeArray',
        'uimageBuffer',
        'uimage2DMS',
        'uimage2DMSArray',
        'texelFetch',
        'texelFetchOffset',
        'texture',
        'textureProj',
        'textureLod',
        'textureOffset',
        'textureGather',
        'textureSize',
        'textureQueryLod',
        'textureQueryLevels',
        'textureSamples',
        'imageLoad',
        'imageStore',
        'imageSize',
        'local_size',
        'EmitVertex',
        'EndPrimitive',
        'packHalf2x16',
        'packUnorm2x16',
        'packSnorm2x16',
        'packUnorm4x8',
        'packSnorm4x8',
        'unpackHalf2x16',
        'unpackUnorm2x16',
        'unpackSnorm2x16',
        'unpackUnorm4x8',
        'unpackSnorm4x8',
        'atomicExchange',
        'atomicAdd',
        'atomicAnd',
        'atomicOr',
        'atomicXor',
        'atomicMin',
        'atomicMax',
        'atomicCompSwap',
        'barrier',
        'memoryBarrier',
        'groupMemoryBarrier',
        'memoryBarrierImage',
        'memoryBarrierBuffer',
        'memoryBarrierShared',
        'dim',
        'bitdim',
        'imap',
        'ipair',
        'zip',
        'collect',
        'each',
        'cat',
        'flatten',
        'map',
        'reduce',
        'limit',
        'gate',
        'filter',
        'take',
        'cascade',
        'mux',
        'demux',
        'retain',
        'permutate-range',
        'closest',
        'property',
        'parse-argument-matcher',
        'gen-argument-matcher',
        'encoder',
        'decoder"',
    ],
    typeKeywords: [
        'this-type',
        'super-type',
        'TypeInitializer',
        'MethodsAccessor',
        '&chararray',
        'nodefault',
        'OverloadedFunction',
        'incomplete',
        'hash',
        'SugarMacroFunction',
        'Struct',
        'Generator',
        'Collector',
        'SugarMacro',
        'NullType',
        'Accessor',
        'void',
        'TypeArrayPointer',
        'ValueArrayPointer',
        'SpiceMacroFunction',
        'intptr',
        'rawstring',
        'voidstar',
        'Nothing',
        'noreturn',
        'type',
        'Unknown',
        'Variadic',
        'Symbol',
        'Builtin',
        '_Value',
        'Value',
        'ValueKind',
        'TypeKind',
        'bool',
        'i8',
        'i16',
        'i32',
        'i64',
        'u8',
        'u16',
        'u32',
        'u64',
        'f16',
        'f32',
        'f64',
        'f80',
        'f128',
        'char',
        'list',
        'Anchor',
        'string',
        'Scope',
        'SourceFile',
        'Error',
        'Closure',
        'SpiceMacro',
        'CompileStage',
        'usize',
        'Sampler',
        'PtrToGlobalFunction',
        'immutable',
        'aggregate',
        'opaquepointer',
        'integer',
        'real',
        'pointer',
        'array',
        'zarray',
        'vector',
        'matrix',
        'tuple',
        'union',
        'Qualify',
        'typename',
        'Arguments',
        'Raises',
        'function',
        'constant',
        'Image',
        'SampledImage',
        'CStruct',
        'CUnion',
        'CEnum',
        'Array',
        'FixedArray',
        'GrowingArray',
        'Box',
        'Capture',
        'CaptureTemplate',
        'SpiceCapture',
        'read-eval-print-loop',
        'docstring',
        'helpstring',
        'Enum',
        'FunctionChain',
        'vec-type',
        'mat-type',
        'gvec2',
        'gvec3',
        'gvec4',
        'vec2',
        'dvec2',
        'ivec2',
        'uvec2',
        'bvec2',
        'vec3',
        'dvec3',
        'ivec3',
        'uvec3',
        'bvec3',
        'vec4',
        'dvec4',
        'ivec4',
        'uvec4',
        'bvec4',
        'mat2x2',
        'dmat2x2',
        'imat2x2',
        'umat2x2',
        'bmat2x2',
        'mat2x3',
        'dmat2x3',
        'imat2x3',
        'umat2x3',
        'bmat2x3',
        'mat2x4',
        'dmat2x4',
        'imat2x4',
        'umat2x4',
        'bmat2x4',
        'mat2',
        'dmat2',
        'imat2',
        'umat2',
        'bmat2',
        'mat3x2',
        'dmat3x2',
        'imat3x2',
        'umat3x2',
        'bmat3x2',
        'mat3x3',
        'dmat3x3',
        'imat3x3',
        'umat3x3',
        'bmat3x3',
        'mat3x4',
        'dmat3x4',
        'imat3x4',
        'umat3x4',
        'bmat3x4',
        'mat3',
        'dmat3',
        'imat3',
        'umat3',
        'bmat3',
        'mat4x2',
        'dmat4x2',
        'imat4x2',
        'umat4x2',
        'bmat4x2',
        'mat4x3',
        'dmat4x3',
        'imat4x3',
        'umat4x3',
        'bmat4x3',
        'mat4x4',
        'dmat4x4',
        'imat4x4',
        'umat4x4',
        'bmat4x4',
        'mat4',
        'dmat4',
        'imat4',
        'umat4',
        'bmat4',
        'gsampler1D',
        'gsampler2D',
        'gsampler3D',
        'gsamplerCube',
        'gsampler2DRect',
        'gsampler1DArray',
        'gsampler2DArray',
        'gsamplerCubeArray',
        'gsamplerBuffer',
        'gsampler2DMS',
        'gsampler2DMSArray',
        'texture1D',
        'sampler1D',
        'texture2D',
        'sampler2D',
        'texture3D',
        'sampler3D',
        'textureCube',
        'samplerCube',
        'texture2DRect',
        'sampler2DRect',
        'texture1DArray',
        'sampler1DArray',
        'texture2DArray',
        'sampler2DArray',
        'textureCubeArray',
        'samplerCubeArray',
        'textureBuffer',
        'samplerBuffer',
        'texture2DMS',
        'sampler2DMS',
        'texture2DMSArray',
        'sampler2DMSArray',
        'itexture1D',
        'isampler1D',
        'itexture2D',
        'isampler2D',
        'itexture3D',
        'isampler3D',
        'itextureCube',
        'isamplerCube',
        'itexture2DRect',
        'isampler2DRect',
        'itexture1DArray',
        'isampler1DArray',
        'itexture2DArray',
        'isampler2DArray',
        'itextureCubeArray',
        'isamplerCubeArray',
        'itextureBuffer',
        'isamplerBuffer',
        'itexture2DMS',
        'isampler2DMS',
        'itexture2DMSArray',
        'isampler2DMSArray',
        'utexture1D',
        'usampler1D',
        'utexture2D',
        'usampler2D',
        'utexture3D',
        'usampler3D',
        'utextureCube',
        'usamplerCube',
        'utexture2DRect',
        'usampler2DRect',
        'utexture1DArray',
        'usampler1DArray',
        'utexture2DArray',
        'usampler2DArray',
        'utextureCubeArray',
        'usamplerCubeArray',
        'utextureBuffer',
        'usamplerBuffer',
        'utexture2DMS',
        'usampler2DMS',
        'utexture2DMSArray',
        'usampler2DMSArray',
        'sampler',
        'gsampler',
        'smoothstep',
        'dFdx',
        'dFdy',
        'fwidth',
        'findLSB',
        'ceil',
        'fract',
        'DispatchIndirectCommand',
        'DrawArraysIndirectCommand',
        'iterbits',
        'Map',
        'MapError',
        'Option',
        'UnwrapError',
        'Property',
        'Rc',
        'Weak',
        'UpgradeError',
        'Set',
        'String',
        'Switcher',
        'One',
        'true',
        'false',
        'null',
        'none',
        'unnamed',
        'pi',
        '-pi',
        'pi:f32',
        '-pi:f32',
        'pi:f64',
        '-pi:f64',
        'e',
        '-e',
        'e:f32',
        '-e:f32',
        'e:f64',
        '-e:f64',
        '+inf',
        '-inf',
        'nan',
        'Inf',
        '-Inf',
        'NaN',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[-a-zA-Z_][\w-:!=]*/, 'tag'],
            [
                /[-a-zA-Z_][\w-:!=]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
