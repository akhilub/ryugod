/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//', '#'],
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.ds',
    keywords: [
        'alias',
        'appendfile',
        'array',
        'array_clear',
        'array_concat',
        'array_contains',
        'array_get',
        'array_is_empty',
        'array_join',
        'array_length',
        'arrlen',
        'array_size',
        'array_pop',
        'array_push',
        'array_add',
        'array_put',
        'array_remove',
        'array_set',
        'assert',
        'assert_eq',
        'assert_error',
        'assert_fail',
        'assert_false',
        'base64',
        'base64_decode',
        'base64_encode',
        'basename',
        'bytes_to_string',
        'calc',
        'camelcase',
        'canonicalize',
        'cat',
        'cd',
        'set_current_dir',
        'set_current_directory',
        'chmod',
        'clear_scope',
        'concat',
        'contains',
        'cp',
        'cpu_count',
        'get_cpu_count',
        'current_time',
        'digest',
        'dirname',
        'duckscript_sdk_version',
        'duckscript_version',
        'dump_instructions',
        'dump_state',
        'dump_variables',
        'echo',
        'ends_with',
        'env_to_map',
        'equals',
        'eq',
        'eval',
        'exec',
        'exit_on_error',
        'set_exit_on_error',
        'exit',
        'quit',
        'q',
        'for',
        'ftp_get',
        'ftp_get_in_memory',
        'ftp_list',
        'ftp_nlst',
        'ftp_put',
        'ftp_put_in_memory',
        'function',
        'fn',
        'get_all_var_names',
        'get_by_name',
        'get_env',
        'get_home_dir',
        'get_last_error',
        'get_last_error_line',
        'get_last_error_source',
        'get_last_modified_time',
        'gitignore_path_array',
        'glob_array',
        'globarray',
        'glob_chmod',
        'chmod_glob',
        'glob_cp',
        'cp_glob',
        'goto',
        'greater_than',
        'hex_decode',
        'hex_encode',
        'hostname',
        'http_client',
        'if',
        'indexof',
        'is_array',
        'is_command_defined',
        'is_defined',
        'is_directory',
        'is_dir',
        'is_empty',
        'is_file',
        'is_map',
        'is_path_exists',
        'is_path_newer',
        'is_readonly',
        'is_set',
        'is_windows',
        'join_path',
        'json_encode',
        'json_parse',
        'kebabcase',
        'last_indexof',
        'length',
        'strlen',
        'less_than',
        'lowercase',
        'ls',
        'man',
        'map',
        'map_clear',
        'map_contains_key',
        'map_contains_value',
        'map_get',
        'map_is_empty',
        'map_keys',
        'map_load_properties',
        'map_put',
        'map_add',
        'map_remove',
        'map_size',
        'map_to_properties',
        'mkdir',
        'mv',
        'noop',
        'not',
        'os_family',
        'os_name',
        'os_release',
        'os_version',
        'pid',
        'process_id',
        'print_env',
        'printenv',
        'pwd',
        'print_current_directory',
        'random_range',
        'rand_range',
        'random_text',
        'rand_text',
        'range',
        'read',
        'readbinfile',
        'read_binary_file',
        'readfile',
        'read_text_file',
        'read_properties',
        'release',
        'remove_command',        
        'replace',
        'return',
        'end',
        'rm',
        'rmdir',
        'in',
        'scope_pop_stack',
        'scope_push_stack',
        'semver_is_equal',
        'semver_is_newer',
        'semver_parse',
        'set',
        'set_by_name',
        'set_clear',
        'set_contains',
        'set_env',
        'set_error',
        'set_from_array',
        'set_is_empty',
        'set_new',
        'set_put',
        'set_add',
        'set_remove',
        'set_size',
        'set_to_array',
        'sha256sum',
        'sha256sum',
        'sha512sum',
        'sha512sum',
        'sleep',
        'snakecase',
        'spawn',
        'split',
        'starts_with',
        'string_to_bytes',
        'substring',
        'temp_dir',
        'temp_file',
        'test_directory',
        'test_file',
        'touch',
        'trigger_error',
        'trim',
        'trim_end',
        'trim_start',
        'unalias',
        'uname',
        'unset',
        'unset_all_vars',
        'unset_env',
        'uppercase',
        'watchdog',
        'wget',
        'which',
        'while',
        'whoami',
        'get_user_name',
        'writebinfile',
        'write_binary_file',
        'writefile',
        'write_text_file',
        'write_properties',
    ],
    builtins: [

    ],
    typeKeywords: [
        'true',
        'yes',
        'false',
        'no',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\${?[a-zA-Z_0-9]+}?/, 'string'],
            [/![a-zA-Z_]\w*/, 'tag'],
            [/^[a-zA-Z_]\w*:/, 'metatag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
            [/(\/\/.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
