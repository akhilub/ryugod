/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.dot',
    keywords: [
        'node',
        'edge',
        'graph',
        'digraph',
        'subgraph',
        'strict'
    ],
    builtins: [
        '_background',
        'area',
        'arrowhead',
        'arrowsize',
        'arrowtail',
        'bb',
        'beautify',
        'bgcolor',
        'center',
        'charset',
        'class',
        'cluster',
        'clusterrank',
        'color',
        'colorscheme',
        'comment',
        'compound',
        'concentrate',
        'constraint',
        'Damping',
        'decorate',
        'defaultdist',
        'dim',
        'dimen',
        'dir',
        'diredgeconstraints',
        'distortion',
        'dpi',
        'edgehref',
        'edgetarget',
        'edgetooltip',
        'edgeURL',
        'epsilon',
        'esep',
        'fillcolor',
        'black',
        'fixedsize',
        'fontcolor',
        'fontname',
        'fontnames',
        'fontpath',
        'fontsize',
        'forcelabels',
        'gradientangle',
        'group',
        'head_lp',
        'headclip',
        'headhref',
        'headlabel',
        'headport',
        'headtarget',
        'headtooltip',
        'headURL',
        'height',
        'href',
        'id',
        'image',
        'imagepath',
        'imagepos',
        'imagescale',
        'inputscale',
        'K',
        'label',
        'label_scheme',
        'labelangle',
        'labeldistance',
        'labelfloat',
        'labelfontcolor',
        'labelfontname',
        'labelfontsize',
        'labelhref',
        'labeljust',
        'labelloc',
        'labeltarget',
        'labeltooltip',
        'labelURL',
        'landscape',
        'layer',
        'layerlistsep',
        'layers',
        'layerselect',
        'layersep',
        'layout',
        'len',
        'levels',
        'levelsgap',
        'lhead',
        'lheight',
        'linelength',
        'lp',
        'ltail',
        'lwidth',
        'margin',
        'maxiter',
        'mclimit',
        'mindist',
        'minlen',
        'mode',
        'model',
        'newrank',
        'nodesep',
        'nojustify',
        'normalize',
        'notranslate',
        'nslimit',
        'nslimit1',
        'oneblock',
        'ordering',
        'orientation',
        'outputorder',
        'overlap',
        'overlap_scaling',
        'overlap_shrink',
        'pack',
        'packmode',
        'pad',
        'page',
        'pagedir',
        'pencolor',
        'penwidth',
        'peripheries',
        'pin',
        'pos',
        'quadtree',
        'quantum',
        'rank',
        'rankdir',
        'ranksep',
        'ratio',
        'rects',
        'regular',
        'remincross',
        'repulsiveforce',
        'resolution',
        'root',
        'false',
        'rotate',
        'rotation',
        'samehead',
        'sametail',
        'samplepoints',
        'scale',
        'searchsize',
        'sep',
        'shape',
        'shapefile',
        'showboxes',
        'sides',
        'size',
        'skew',
        'smoothing',
        'sortv',
        'splines',
        'start',
        'style',
        'stylesheet',
        'tail_lp',
        'tailclip',
        'tailhref',
        'taillabel',
        'tailport',
        'tailtarget',
        'tailtooltip',
        'tailURL',
        'target',
        'TBbalance',
        'tooltip',
        'truecolor',
        'vertices',
        'viewport',
        'voro_margin',
        'weight',
        'width',
        'xdotversion',
        'xlabel',
        'xlp',
        'z',
    ],
    typeKeywords: [
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
