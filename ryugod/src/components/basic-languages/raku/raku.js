/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '#',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.raku',
    keywords: [
        'after',
        'also',
        'and',
        'andthen',
        'atomicint',
        'bag',
        'before',
        'bit',
        'bool',
        'break',
        'buf',
        'buf1',
        'buf16',
        'buf2',
        'buf32',
        'buf4',
        'buf64',
        'buf8',
        'cmp',
        'complex',
        'constant',
        'continue',
        'default',
        'die',
        'div',
        'do',
        'done',
        'else',
        'elsif',
        'eq',
        'eqv',
        'exit',
        'experimental',
        'extra',
        'fail',
        'fatal',
        'ff',
        'fff',
        'for',
        'gather',
        'gcd',
        'ge',
        'given',
        'goto',
        'gt',
        'has',
        'hyper',
        'if',
        'int',
        'int1',
        'int16',
        'int2',
        'int32',
        'int4',
        'int64',
        'int8',
        'isms',
        'last',
        'lcm',
        'le',
        'leave',
        'leg',
        'let',
        'lib',
        'long',
        'longlong',
        'loop',
        'lt',
        'make',
        'max',
        'min',
        'minmax',
        'mix',
        'mod',
        'my',
        'ne',
        'newline',
        'next',
        'not',
        'notandthen',
        'nqp',
        'num',
        'num32',
        'num64',
        'o',
        'once',
        'or',
        'orelse',
        'orwith',
        'our',
        'Pointer',
        'precompilation',
        'proceed',
        'quietly',
        'race',
        'rat',
        'rat1',
        'rat16',
        'rat2',
        'rat32',
        'rat4',
        'rat64',
        'rat8',
        'react',
        'redo',
        'repeat',
        'require',
        'return-rw',
        'return',
        'set',
        'size_t',
        'so',
        'soft',
        'ssize_t',
        'start',
        'state',
        'str',
        'strict',
        'sub',
        'succeed',
        'supply',
        'take',
        'temp',
        'trace',
        'try',
        'uint',
        'uint1',
        'uint16',
        'uint2',
        'uint32',
        'uint4',
        'uint64',
        'uint8',
        'ulong',
        'ulonglong',
        'unicmp',
        'unit',
        'unless',
        'until',
        'use',
        'utf16',
        'utf32',
        'utf8',
        'variables',
        'void',
        'warn',
        'when',
        'whenever',
        'while',
        'with',
        'without',
        'worries',
        'x',
        'xor',
        'xx',
    ],
    builtins: [
        'BEGIN',
        'CHECK',
        'INIT',
        'START',
        'FIRST',
        'ENTER',
        'LEAVE',
        'KEEP',
        'UNDO',
        'NEXT',
        'LAST',
        'PRE',
        'POST',
        'END',
        'CATCH',
        'CONTROL',
        'TEMP',
        'DOC',
        'QUIT',
        'CLOSE',
        'COMPOSE',
        'MONKEY-GUTS',
        'MONKEY-SEE-NO-EVAL',
        'MONKEY-TYPING',
        'MONKEY',
        'Object',
        'Any',
        'Junction',
        'Whatever',
        'Capture',
        'Match',
        'Signature',
        'Proxy',
        'Matcher',
        'Package',
        'Module',
        'Class',
        'Grammar',
        'Scalar',
        'Array',
        'Hash',
        'KeyHash',
        'KeySet',
        'KeyBag',
        'Pair',
        'List',
        'Seq',
        'Range',
        'Set',
        'Bag',
        'Map',
        'Mapping',
        'Void',
        'Undef',
        'Failure',
        'Exception',
        'Code',
        'Block',
        'Routine',
        'Sub',
        'Macro',
        'Method',
        'Submethod',
        'Regex',
        'Str',
        'Blob',
        'Char',
        'Byte',
        'Parcel',
        'Codepoint',
        'Grapheme',
        'StrPos',
        'StrLen',
        'Version',
        'Num',
        'Complex',
        'Bit',
        'True',
        'False',
        'Order',
        'Same',
        'Less',
        'More',
        'Increasing',
        'Decreasing',
        'Ordered',
        'Callable',
        'AnyChar',
        'Positional',
        'Associative',
        'Ordering',
        'KeyExtractor',
        'Comparator',
        'OrderingPair',
        'IO',
        'KitchenSink',
        'Role',
        'Int',
        'Rat',
        'Buf',
        'UInt',
        'Abstraction',
        'Numeric',
        'Real',
        'Nil',
        'Mu',
        'SeekFromBeginning',
        'SeekFromEnd',
        'SeekFromCurrent',
        'say',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/\$[a-zA-Z_]\w*/, 'variable'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
