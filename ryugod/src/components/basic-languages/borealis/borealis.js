/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.bor',
    keywords: [
        'pub',
        'return',
        'eq',
        'ne',
        'else',
        'break',
        'continue',
        'obj',
        'foreach',
        'import',
        'f',
        'if',
        'while',
        'case',
        'this',
    ],
    builtins: [
        'print',
        'printLine',
        'printV',
        'readChar',
        'readLine',
        'flush',
        'historyAdd',
        'historySetSize',
        'clear',
        'clearPath',
        'isAbsolute',
        'getCWD',
        'isFile',
        'isDir',
        'exists',
        'rename',
        'remove',
        'makeDir',
        'getFiles',
        'getPermissions',
        'chmod',
        'chown',
        'getUser',
        'getGroup',
        'getEnv',
        'getTime',
        'exec',
        'getModTime',
        'getChangeTime',
        'getAccessTime',
        'toUpper',
        'toLower',
        'getLength',
        'getByteLength',
        'includes',
        'trim',
        'leftTrim',
        'rightTrim',
        'indexOf',
        'lastIndexOf',
        'split',
        'endsWith',
        'startsWith',
        'getChar',
        'slice',
        'repeat',
        'isWhitespace',
        'replace',
        'remove',
        'compare',
        'compareI',
        'containsChars',
        'interpolate',
        'sprintf',
        'padStart',
        'padEnd',
        'reverse',
        'encode',
        'decode',
        'count',
        'isUpper',
        'isLower',
        'capitalize',
        'fromCharCodes',
        'get',
        'getSize',
        'push',
        'prepend',
        'pop',
        'shift',
        'getKeys',
        'hasKey',
        'join',
        'has',
        'reverse',
        'range',
        'sort',
        'column',
        'map',
        'filter',
        'reduce',
        'some',
        'merge',
        'fill',
        'min',
        'max',
        'isNan',
        'isFinite',
        'rand',
        'sRand',
        'format',
        'getKeys',
        'getValues',
        'create',
        'read',
        'write',
        'append',
        'copy',
        'getType',
        'getSize',
        'stringify',
        'parse',
        'isValid',
        'cos',
        'acos',
        'cosh',
        'acosh',
        'sin',
        'asin',
        'sinh',
        'asinh',
        'tan',
        'atan',
        'tanh',
        'atanh',
        'sqrt',
        'log',
        'abs',
        'floor',
        'ceil',
        'round',
        'sha1',
        'sha256',
        'md5',
        'now',
        'toString',
        'fromString',
        'toObject',
        'getGMTOffset',
        'and',
        'or',
        'leftShift',
        'rightShift',
        'not',
        'htons',
        'htonl',
        'new',
        'bind',
        'listen',
        'accept',
        'close',
        'shutdown',
        'recv',
        'send',
        'setOption',
        'getOption',
        'toString',
        'toNumber',
        'toBool',
        'toObject',
        'toArray',
        'sleep',
        'assert',
        'exit',
        'isEmpty',
        'debug',
        'eval',
        't',
        'typeof',
        'print',
        'printLine',
    ],
    typeKeywords: [
        'const',
        'string',
        'number',
        'array',
        'object',
        'function',
        'any',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'/, 'string.escape', '@stringBody'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
