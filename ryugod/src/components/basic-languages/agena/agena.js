/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
        blockComment: ["#/", "/#"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.agn',
    keywords: [
        'alias',
        'anything',
        'as',
        'basic',
        'boolean',
        'bottom',
        'break',
        'by',
        'case',
        'catch',
        'clear',
        'cls',
        'complex',
        'constant',
        'create',
        'dec',
        'delete',
        'dict',
        'div',
        'do',
        'duplicate',
        'elif',
        'else',
        'end',
        'enum',
        'epocs',
        'esac',
        'external',
        'exchange',
        'fi',
        'for',
        'from',
        'global',
        'if',
        'import',
        'inc',
        'infinity',
        'insert',
        'into',
        'keys',
        'lightuserdata',
        'listing',
        'local',
        'mod',
        'mul',
        'nargs',
        'nothing',
        'number',
        'od',
        'of',
        'onsuccess',
        'pair',
        'pop',
        'proc',
        'procedure',
        'quit',
        'redo',
        'reg',
        'registers',
        'relaunch',
        'return',
        'rotate',
        'scope',
        'seq',
        'sequence',
        'set',
        'skip',
        'string',
        'table',
        'then',
        'thread',
        'try',
        'to',
        'top',
        'try',
        'undefined',
        'until',
        'userdata',
        'varargs',
        'when',
        'while',
        'yrt',
        'and',
        'fail',
        'false',
        'nand',
        'nor',
        'not',
        'null',
        'or',
        'subset',
        'true',
        'xor',
        'xsubset',
    ],
    builtins: [
        'abs',
        'arccos',
        'arcsin',
        'arctan',
        'assigned',
        'atendof',
        'bea',
        'char',
        'copy',
        'cos',
        'cosh',
        'cosxx',
        'defaults',
        'empty',
        'entier',
        'even',
        'exp',
        'filled',
        'finite',
        'float',
        'frac',
        'imag',
        'in',
        'inrange',
        'instr',
        'int',
        'intersect',
        'is',
        'join',
        'left',
        'ln',
        'lngamma',
        'lower',
        'ltrim',
        'minus',
        'odd',
        'qmdev',
        'qsadd',
        'real',
        'recip',
        'replace',
        'right',
        'rtrim',
        'sadd',
        'shift',
        'sign',
        'sin',
        'sinc',
        'sinh',
        'size',
        'smul',
        'split',
        'sqrt',
        'tan',
        'tanh',
        'trim',
        'type',
        'typeof',
        'unassigned',
        'union',
        'unique',
        'upper',
        'when',
        'alternate',
        'apply',
        'approx',
        'arccosh',
        'arccot',
        'arccoth',
        'arccsc',
        'arccsch',
        'arcsec',
        'arcsech',
        'arcsinh',
        'arctan2',
        'arctanh',
        'argument',
        'assume',
        'besselj',
        'bessely',
        'beta',
        'binomial',
        'bintersect',
        'bisequal',
        'bminus',
        'cabs',
        'ceil',
        'checktype',
        'conjugate',
        'cot',
        'coth',
        'countitems',
        'csc',
        'csch',
        'cycle',
        'descend',
        'dimension',
        'duplicates',
        'erf',
        'erfc',
        'erfcx',
        'error',
        'expx2',
        'fact',
        'fma',
        'frexp',
        'gamma',
        'getbit',
        'getentry',
        'getmetatable',
        'gettype',
        'has',
        'heaviside',
        'hypot',
        'ilog2',
        'ilog10',
        'inverf',
        'inverfc',
        'irem',
        'isboolean',
        'iscomplex',
        'isequal',
        'isint',
        'isnegint',
        'isnonnegint',
        'isnonposint',
        'isnumber',
        'isnumeric',
        'ispair',
        'isposint',
        'isseq',
        'isset',
        'isstring',
        'isstructure',
        'istable',
        'iterate',
        'ldexp',
        'load',
        'loadfile',
        'loadstring',
        'log',
        'log10',
        'map',
        'max',
        'min',
        'modf',
        'mprint',
        'newproxy',
        'next',
        'nseq',
        'notisposint',
        'ops',
        'optboolean',
        'optcomplex',
        'optint',
        'optposint',
        'optpositive',
        'optnonnegative',
        'optnonnegint',
        'optnumber',
        'optstring',
        'pipeline',
        'pop',
        'post',
        'pre',
        'print',
        'printf',
        'protect',
        'purge',
        'put',
        'rawequal',
        'rawget',
        'rawset',
        'read',
        'readlib',
        'rect',
        'recurse',
        'remove',
        'root',
        'rot',
        'round',
        'run',
        'save',
        'sec',
        'sech',
        'select',
        'selectremove',
        'setbit',
        'setmetatable',
        'settype',
        'sort',
        'sorted',
        'subs',
        'switchd',
        'time',
        'tonumber',
        'tonumberx',
        'toseq',
        'toset',
        'tostring',
        'totable',
        'unpack',
        'whereis',
        'with',
        'write',
        'writeline',
        'xpcall',
        'zip',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/#\//, 'comment', '@comment'],
            [/(#.*$)/, 'comment'],
        ],
        comment: [
            [/[^#\/]+/, 'comment'],
            [/\/#/, 'comment', '@pop'],
            [/[\/#]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
