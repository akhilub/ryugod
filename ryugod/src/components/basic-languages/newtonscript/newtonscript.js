/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//', '#'],
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    ignoreCase: true,
    tokenPostfix: '.nwt',
    keywords: [
        'native',
        'local',
        'global',
        'constant',
        'case',
        'true',
        'nil',
        'if',
        'then',
        'else',
        'try',
        'onexception',
        'do',
        'for',
        'foreach',
        'while',
        'to',
        'downto',
        'by',
        'repeat',
        'until',
        'in',
        'func',
        'inherited',
        'self',
        'file',
        'and',
        'not',
        'or',
        'div',
        'mod',
        'xor',
        'shl',
        'shr',
        'with',
        'return',
        'break',
        'exists',
        'call',
        'begin',
        'end',
        'require',
    ],
    builtins: [
        '_proto',
        '_parent',
        'print',
        'apply',
        'getfunctionargcount',
        'ischaracter',
        'isfunction',
        'isinteger',
        'isnumber',
        'isreadonly',
        'isreal',
        'isstring',
        'issubclass',
        'issymbol',
        'isarray',
        'isbinary',
        'isframe',
        'isimmediate',
        'isinstance',
        'makebinary',
        'setvariable',
        'symbolcomparelex',
        'stuffcstring',
        'stuffpstring',
        'getglobalfn',
        'getglobalvar',
        'globalfnexists',
        'globalvarexists',
        'defglobalfn',
        'defglobalvar',
        'undefglobalfn',
        'undefglobalvar',
        'binequal',
        'binmunger',
        'chr',
        'compile',
        'ord',
        'arraypos',
        'strtruncate',
        'classof',
        'clone',
        'deepclone',
        'getslot',
        'getvariable',
        'hasslot',
        'hasvariable',
        'intern',
        'map',
        'primclassof',
        'removeslot',
        'replaceobject',
        'setclass',
        'totalclone',
        'beginswith',
        'capitalize',
        'capitalizewords',
        'charpos',
        'strexactcompare',
        'strtokenize',
        'styledstrtruncate',
        'downcase',
        'endswith',
        'isalphanumeric',
        'iswhitespace',
        'sprintobject',
        'strcompare',
        'strconcat',
        'strequal',
        'strlen',
        'strmunger',
        'strpos',
        'substr',
        'trimstring',
        'upcase',
        'strcat',
        'split',
        'band',
        'bor',
        'bxor',
        'bnot',
        'addarrayslot',
        'array',
        'arrayinsert',
        'arraymunger',
        'arrayremovecount',
        'insertionsort',
        'length',
        'newweakarray',
        'setadd',
        'setcontains',
        'setdifference',
        'setlength',
        'setoverlaps',
        'lfetch',
        'lsearch',
        'setremove',
        'setunion',
        'sort',
        'stablesort',
        'bdelete',
        'bdifference',
        'bfetch',
        'bfetchright',
        'bfind',
        'bfindright',
        'binsert',
        'binsertright',
        'bintersect',
        'bmerge',
        'bsearchleft',
        'bsearchright',
        'abs',
        'ceiling',
        'floor',
        'max',
        'min',
        'random',
        'real',
        'setrandomseed',
        'acos',
        'acosh',
        'asin',
        'asinh',
        'atan',
        'atan2',
        'atanh',
        'copysign',
        'cos',
        'cosh',
        'erf',
        'erfc',
        'exp',
        'expm1',
        'fabs',
        'fdim',
        'fmax',
        'fmin',
        'fmod',
        'gamma',
        'hypot',
        'isfinite',
        'isnan',
        'isnormal',
        'lessequalorgreater',
        'lessorgreater',
        'lgamma',
        'log',
        'logb',
        'log1p',
        'log10',
        'nearbyint',
        'nextafterd',
        'pow',
        'randomx',
        'remainder',
        'remquo',
        'rint',
        'rinttol',
        'round',
        'scalb',
        'signbit',
        'signum',
        'sin',
        'sinh',
        'sqrt',
        'tan',
        'tanh',
        'trunc',
        'unordered',
        'unorderedgreaterorequal',
        'unorderedlessorequal',
        'unorderedorequal',
        'unorderedorgreater',
        'unorderedorless',
        'feclearexcept',
        'fegetenv',
        'fegetexcept',
        'feholdexcept',
        'feraiseexcept',
        'fesetenv',
        'fesetexcept',
        'fetestexcept',
        'feupdateenv',
        'annuity',
        'compound',
        'throw',
        'rethrow',
        'currentexception',
        'apply',
        'perform',
        'performifdefined',
        'protoperform',
        'protoperformifdefined',
        'extractbyte',
        'extractbytes',
        'extractchar',
        'extractlong',
        'extractxlong',
        'extractword',
        'extractcstring',
        'extractpstring',
        'extractunichar',
        'stuffbyte',
        'stuffchar',
        'stuffcstring',
        'stufflong',
        'stuffpstring',
        'stuffunichar',
        'stuffword',
    ],
    typeKeywords: [],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/(#.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
