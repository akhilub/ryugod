/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ';'
    },
    brackets: [
        ['[', ']'],
        ['(', ')']
    ]
};
var asmKeywords = [
    // words
    'section',
    'global',
    'db',
    'equ',
    'aaa',
    'aad',
    'aam',
    'aas',
    'adc',
    'add',
    'and',
    'call',
    'cbw',
    'clc',
    'cld',
    'cli',
    'cmc',
    'cmp',
    'cmps',
    'cmpsb',
    'cmpsw',
    'cwd',
    'daa',
    'das',
    'dec',
    'div',
    'esc',
    'hlt',
    'idiv',
    'imul',
    'in',
    'inc',
    'int',
    'into',
    'iret',
    'ja',
    'jae',
    'jb',
    'jbe',
    'jc',
    'jcxz',
    'je',
    'jg',
    'jge',
    'jl',
    'jle',
    'jmp',
    'jna',
    'jnae',
    'jnb',
    'jnbe',
    'jnc',
    'jne',
    'jng',
    'jnge',
    'jnl',
    'jnle',
    'jno',
    'jnp',
    'jns',
    'jnz',
    'jo',
    'jp',
    'jpe',
    'jpo',
    'js',
    'jz',
    'lahf',
    'lds',
    'lea',
    'les',
    'lods',
    'lodsb',
    'lodsw',
    'loop',
    'loope',
    'loopew',
    'loopne',
    'loopnew',
    'loopnz',
    'loopnzw',
    'loopw',
    'loopz',
    'loopzw',
    'mov',
    'movs',
    'movsb',
    'movsw',
    'mul',
    'neg',
    'nop',
    'not',
    'or',
    'out',
    'pop',
    'popf',
    'push',
    'pushf',
    'rcl',
    'ret',
    'retf',
    'retn',
    'rol',
    'ror',
    'sahf',
    'sal',
    'sar',
    'sbb',
    'scas',
    'scasb',
    'scasw',
    'shl',
    'shr',
    'stc',
    'std',
    'sti',
    'stos',
    'stosb',
    'stosw',
    'sub',
    'test',
    'wait',
    'xchg',
    'xlat',
    'xlatb',
    'xor'
    ];
export var language = {
    defaultToken: '',
    ignoreCase: true,
    tokenPostfix: '.asm',
    keywords: asmKeywords,
    typeKeywords: [
        
    ],
    operators: [
        '.186',
        '.286',
        '.286c',
        '.286p',
        '.287',
        '.386',
        '.386c',
        '.386p',
        '.387',
        '.486',
        '.486p',
        '.8086',
        '.8087',
        '.alpha',
        '.break',
        '.code',
        '.const',
        '.continue',
        '.cref',
        '.data',
        '.data?',
        '.dosseg',
        '.else',
        '.elseif',
        '.endif',
        '.endw',
        '.err',
        '.err1',
        '.err2',
        '.errb',
        '.errdef',
        '.errdif',
        '.errdifi',
        '.erre',
        '.erridn',
        '.erridni',
        '.errnb',
        '.errndef',
        '.errnz',
        '.exit',
        '.fardata',
        '.fardata?',
        '.if',
        '.lall',
        '.lfcond',
        '.list',
        '.listall',
        '.listif',
        '.listmacro',
        '.listmacroall',
        '.model',
        '.no87',
        '.nocref',
        '.nolist',
        '.nolistif',
        '.nolistmacro',
        '.radix',
        '.repeat',
        '.sall',
        '.seq',
        '.sfcond',
        '.stack',
        '.startup',
        '.tfcond',
        '.type',
        '.until',
        '.untilcxz',
        '.while',
        '.xall',
        '.xcref',
        '.xlist',
        'alias',
        'align',
        'assume',
        'catstr',
        'comm',
        'comment',
        'db',
        'dd',
        'df',
        'dosseg',
        'dq',
        'dt',
        'dup',
        'dw',
        'echo',
        'else',
        'elseif',
        'elseif1',
        'elseif2',
        'elseifb',
        'elseifdef',
        'elseifdif',
        'elseifdifi',
        'elseife',
        'elseifidn',
        'elseifidni',
        'elseifnb',
        'elseifndef',
        'end',
        'endif',
        'endm',
        'endp',
        'ends',
        'eq ',
        'equ',
        'even',
        'exitm',
        'extern',
        'externdef',
        'extrn',
        'for',
        'forc',
        'ge',
        'goto',
        'group',
        'gt',
        'high',
        'highword',
        'if',
        'if1',
        'if2',
        'ifb',
        'ifdef',
        'ifdif',
        'ifdifi',
        'ife',
        'ifidn',
        'ifidni',
        'ifnb',
        'ifndef',
        'include',
        'includelib',
        'instr',
        'invoke',
        'irp',
        'irpc',
        'label',
        'le',
        'length',
        'lengthof',
        'local',
        'low',
        'lowword',
        'lroffset',
        'lt',
        'macro',
        'mask',
        'mod',
        '.msfloat',
        'name',
        'ne',
        'offset',
        'opattr',
        'option',
        'org',
        '%out',
        'page',
        'popcontext',
        'proc',
        'proto',
        'ptr',
        'public',
        'purge',
        'pushcontext',
        'record',
        'repeat',
        'rept',
        'seg',
        'segment',
        'short',
        'size',
        'sizeof',
        'sizestr',
        'struc',
        'struct',
        'substr',
        'subtitle',
        'subttl',
        'textequ',
        'this',
        'title',
        'type',
        'typedef',
        'union',
        'while',
        'width'
    ],
    symbols: /[=><!~?&+\-*\/\^%#@]+/,
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': { token: 'keyword.$0' },
                        '@default': 'identifier'
                    }
                }
            ],
            // whitespace
            { include: '@whitespace' },
            // [[ attributes ]].
            [/\[\[.*\]\]/, 'annotation'],
            // Preprocessor directive
            [/^\s*#\w+/, 'keyword'],
            // delimiters and operators
            [/[{}()\[\]]/, '@brackets'],
            [/[<>](?!@symbols)/, '@brackets'],
            [
                /@symbols/,
                {
                    cases: {
                        '@operators': 'delimiter',
                        '@default': ''
                    }
                }
            ],
            // numbers
            [/\d*\d+[eE]([\-+]?\d+)?/, 'number.float'],
            [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
            [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],
            [/0[0-7']*[0-7]/, 'number.octal'],
            [/0[bB][0-1']*[0-1]/, 'number.binary'],
            [/\d[\d']*/, 'number'],
            [/\d/, 'number'],
            // delimiter: after number because of .\d floats
            [/[;,.]/, 'delimiter'],
            // strings
            [/"([^"\\]|\\.)*$/, 'string.invalid'],
            [/"/, 'string', '@string'],
            // characters
            [/'[^\\']'/, 'string'],
            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
            [/'/, 'string.invalid']
        ],
        whitespace: [
            [/[ \t\r\n]+/, ''],
            [/^\s*[#;].*$/, 'comment']
        ],
        string: [
            [/[^\\"']+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [
                /["']/,
                {
                    cases: {
                        '$#==$S2': { token: 'string', next: '@pop' },
                        '@default': 'string'
                    }
                }
            ]
        ]
    }
};
