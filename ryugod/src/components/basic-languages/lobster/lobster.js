/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.lobster',
    keywords: [
        'def',
        'struct',
        'class',
        'return',
        'import',
        'namespace',
        'pakfile',
        'from',
        'program',
        'private',
        'coroutine',
        'typeof',
        'enum',
        'enum_flags',
        'var',
        'let',
        'if',
        'else',
        'switch',
        'for',
        'while',
        'collectwhile',
        'filter',
        'exists',
        'map',
        'case',
        'default',
    ],
    builtins: [
        'aabb_tree',
        'abs',
        'acos',
        'all',
        'any',
        'append',
        'asin',
        'assert',
        'atan',
        'atan2',
        'binary_search',
        'cardinal_spline',
        'ceiling',
        'ceiling',
        'cg_average_surface_color',
        'cg_bounding_box',
        'cg_clone',
        'cg_color_to_palette',
        'cg_copy',
        'cg_copy_palette',
        'cg_create_3d_texture',
        'cg_create_mesh',
        'cg_erode',
        'cg_get',
        'cg_get_buf',
        'cg_init',
        'cg_load_vox',
        'cg_palette_to_color',
        'cg_randomize',
        'cg_rotate',
        'cg_sample_down',
        'cg_save_vox',
        'cg_scale_up',
        'cg_set',
        'cg_simplex',
        'cg_size',
        'circles_within_range',
        'clamp',
        'clamp',
        'clamp',
        'clamp',
        'command_line_arguments',
        'compare_substring',
        'compile_run_code',
        'compile_run_file',
        'concat_string',
        'copy',
        'cos',
        'cross',
        'date_time',
        'date_time_string',
        'deepcopy',
        'degrees',
        'degrees',
        'div',
        'dot',
        'ensure_size',
        'equal',
        'escape_string',
        'find_string',
        'find_string_reverse',
        'flatbuffers_binary_to_json',
        'flatbuffers_field_float32',
        'flatbuffers_field_float64',
        'flatbuffers_field_int16',
        'flatbuffers_field_int32',
        'flatbuffers_field_int64',
        'flatbuffers_field_int8',
        'flatbuffers_field_present',
        'flatbuffers_field_string',
        'flatbuffers_field_struct',
        'flatbuffers_field_table',
        'flatbuffers_field_vector',
        'flatbuffers_field_vector_len',
        'flatbuffers_indirect',
        'flatbuffers_json_to_binary',
        'flatbuffers_string',
        'flexbuffers_binary_to_json',
        'flexbuffers_binary_to_value',
        'flexbuffers_json_to_binary',
        'flexbuffers_value_to_binary',
        'float',
        'float',
        'floor',
        'floor',
        'fraction',
        'fraction',
        'get_line',
        'gl_animate_mesh',
        'gl_bind_mesh_to_compute',
        'gl_blend',
        'gl_button',
        'gl_circle',
        'gl_clear',
        'gl_color',
        'gl_create_blank_texture',
        'gl_create_texture',
        'gl_cursor',
        'gl_debug_grid',
        'gl_delete_buffer_object',
        'gl_delta_time',
        'gl_dispatch_compute',
        'gl_dpi',
        'gl_dropped_file',
        'gl_dump_shader',
        'gl_end_text_input',
        'gl_frame',
        'gl_get_char_code',
        'gl_get_font_size',
        'gl_get_glyph_name',
        'gl_get_outline_size',
        'gl_grab',
        'gl_hit',
        'gl_joy_axis',
        'gl_key_repeat',
        'gl_last_pos',
        'gl_last_time',
        'gl_light',
        'gl_line',
        'gl_line_mode',
        'gl_load_materials',
        'gl_load_texture',
        'gl_local_last_pos',
        'gl_local_mouse_pos',
        'gl_mesh_parts',
        'gl_mesh_pointsize',
        'gl_mesh_size',
        'gl_model_view_projection',
        'gl_mouse_delta',
        'gl_mouse_pos',
        'gl_mousewheel_delta',
        'gl_new_mesh',
        'gl_new_mesh_iqm',
        'gl_new_poly',
        'gl_open_circle',
        'gl_origin',
        'gl_ortho',
        'gl_ortho3d',
        'gl_perspective',
        'gl_point_scale',
        'gl_polygon',
        'gl_pop_model_view',
        'gl_push_model_view',
        'gl_read_texture',
        'gl_rect',
        'gl_rect_tc_col',
        'gl_render_mesh',
        'gl_render_tiles',
        'gl_require_version',
        'gl_rotate_x',
        'gl_rotate_y',
        'gl_rotate_z',
        'gl_save_mesh',
        'gl_scale',
        'gl_scale',
        'gl_scaling',
        'gl_scissor',
        'gl_screenshot',
        'gl_set_font_name',
        'gl_set_font_size',
        'gl_set_image_texture',
        'gl_set_max_font_size',
        'gl_set_mesh_texture',
        'gl_set_primitive_texture',
        'gl_set_shader',
        'gl_set_text_input',
        'gl_set_uniform',
        'gl_set_uniform',
        'gl_set_uniform_array',
        'gl_set_uniform_matrix',
        'gl_shutdown',
        'gl_start_text_input',
        'gl_switch_to_framebuffer',
        'gl_text',
        'gl_text_input_state',
        'gl_text_size',
        'gl_texture_size',
        'gl_time',
        'gl_touchscreen',
        'gl_translate',
        'gl_uniform_buffer_object',
        'gl_uniform_buffer_object',
        'gl_unit_cube',
        'gl_unit_square',
        'gl_visible',
        'gl_window',
        'gl_window_min_max',
        'gl_window_size',
        'gl_window_title',
        'hash',
        'hash',
        'hash',
        'hash',
        'hash',
        'hash',
        'im_add_font',
        'im_button',
        'im_checkbox',
        'im_coloredit',
        'im_combo',
        'im_edit_anything',
        'im_frame_end',
        'im_frame_start',
        'im_graph',
        'im_group_end',
        'im_group_start',
        'im_init',
        'im_input_text',
        'im_listbox',
        'im_radio',
        'im_same_line',
        'im_separator',
        'im_show_engine_stats',
        'im_show_vars',
        'im_sliderfloat',
        'im_sliderint',
        'im_text',
        'im_tooltip',
        'im_treenode_end',
        'im_treenode_start',
        'im_window_demo',
        'im_window_end',
        'im_window_start',
        'in_range',
        'in_range',
        'in_range',
        'in_range',
        'insert',
        'int',
        'int',
        'is_worker_thread',
        'length',
        'length',
        'length',
        'lerp',
        'lerp',
        'line_intersect',
        'log',
        'lowercase',
        'magnitude',
        'manhattan',
        'max',
        'max',
        'max',
        'max',
        'max',
        'max',
        'max',
        'max',
        'mg_color',
        'mg_convert_to_cubes',
        'mg_cube',
        'mg_cylinder',
        'mg_landscape',
        'mg_polygonize',
        'mg_pop_transform',
        'mg_push_transform',
        'mg_rotate',
        'mg_scale',
        'mg_scale_vec',
        'mg_set_color_noise',
        'mg_set_point_mode',
        'mg_set_polygon_reduction',
        'mg_set_vertex_randomize',
        'mg_smooth',
        'mg_sphere',
        'mg_superquadric',
        'mg_superquadric_non_uniform',
        'mg_supertoroid',
        'mg_tapered_cylinder',
        'mg_translate',
        'min',
        'min',
        'min',
        'min',
        'min',
        'min',
        'min',
        'min',
        'normalize',
        'number_to_string',
        'oc_buf',
        'oc_buffer_update',
        'oc_get',
        'oc_load',
        'oc_new',
        'oc_new_physent',
        'oc_optimize',
        'oc_physics_frame',
        'oc_raycast',
        'oc_save',
        'oc_set',
        'oc_update_physent',
        'oc_world_bits',
        'parse_data',
        'pass',
        'ph_create_box',
        'ph_create_circle',
        'ph_create_particle',
        'ph_create_particle_circle',
        'ph_create_polygon',
        'ph_delete_particle',
        'ph_dynamic',
        'ph_get_position',
        'ph_getparticle_position',
        'ph_initialize',
        'ph_initialize_particles',
        'ph_particle_contacts',
        'ph_raycast',
        'ph_render',
        'ph_render_particles',
        'ph_set_color',
        'ph_set_shader',
        'ph_set_texture',
        'ph_step',
        'play_ogg',
        'play_sfxr',
        'play_wav',
        'pop',
        'pow',
        'pow',
        'pow',
        'print',
        'program_name',
        'push',
        'radians',
        'radians',
        'read_file',
        'read_float32_le',
        'read_float32_le_back',
        'read_float64_le',
        'read_float64_le_back',
        'read_int16_le',
        'read_int16_le_back',
        'read_int32_le',
        'read_int32_le_back',
        'read_int64_le',
        'read_int64_le_back',
        'read_int8_le',
        'read_int8_le_back',
        'reference_count',
        'remove',
        'remove_obj',
        'repeat_string',
        'replace_string',
        'rnd',
        'rnd',
        'rnd_float',
        'rnd_gaussian',
        'rnd_seed',
        'round',
        'round',
        'scan_folder',
        'seconds_elapsed',
        'set_console',
        'set_print_decimals',
        'set_print_depth',
        'set_print_indent',
        'set_print_length',
        'set_print_quoted',
        'sign',
        'sign',
        'sign',
        'sign',
        'simplex',
        'sin',
        'sincos',
        'slice',
        'smootherstep',
        'smoothmin',
        'smoothstep',
        'sound_halt',
        'sound_pause',
        'sound_resume',
        'sound_status',
        'sound_volume',
        'sqrt',
        'start_worker_threads',
        'steam_init',
        'steam_overlay',
        'steam_read_file',
        'steam_unlock_achievement',
        'steam_username',
        'steam_write_file',
        'stop_worker_threads',
        'string',
        'string_to_float',
        'string_to_int',
        'string_to_unicode',
        'substring',
        'tan',
        'thread_information',
        'thread_read',
        'thread_write',
        'tokenize',
        'top',
        'trace_bytecode',
        'unicode_to_string',
        'uppercase',
        'vector_reserve',
        'vm_compiled_mode',
        'vr_create_motion_controller_mesh',
        'vr_finish',
        'vr_hmd_vec',
        'vr_init',
        'vr_motion_controller',
        'vr_motion_controller_button',
        'vr_motion_controller_vec',
        'vr_motioncontrollerstracking',
        'vr_num_motion_controllers',
        'vr_set_eye_texture',
        'vr_start',
        'vr_start_eye',
        'wave_function_collapse',
        'workers_alive',
        'write_file',
        'write_float32_le',
        'write_float32_le_back',
        'write_float64_le',
        'write_float64_le_back',
        'write_int16_le',
        'write_int16_le_back',
        'write_int32_le',
        'write_int32_le_back',
        'write_int64_le',
        'write_int64_le_back',
        'write_int8_le',
        'write_int8_le_back',
        'write_substring',
        'write_substring_back',
    ],
    typeKeywords: [
        'int',
        'float',
        'string',
        'vector',
        'coroutine',
        'bool',
        'void',
        'resource',
        'true',
        'false',
        'nil',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"""/, 'string.escape', '@trpStringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        trpStringBody: [
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"""/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
