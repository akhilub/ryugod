/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['//'],
        blockComment: ["(*", "*)"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        //{ open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        //{ open: "'", close: "'" }
    ],
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.bsv',
    keywords: [
        'for',
        'while',
        'action',
        'actionvalue',
        'alias',
        'always',
        'always_comb',
        'always_ff',
        'always_latch',
        'ancestor',
        'and',
        'assert',
        'assert_strobe',
        'assign',
        'assume',
        'automatic',
        'before',
        'begin',
        'bind',
        'bins',
        'binsof',
        'break',
        'buf',
        'bufif0',
        'bufif1',
        'byte',
        'cell',
        'chandle',
        'class',
        'clock',
        'clocked_by',
        'clocking',
        'cmos',
        'config',
        'const',
        'constraint',
        'context',
        'continue',
        'cover',
        'covergroup',
        'coverpoint',
        'cross',
        'deassign',
        'default',
        'default_clock',
        'default_reset',
        'defparam',
        'deriving',
        'design',
        'disable',
        'dist',
        'do',
        'edge',
        'end',
        'endaction',
        'endactionvalue',
        'endcase',
        'endclass',
        'endclocking',
        'endconfig',
        'endfunction',
        'endgenerate',
        'endgroup',
        'endinstance',
        'endmethod',
        'endmodule',
        'endpackage',
        'endpar',
        'endprimitive',
        'endprogram',
        'endproperty',
        'endrule',
        'endrules',
        'endseq',
        'endsequence',
        'endspecify',
        'endtable',
        'endtask',
        'endtypeclass',
        'event',
        'expect',
        'export',
        'extends',
        'extern',
        'final',
        'first_match',
        'force',
        'foreach',
        'forever',
        'fork',
        'forkjoin',
        'function',
        'generate',
        'genvar',
        'highz0',
        'highz1',
        'iff',
        'ifnone',
        'ignore_bins',
        'illegal_bins',
        'import',
        'incdir',
        'include',
        'initial',
        'inout',
        'input',
        'input_clock',
        'input_reset',
        'inside',
        'instance',
        'intersect',
        'join',
        'join_any',
        'join_none',
        'large',
        'let',
        'liblist',
        'library',
        'local',
        'localparam',
        'logic',
        'macromodule',
        'match',
        'medium',
        'method',
        'modport',
        'module',
        'nand',
        'negedge',
        'new',
        'nmos',
        'no_reset',
        'nor',
        'noreset',
        'noshowcancelled',
        'not',
        'notif0',
        'notif1',
        'null',
        'or',
        'output',
        'output_clock',
        'output_reset',
        'package',
        'packed',
        'par',
        'parameter',
        'pmos',
        'posedge',
        'powered_by',
        'primitive',
        'priority',
        'program',
        'property',
        'protected',
        'provisos',
        'pull0',
        'pull1',
        'pulldown',
        'pullup',
        'pulsestyle_ondetect',
        'pulsestyle_onevent',
        'pure',
        'rand',
        'randc',
        'randcase',
        'randsequence',
        'rcmos',
        'ref',
        'release',
        'repeat',
        'reset',
        'reset_by',
        'return',
        'rnmos',
        'rpmos',
        'rtran',
        'rtranif0',
        'rtranif1',
        'rule',
        'rules',
        'same_family',
        'scalared',
        'schedule',
        'seq',
        'sequence',
        'showcancelled',
        'signed',
        'small',
        'solve',
        'specify',
        'specparam',
        'static',
        'string',
        'strong0',
        'strong1',
        'super',
        'supply0',
        'supply1',
        'table',
        'task',
        'this',
        'throughout',
        'timeprecision',
        'timeunit',
        'tran',
        'tranif0',
        'tranif1',
        'tri',
        'tri0',
        'tri1',
        'triand',
        'trior',
        'trireg',
        'type',
        'typeclass',
        'unique',
        'unsigned',
        'use',
        'valueof',
        'valueOf',
        'var',
        'vectored',
        'virtual',
        'wait',
        'wait_order',
        'wand',
        'weak0',
        'weak1',
        'wildcard',
        'with',
        'within',
        'wor',
        'xnor',
        'xor',
        'enum',
        'struct',
        'tagged',
        'union',
        'int',
        'integer',
        'longint',
        'real',
        'realtime',
        'reg',
        'shortint',
        'shortreal',
        'time',
        'void',
        'wire',
        'case',
        'casex',
        'casez',
        'else',
        'if',
        'matches',
        'False',
        'True',
    ],
    builtins: [        
        'error',
        'warning',
        'message',
        'messageM',
        'fromInteger',
        'inLiteralRange',
        'negate',
        'fromMaybe',
        'isValid',
        'noAction',
        'minBound',
        'maxBound',
        'mkBypassWire',
        'mkDWire',
        'mkPulseWire',
        'mkReg',
        'mkRegU',
        'mkRegA',
        'mkRWire',
        'mkWire',
        'mkFIFO',
        'mkFIFO1',
        'nosplit',
        'emptyRules',
        'addRules',
        'rJoin',
        'rJoinPreempts',
        'rJoinDescendingUrgency',
        'pack',
        'unpack',
        'zeroExtend',
        'signExtend',
        'truncate',
        'signedShiftRight',
        'div',
        'mod',
        'exp',
        'log2',
        'add',
        'abs',
        'max',
        'min',
        'quot',
        'rem',
        'always_ready',
        'always_enabled',
        'bit_blast',
        'scan_insert',
        'CLK',
        'RST_N',
        'RSTN',
        'ungated_clock',
        'descending_urgency',
        'preempts',
        'fire_when_enabled',
        'no_implicit_conditions',
        'internal_scheduling',
        'method_scheduling',
        'ready',
        'enable',
        'result',
        'prefix',
        'port',
        '',
        'synthesize',
        'noinline',
        'doc',
        'options',
        'Empty',
        'FIFO',
        'FIFOF',
        'Reg',
        'RegFile',
        'RWire',
        'Wire',
        'BypassWire',
        'PulseWire',
        'Vector',
        'Action',
        'ActionValue',
        'Bit',
        'Bool',
        'Clock',
        'Either',
        'Int',
        'Integer',
        'Maybe',
        'Module',
        'Nat',
        'Power',
        'Reset',
        'Rules',
        'String',
        'TAdd',
        'TSub',
        'TMul',
        'TDiv',
        'TLog',
        'TExp',
        'UInt',
        'Add',
        'Max',
        'Log',
        'Arith',
        'Literal',
        'Bitwise',
        'BitReduction',
        'BitExtend',
        'Bits',
        'Eq',
        'Ord',
        'Bounded',
        'IsModule',
        'endinterface',
        'interface',
        'typedef',
        '$display',
        '$displayb',
        '$displayh',
        '$displayo',
        '$dumpfile',
        '$dumpflush',
        '$dumpoff',
        '$dumpon',
        '$dumpvars',
        '$fclose',
        '$fdisplay',
        '$fdisplayb',
        '$fdisplayh',
        '$fdisplayo',
        '$fflush',
        '$fgetc',
        '$finish',
        '$fopen',
        '$fwrite',
        '$fwriteb',
        '$fwriteh',
        '$fwriteo',
        '$signed',
        '$stime',
        '$stop',
        '$test$plusargs',
        '$time',
        '$ungetc',
        '$unsigned',
        '$write',
        '$writeb',
        '$writeh',
        '$writeo',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /@?\$?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(^\/\/.*$)/, 'comment'],
            //[/(^#.*$)/, 'comment'],
            [/\(\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\(*]+/, 'comment'],
            [/\*\)/, 'comment', '@pop'],
            [/[\(*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/(\d+|)'[bB]\s*[0-1_xXzZ?]+/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/\\./, 'string'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
