/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ["\\", "--"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')'],
        ['<', '>'],
    ],
    autoClosingPairs: [
        { open: '{', close: '}', notIn: ['string', 'comment'] },
        { open: '[', close: ']', notIn: ['string', 'comment'] },
        { open: '(', close: ')', notIn: ['string', 'comment'] },
        { open: '"', close: '"', notIn: ['string', 'comment'] },
        { open: '<', close: '>', notIn: ['string', 'comment'] }
    ],
    folding: {
        markers: {
            start: new RegExp('^\\s*#Region\\b'),
            end: new RegExp('^\\s*#End Region\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.of',
    ignoreCase: true,
    keywords: [
        '-trailing',
        '?do',
        '?leave',
        'calls',
        'd',
        '(cr',
        '+loop',
        '<eol>',
        '$create',
        '$find',
        '$sift',
        '2constant',
        'a-addr',
        'abort',
        'abs',
        'accept',
        'again',
        'alias',
        'aligned',
        'alloc-mem',
        'allot',
        'and',
        'ascii',
        'base',
        'begin',
        'between',
        'bl',
        'blank',
        'bljoin',
        'body',
        'bounds',
        'buffer',
        'bwjoin',
        'bxjoin',
        'byte',
        'case',
        'cell',
        'cells',
        'char',
        'chars',
        'clear',
        'cnt',
        'comp',
        'compile',
        'constant',
        'count',
        'cpeek',
        'cpoke',
        'cr',
        'create',
        'db',
        'decimal',
        'defer',
        'depth',
        'do',
        'does>',
        'doublet',
        'drop',
        'dump',
        'dup',
        'else',
        'emit',
        'endcase',
        'endof',
        'erase',
        'eval',
        'execute',
        'exit?',
        'exit',
        'expect',
        'false',
        'field',
        'fill',
        'find',
        'free-mem',
        'here',
        'hex',
        'high',
        'if',
        'immediate',
        'input',
        'invert',
        'io',
        'key?',
        'key',
        'lbflip',
        'lbflips',
        'lbsplit',
        'lcc',
        'leave',
        'left-parse-string',
        'len',
        'literal',
        'loop',
        'lpeek',
        'lpoke',
        'lshift',
        'lwflip',
        'lwflips',
        'lwsplit',
        'lxjoin',
        'max',
        'min',
        'mod',
        'move',
        'negate',
        'nip',
        'noshowstack',
        'not',
        'nothing',
        'nu',
        'oaddr',
        'octlet',
        'of',
        'off',
        'on',
        'or',
        'origin',
        'output',
        'over',
        'pack',
        'parse-word',
        'parse',
        'patch',
        'phys',
        'pick',
        'postpone',
        'probe-scsi',
        'pstr',
        'qaddr',
        'quad',
        'quadlet',
        'quit',
        'recurse',
        'recursive',
        'rem',
        'repeat',
        'roll',
        'rot',
        'rshift',
        'see',
        'showstack',
        'sifting',
        'size',
        'sm',
        'space',
        'spaces',
        'state',
        'struct',
        'swap',
        'then',
        'true',
        'tuck',    
        'type',
        'um',
        'unaligned',
        'until',
        'upc',
        'value',
        'variable',
        'virt',
        'waddr',
        'wbflip',
        'wbflips',
        'wbsplit',
        'while',
        'within',        
        'wljoin',
        'word',
        'words',
        'wpeek',
        'wpoke',
        'wxjoin',
        'xa',
        'xa1',
        'xbflip',
        'xbflips',
        'xbsplit',
        'xlflip',
        'xlflips',
        'xlsplit',
        'xor',
        'xwflip',
        'xwflips',
        'xwsplit'
    ],
    builtins: [
        'const',
        'each',
        'new',
        'method',
        'self',
        'Object',
        'class',
        'mutable',
        'classMethod',
        'super',
        'TVar',
        'yourself',
        'null',        
        'try',
        'when',
        'princr',
        'print',
        'emit',
        'sched',
        'String',
        'sleep',
        'yield',
        'throw',
        'message',
        'log',
        'import',
        'use',
        'extern',
    ],
    // we include these common regular expressions
    symbols: /[=!~;\.,:&|\*\/\^%]+/,
    integersuffix: /U?[DI%L&S@]?/,
    floatsuffix: /[R#F!]?/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            // whitespace
            { include: '@whitespace' },
            // special ending tag-words
            [/loop(?!\w)/, { token: 'keyword.tag-do' }],
            // identifiers, and keywords
            [
                /[a-zA-Z0-9_>?$@-]+/,
                {
                    cases: {
                        '@keywords': { token: 'keyword.$0' },
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ],
            // Preprocessor directive
            [/^\s*#@\w+/, 'keyword'],
            // numbers
            [/\d*\d+e([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/\d*\.\d+(e[\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/&H[0-9a-f]+(@integersuffix)/, 'number.hex'],
            [/&0[0-7]+(@integersuffix)/, 'number.octal'],
            [/\d+(@integersuffix)/, 'number'],
            // date literal
            [/#.*#/, 'number'],
            // delimiters and operators
            [/[{}()\[\]]/, '@brackets'],
            [/@symbols/, 'delimiter'],
            // strings
            [/["\u201c\u201d]/, { token: 'string.quote', next: '@string' }]
        ],
        whitespace: [
            [/[ \t\r\n]+/, ''],
            [/\\.*$/, 'comment'],            
            [/--.*$/, 'comment'],            
        ],
        string: [
            [/[^"\u201c\u201d]+/, 'string'],
            [/["\u201c\u201d]{2}/, 'string.escape'],
            [/["\u201c\u201d]C?/, { token: 'string.quote', next: '@pop' }]
        ]
    }
};
