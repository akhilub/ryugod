/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    ignoreCase: true,
    tokenPostfix: '.prg',
    keywords: [
        'ALL',
        'ALTERNATE',
        'ANNOUNCE',
        'APPEND',
        'AVERAGE',
        'BEGIN',
        'BELL',
        'BLANK',
        'BOX',
        'CALL',
        'CANCEL',
        'CASE',
        'CENTURY',
        'CLEAR',
        'CLEAR',
        'CLOSE',
        'COLOR',
        'COMMIT',
        'CONFIRM',
        'CONSOLE',
        'CONTINUE',
        'COPY',
        'COUNT',
        'CREATE',
        'CURSOR',
        'DATE',
        'DBEVALINFO',
        'DBFIELDINFO',
        'DBFILTERINFO',
        'DBFUNCTABLE',
        'DBLOCKINFO',
        'DBOPENINFO',
        'DBORDERCONDINFO',
        'DBORDERCREATEINF',
        'DBORDERINFO',
        'DBRELINFO',
        'DBSCOPEINFO',
        'DBSORTINFO',
        'DBSORTITEM',
        'DBTRANSINFO',
        'DBTRANSITEM',
        'DECIMALS',
        'DECLARE',
        'DEFAULT',
        'DELETE',
        'DELETE',
        'DELETED',
        'DELIMITERS',
        'DEVICE',
        'DIR',
        'DISPLAY',
        'DO',
        'EJECT',
        'ELSE',
        'ENDCASE',
        'ENDDO',
        'ENDIF',
        'EPOCH',
        'ERASE',
        'ESCAPE',
        'EXACT',
        'EXCLUSIVE',
        'EXIT',
        'EXTE',
        'EXTERNAL',
        'FIELD',
        'FILE',
        'FILE',
        'FILTER',
        'FIND',
        'FIXED',
        'FOR',
        'FORM',
        'FORM',
        'FORMAT',
        'FROM',
        'FROM',
        'FUNCTION',
        'FUNCTION',
        'GET',
        'GETS',
        'GO',
        'GO',
        'IF',
        'IFDEF',
        'IFNDEF',
        'IIF',
        'INDEX',
        'INIT',
        'INPUT',
        'INTENSITY',
        'JOIN',
        'KEY',
        'KEYBOARD',
        'LABEL',
        'LIST',
        'LOCAL',
        'LOCATE',
        'MARGIN',
        'MEMORY',
        'MEMVAR',
        'MENU',
        'MESSAGE',
        'NEW',
        'NEXT',
        'NIL',
        'NOTE',
        'ORDER',
        'OTHERWISE',
        'PACK',
        'PARAMETERS',
        'PATH',
        'PICT',
        'PRINTER',
        'PRIVATE',
        'PROCEDURE',
        'PROMPT',
        'PUBLIC',
        'QUIT',
        'READ',
        'RECALL',
        'REINDEX',
        'RELATION',
        'RELEASE',
        'RENAME',
        'REPLACE',
        'REPORT',
        'REQUEST',
        'RESTORE',
        'RETURN',
        'RTLINKCMD',
        'RUN',
        'SAVE',
        'SAY',
        'SCOREBOARD',
        'SEEK',
        'SELECT',
        'SEQUENCE',
        'SET',
        'SHARED',
        'SKIP',
        'SOFTSEEK',
        'SORT',
        'STATIC',
        'STATIC',
        'STEP',
        'STORE',
        'STRU',
        'STRUCTURE',
        'SUM',
        'TAG',
        'TEXT',
        'TMP',
        'TO',
        'TO',
        'TO',
        'TOTAL',
        'TYPE',
        'TYPEAHEAD',
        'TYPEAHEAD',
        'UNIQUE',
        'UNLOCK',
        'UPDATE',
        'USE',
        'VALID',
        'WAIT',
        'WHEN',
        'WHILE',
        'WORKAREA',
        'WRAP',
        'ZAP',
    ],
    builtins: [
    ],
    typeKeywords: [],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'variable'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
