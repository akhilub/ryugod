/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['---', '***'],
        blockComment: ["***(", ")"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.maude',
    keywords: [
        'and',
        'ceq',
        'crl',
        'endfm',
        'endfth',
        'endm',
        'endsm',
        'endv',
        'eq',
        'erew',
        'erewrite',
        'extending',
        'false',
        'fmod',
        'frew',
        'frewrite',
        'from',
        'fth',
        'implies',
        'including',
        'is',
        'load',
        'mod',
        'not',
        'omod',
        'op',
        'ops',
        'or',
        'protecting',
        'red',
        'reduce',
        'rew',
        'rewrite',
        'rl',
        'search',
        'set',
        'smod',
        'sort',
        'sorts',
        'subsort',
        'subsorts',
        'to',
        'true',
        'unify',
        'var',
        'vars',
        'view',
        'xor',
    ],
    builtins: [
        'Assignment',
        'assoc',
        'Attr',
        'Attribute',
        'AttributeSet',
        'AttrSet',
        'Bool',
        'Bound',
        'Char',
        'Cid',
        'comm',
        'Condition',
        'config',
        'Configuration',
        'Constant',
        'Context',
        'CTermList',
        'ctor',
        'DecFloat',
        'EqCondition',
        'Equation',
        'EquationSet',
        'FindResult',
        'FiniteFloat',
        'Float',
        'FModule',
        'format',
        'frozen',
        'FTheory',
        'gather',
        'GroundTerm',
        'GroundTermList',
        'GTermList',
        'Hook',
        'HookList',
        'id',
        'idem',
        'Import',
        'ImportList',
        'Int',
        'iter',
        'Kind',
        'KindSet',
        'label',
        'left-id',
        'List',
        'Map',
        'MatchPair',
        'MembAx',
        'MembAxSet',
        'memo',
        'metadata',
        'Module',
        'ModuleExpression',
        'msg',
        'Msg',
        'Nat',
        'NatList',
        'nonexec',
        'NzInt',
        'NzNat',
        'NzRat',
        'object',
        'Object',
        'Oid',
        'OpDecl',
        'OpDeclSet',
        'owise',
        'poly',
        'prec',
        'Qid',
        'QidList',
        'Rat',
        'Renaming',
        'RenamingSet',
        'Result4Tuple',
        'ResultPair',
        'ResultTriple',
        'right-id',
        'Rule',
        'RuleSet',
        'Set',
        'SModule',
        'Sort',
        'SortSet',
        'special',
        'State',
        'STheory',
        'strat',
        'String',
        'SubsortDecl',
        'SubsortDeclSet',
        'Substitution',
        'System',
        'Term',
        'TermList',
        'Type',
        'TypeList',
        'Variable',
        'Zero',
        'CONFIGURATION',
        'EXT-BOOL',
        'LOOP-MODE',
        'META-LEVEL',
        'META-MODULE',
        'META-TERM',
        'QID-LIST',
        'TRUTH-VALUE',
        'srew',
        'in',
        'nil',
        'using',
        'move',
    ],
    typeKeywords: [],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_][\w-]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(---.*$)/, 'comment'],
            [/\*\*\*\(/, 'comment', '@comment'],
            [/\*\*\*.*/, 'comment'],
        ],
        comment: [
            [/[^\)]+/, 'comment'],
            [/^\)/, 'comment', '@pop'],
            [/[\)]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
