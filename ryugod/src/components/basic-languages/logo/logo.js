/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: ['#', ';'],
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.logo',
    ignoreCase: true,
    keywords: [
        'allopen',
        'allowgetset',
        'and',
        'apply',
        'arc',
        'arctan',
        'arity',
        'array',
        'arrayp',
        'arraytolist',
        'ascii',
        'ashift',
        'back',
        'background',
        'beforep',
        'bitand',
        'bitnot',
        'bitor',
        'bitxor',
        'buried',
        'buriedp',
        'bury',
        'buryall',
        'buryname',
        'butfirst',
        'butfirsts',
        'butlast',
        'button',
        'buttonact',
        'buttonp',
        'bye',
        'cascade',
        'case',
        'caseignoredp',
        'catch',
        'char',
        'clean',
        'clearscreen',
        'cleartext',
        'clickpos',
        'close',
        'closeall',
        'combine',
        'commandline',
        'cond',
        'contents',
        'continue',
        'copydef',
        'cos',
        'count',
        'crossmap',
        'cslsload',
        'cursor',
        'defin',
        'defin',
        'dequeue',
        'difference',
        'do.until',
        'do.while',
        'dribble',
        'e',
        'edall',
        'edit',
        'editfile',
        'edn',
        'edns',
        'edp',
        'edp',
        'edpl',
        'edps',
        'emptyp',
        'end',
        'eofp',
        'epspict',
        'equalp',
        'erall',
        'erase',
        'erasefile',
        'ern',
        'erns',
        'erpl',
        'erpls',
        'erps',
        'erract',
        'error',
        'exp',
        'fence',
        'filep',
        'fill',
        'filled',
        'filter',
        'find',
        'first',
        'firsts',
        'font',
        'for',
        'foreach',
        'forever',
        'form',
        'forward',
        'fput',
        'fullprintp',
        'fullscreen',
        'fulltext',
        'gc',
        'gensym',
        'global',
        'goto',
        'gprop',
        'greaterequalp',
        'greaterp',
        'heading',
        'help',
        'hideturtle',
        'home',
        'if',
        'ifelse',
        'iffalse',
        'iftrue',
        'ignore',
        'increasefont',
        'int',
        'invoke',
        'iseq',
        'item',
        'keyact',
        'keyp',
        'l',
        'label',
        'labelsize',
        'last',
        'left',
        'lessequalp',
        'lessp',
        'list',
        'listp',
        'listtoarray',
        'ln',
        'load',
        'loadnoisily',
        'loadpict',
        'local',
        'localmake',
        'log10',
        'logoplatform',
        'logoversion',
        'lowercase',
        'lput',
        'lshift',
        'macroexpand',
        'macrop',
        'make',
        'map',
        'map.se',
        'mdarray',
        'mditem',
        'mdsetitem',
        'member',
        'memberp',
        'minus',
        'modulo',
        'mousepos',
        'name',
        'namelist',
        'namep',
        'names',
        'nodes',
        'nodribble',
        'norefresh',
        'not',
        'notequalp',
        'numberp',
        'openappend',
        'openread',
        'openupdate',
        'openwrite',
        'or',
        'output',
        'palette',
        'parse',
        'pause',
        'pen',
        'pencolor',
        'pendown',
        'pendownp',
        'penerase',
        'penmode',
        'penpaint',
        'penpattern',
        'penreverse',
        'pensize',
        'penup',
        'pick',
        'plist',
        'plistp',
        'plists',
        'pllist',
        'poall',
        'pon',
        'pons',
        'pop',
        'popl',
        'popls',
        'pops',
        'pos',
        'pot',
        'pots',
        'power',
        'pprop',
        'prefix',
        'primitivep',
        'primitives',
        'print',
        'printdepthlimit',
        'printout',
        'printwidthlimit',
        'procedurep',
        'procedures',
        'product',
        'push',
        'queue',
        'quoted',
        'quotient',
        'radarctan',
        'radcos',
        'radsin',
        'random',
        'rawascii',
        'readchar',
        'readchars',
        'reader',
        'readlist',
        'readpos',
        'readrawline',
        'readword',
        'redefp',
        'reduce',
        'refresh',
        'remainder',
        'remdup',
        'remove',
        'remprop',
        'repcount',
        'repeat',
        'rerandom',
        'reverse',
        'right',
        'round',
        'rseq',
        'run',
        'runparse',
        'runresult',
        's',
        'save',
        'savel',
        'savepict',
        'screenmode',
        'scrunch',
        'sentence',
        'setbackground',
        'setcslsloc',
        'setcursor',
        'seteditor',
        'setfont',
        'setheading',
        'sethelploc',
        'setitem',
        'setlabelheight',
        'setlibloc',
        'setmargins',
        'setpalette',
        'setpen',
        'setpencolor',
        'setpenpattern',
        'setpensize',
        'setpos',
        'setprefix',
        'setread',
        'setreadpos',
        'setscrunch',
        'settemploc',
        'settextcolor',
        'settextfont',
        'settextsize',
        'setwrite',
        'setwritepos',
        'setx',
        'setxy',
        'sety',
        'shell',
        'show',
        'shownp',
        'showturtle',
        'sin',
        'splitscreen',
        'sqrt',
        'standout',
        'startup',
        'step',
        'stepped',
        'steppedp',
        'stop',
        'substringp',
        'sum',
        'tag',
        'test',
        'text',
        'textscreen',
        'textsize',
        'thing',
        'throw',
        'to',
        'towards',
        'trace',
        'traced',
        'tracedp',
        'transfer',
        'turtlemode',
        'type',
        'unbury',
        'unburyall',
        'unburyname',
        'unburyonedit',
        'unstep',
        'until',
        'untrace',
        'uppercase',
        'usealternatenam',
        'vbarredp',
        'wait',
        'while',
        'window',
        'word',
        'wordp',
        'wrap',
        'writepos',
        'writer',
        'xcor',
        'ycor',
    ],
    builtins: [
        '.defmacro',
        '.eq',
        '.macro',
        '.maybeoutput',
        '.setbf',
        '.setfirst',
        '.setitem',
        '.setsegmentsize',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[\[|\]]/, 'metatag'],
            [/[,:]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/^`\w+/, 'type.identifier'],
            [
                /@?[.a-zA-Z1-9_.]+:?/,
                {
                    cases: {
                        '@builtins': 'type.identifier',
                        '@keywords': 'keyword',
                        '@default': 'identifier',
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(^#.*$)/, 'comment'],
            [/(^;.*$)/, 'comment'],
        ],

        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
