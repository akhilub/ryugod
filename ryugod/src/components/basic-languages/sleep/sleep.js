/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '#',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.sl',
    keywords: [
        'assert',
        'break',
        'calcc',
        'catch',
        'else',
        'false',
        'for',
        'foreach',
        'if',
        'return',
        'sub',
        'throw',
        'true',
        'try',
        'while',
    ],
    builtins: [
        '-canread',
        '-canwrite',
        '-eof',
        '-exists',
        '-isDir',
        '-isFile',
        '-isHidden',
        'abs',
        'acos',
        'acquire',
        'add',
        'addAll',
        'allocate',
        'asc',
        'asin',
        'atan',
        'atan2',
        'available',
        'bread',
        'bwrite',
        'byteAt',
        'cast',
        'casti',
        'ceil',
        'charAt',
        'chdir',
        'checkError',
        'checksum',
        'chr',
        'clear',
        'closef',
        'cmp',
        'compile_closure',
        'concat',
        'connect',
        'copy',
        'cos',
        'createNewFile',
        'cwd',
        'debug',
        'degrees',
        'deleteFile',
        'digest',
        'double',
        'eval',
        'exec',
        'exit',
        'exp',
        'expr',
        'filter',
        'find',
        'flatten',
        'floor',
        'fork',
        'formatDate',
        'formatNumber',
        'function',
        'getConsole',
        'getFileName',
        'getFileParent',
        'getFileProper',
        'getStackTrace',
        'global',
        'hasmatch',
        'iff',
        'in',
        'include',
        'indexOf',
        'inline',
        'int',
        'invoke',
        'is',
        'isa',
        'ismatch',
        'iswm',
        'join',
        'keys',
        'lambda',
        'lastModified',
        'lc',
        'left',
        'let',
        'lindexOf',
        'listen',
        'listRoots',
        'local',
        'lof',
        'log',
        'long',
        'ls',
        'map',
        'mark',
        'matched',
        'matches',
        'mid',
        'mkdir',
        'newInstance',
        'not',
        'ohash',
        'ohasha',
        'openf',
        'pack',
        'parseDate',
        'parseNumber',
        'pop',
        'popl',
        'print',
        'printAll',
        'printEOF',
        'println',
        'profile',
        'push',
        'pushl',
        'putAll',
        'radians',
        'rand',
        'readAll',
        'readAsObject',
        'readb',
        'readc',
        'readln',
        'readObject',
        'reduce',
        'release',
        'remove',
        'removeAll',
        'removeAt',
        'rename',
        'replace',
        'replaceAt',
        'reset',
        'retainAll',
        'reverse',
        'right',
        'round',
        'scalar',
        'search',
        'semaphore',
        'setEncoding',
        'setf',
        'setField',
        'setLastModified',
        'setMissPolicy',
        'setReadOnly',
        'setRemovalPolicy',
        'shift',
        'sin',
        'size',
        'sizeof',
        'skip',
        'sleep',
        'sort',
        'sorta',
        'sortd',
        'sortn',
        'splice',
        'split',
        'sqrt',
        'srand',
        'strlen',
        'strrep',
        'sublist',
        'substr',
        'sum',
        'systemProperties',
        'taint',
        'tan',
        'this',
        'ticks',
        'tr',
        'typeOf',
        'uc',
        'uint',
        'unpack',
        'untaint',
        'use',
        'values',
        'wait',
        'warn',
        'watch',
        'writeAsObject',
        'writeb',
        'writeObject',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/[@%$][a-zA-Z_]?\w*/, 'variable'],
            [
                /-?[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(#.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            //[/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            //[/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
