/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    tokenPostfix: '.dyon',
    keywords: [
        'ns',
        'uses',
        'use',
        'fn',
        'arg',
        'current',
        'block',
        'expr',
        'add',
        'mul',
        'pow',
        'val',
        'call',
        'call_arg',
        'named_call',
        'assign',
        'left',
        'right',
        'item',
        'item_extra',
        'return',
        'object',
        'array',
        'array_item',
        'array_fill',
        'fill',
        'n',
        'key_value',
        'for',
        'for_n',
        'for_in',
        'sum',
        'sum_in',
        'sum_vec4',
        'prod',
        'prod_in',
        'prod_vec4',
        'min',
        'min_in',
        'max',
        'max_in',
        'sift',
        'sift_in',
        'start',
        'any',
        'any_in',
        'all',
        'all_in',
        'vec4_un_loop',
        'end',
        'init',
        'cond',
        'iter',
        'else_if_cond',
        'else_if_block',
        'step',
        'compare',
        'if',
        'true_block',
        'else_block',
        'loop',
        'id',
        'break',
        'continue',
        'norm',
        'not',
        'neg',
        'vec4',
        'x',
        'y',
        'z',
        'w',
        'mat4',
        'ex',
        'ey',
        'ez',
        'ew',
        'type',
        'arr',
        'opt',
        'res',
        'ret_type',
        'return_void',
        'go',
        'swizzle',
        'sw0',
        'sw1',
        'sw2',
        'sw3',
        'link',
        'link_for',
        'link_in',
        'link_item',
        'closure',
        'call_closure',
        'named_call_closure',
        'closure_type',
        'cl_arg',
        'cl_ret',
        'grab',
        'try_expr',
        'in',
        'ty',
        'ty_arg',
        'ty_ret',
    ],
    builtins: [
        'cross',
        'x',
        'y',
        'z',
        'w',
        'det',
        'inv',
        'mov',
        'rot__axis_angle',
        'ortho__pos_right_up_forward',
        'proj__fov_near_far_ar',
        'mvp__model_view_projection',
        'scale',
        'rx',
        'ry',
        'rz',
        'rw',
        'cx',
        'cy',
        'cz',
        'cw',
        'cv',
        'clone',
        'rv',
        's',
        'println',
        'print',
        'eprintln',
        'eprint',
        'sqrt',
        'sin',
        'asin',
        'cos',
        'acos',
        'tan',
        'atan',
        'atan2',
        'exp',
        'ln',
        'log2',
        'log10',
        'round',
        'abs',
        'floor',
        'ceil',
        'sleep',
        'random',
        'tau',
        'read_line',
        'read_number',
        'parse_number',
        'trim',
        'trim_left',
        'trim_right',
        'str',
        'fmt__tab_string',
        'json_string',
        'str__color',
        'srgb_to_linear__color',
        'linear_to_srgb__color',
        'typeof',
        'debug',
        'backtrace',
        'none',
        'some',
        'ok',
        'err',
        'dir__angle',
        'load__meta_file',
        'load__meta_url',
        'syntax__in_string',
        'download__url_file',
        'save__string_file',
        'load_string__file',
        'load_string__url',
        'join__thread',
        'load_data__file',
        'load_data__string',
        'args_os',
        'now',
        'is_nan',
        'load',
        'load__source_imports',
        'module__in_string_imports',
        'check__in_string_imports',
        'call',
        'call_ret',
        'functions',
        'functions__module',
        'is_err',
        'is_ok',
        'min',
        'max',
        'unwrap',
        'why',
        'where',
        'explain_why',
        'explain_where',
        'head',
        'tip',
        'tail',
        'neck',
        'is_empty',
        'push_ref',
        'insert_ref',
        'push',
        'insert',
        'pop',
        'remove',
        'reverse',
        'clear',
        'swap',
        'unwrap_or',
        'unwrap_err',
        'meta__syntax_in_string',
        'save__data_file',
        'json_from_meta_data',
        'errstr__string_start_len_msg',
        'has',
        'keys',
        'chars',
        'wait_next',
        'next',
    ],
    typeKeywords: [
        'static',
        'true',
        'false',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)/, 'number.float'],
            [/[0-9][0-9_]*/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
