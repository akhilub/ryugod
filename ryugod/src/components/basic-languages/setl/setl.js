/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { languages } from '../fillers/monaco-editor-core.js';
export var conf = {
    comments: {
        lineComment: ['$', '--'],
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    onEnterRules: [
        {
            beforeText: new RegExp('^\\s*(?:fn|for|if|else|interface).*?\\s*$'),
            action: { indentAction: languages.IndentAction.Indent }
        }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: '',
    tokenPostfix: '.setl',
    keywords: [
        'abs',
        'error',
        'is-real',
        'operator',
        'sign',
        'acos',
        'even',
        'is-set',
        'or',
        'sin',
        'all',
        'exists',
        'is-string',
        'packed',
        'smap',
        'and',
        'exit',
        'is-tuple',
        'pass',
        'span',
        'any',
        'exp',
        'len',
        'plex',
        'sparse',
        'arb',
        'exports',
        'less',
        'pow',
        'spec',
        'asin',
        'expr',
        'lessf',
        'print',
        'sqrt',
        'assert',
        'fail',
        'lev',
        'printa',
        'st',
        'atan',
        'false',
        'lib',
        'proc',
        'statements',
        'atan2',
        'fix',
        'libraries',
        'procedure',
        'step',
        'atom',
        'float',
        'library',
        'prog',
        'stop',
        'back',
        'floor',
        'local',
        'program',
        'str',
        'base',
        'for',
        'log',
        'put',
        'string',
        'boolean',
        'forall',
        'loop',
        'putb',
        'subset',
        'break',
        'from',
        'Ipad',
        'putf',
        'succeed',
        'calls',
        'fromb',
        'macro',
        'putk',
        'tan',
        'case',
        'frome',
        'map',
        'quit',
        'tanh',
        'ceil',
        'general',
        'match',
        'random',
        'term',
        'char',
        'get',
        'max',
        'range',
        'then',
        'close',
        'getb',
        'min',
        'rany',
        'time',
        'const',
        'getem',
        'mmap',
        'rbreak',
        'title',
        'continue',
        'getf',
        'mod',
        'rd',
        'trace',
        'cos',
        'getipp',
        'mode',
        'read',
        'true',
        'date',
        'getk',
        'module',
        'reada',
        'tuple',
        'debug',
        'getspp',
        'nargs',
        'reads',
        'type',
        'directory',
        'goto',
        'newat',
        'real',
        'unspec',
        'div',
        'host',
        'not',
        'remote',
        'until',
        'do',
        'if',
        'notany',
        'repr',
        'untyped',
        'doing',
        'impl',
        'notexists',
        'return',
        'val',
        'domain',
        'imports',
        'notin',
        'rewind',
        'var',
        'drop',
        'in',
        'notrace',
        'rlen',
        'where',
        'eject',
        'incs',
        'npow',
        'rmatch',
        'while',
        'elmt',
        'init',
        'odd',
        'rnotany',
        'with',
        'else',
        'integer',
        'of',
        'rpad',
        'wr',
        'elseif',
        'is_atom',
        'ok',
        'rspan',
        'writes',
        'end',
        'is-boolean',
        'om',
        'rw',
        'yield',
        'endm',
        'is-integer',
        'op',
        'set',
        'eof',
        'is-map',
        'open',
        'setem',
    ],
    builtins: [

    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/#[a-zA-Z_]\w*/, 'metatag'],
            [
                /[a-zA-Z_][\w-]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\$.*$)/, 'comment'],
            [/(--.*$)/, 'comment'],
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
