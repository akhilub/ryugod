/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
export var conf = {
    comments: {
        lineComment: '//',
        blockComment: ["/*", "*/"]
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')'],
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"', notIn: ['string'] },
        { open: "'", close: "'", notIn: ['string', 'comment'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        offSide: true,
        markers: {
            start: new RegExp('^\\s*#region\\b'),
            end: new RegExp('^\\s*#endregion\\b')
        }
    }
};
export var language = {
    defaultToken: 'invalid',
    ignoreCase: true,
    tokenPostfix: '.rpl',
    keywords: [
        'do',
        'start',
        'select',
        'for',
        'next',
        'case',
        'then',
        'else',
        'elseif',
        'end',
        'step',
        'until',
        'repeat',
        'default',
        'return',
        'last',
        'syzeval',
        'wait',
        'type',
        'kind',
        'eval',
        'use',
        'remove',
        'external',
        'dup',
        'dup2n',
        'drop',
        'drop2n',
        'depth',
        'roll',
        'rolld',
        'pick',
        'rot',
        'swap',
        'over',
        'clear',
        'warranty',
        'copyright',
        'convert',
        'date',
        'time',
        'mem',
        'clmf',
        'num',
        'help',
        'if',
        'ift',
        'ifte',
        'and',
        'xor',
        'not',
        'same',
        'cycle',
        'exit',
    ],
    builtins: [
        'get',
        'geti',
        'getr',
        'getc',
        'puti',
        'putr',
        'putc',
        'rcl',
        'purge',
        'sinv',
        'sneg',
        'sconj',
        'steq',
        'rceq',
        'vars',
        'clusr',
        'sto',
        'store',
        'recall',
        'wflock',
        'unlock',
        'open',
        'close',
        'delete',
        'create',
        'format',
        'rewind',
        'backspace',
        'rewrite',
        'write',
        'read',
        'inquire',
        'sync',
        'append',
        'suppress',
        'seek',
        'pr1',
        'pr1int',
        'pr1st',
        'pr1stc',
        'pr1lcd',
        'pr1var',
        'pr1usr',
        'pr1md',
        'paper',
        'cr',
        'erase',
        'disp',
        'input',
        'prompt',
        'key',
        'cllcd',
        'redraw',
        'draw',
        'drax',
        'indep',
        'depnd',
        'res',
        'axes',
        'label',
        'pmin',
        'pmax',
        'centr',
        'persist',
        'title',
        'slicescale',
        'autoscale',
        'logscale',
        'eyept',
        'ppar',
        'spar',
        'function',
        'polar',
        'scatter',
        'plotter',
        'wireframe',
        'parametric',
        'slice',
        'lcd',
        'edit',
        'visit',
        'abs',
        'arg',
        'conj',
        're',
        'im',
        'mant',
        'xpon',
        'ceil',
        'fact',
        'fp',
        'floor',
        'inv',
        'ip',
        'max',
        'min',
        'mod',
        'neg',
        'relax',
        'sign',
        'sq',
        'sqrt',
        'xroot',
        'cos',
        'sin',
        'tan',
        'tg',
        'acos',
        'arccos',
        'asin',
        'arcsin',
        'atan',
        'arctg',
        'acosh',
        'cosh',
        'asinh',
        'sinh',
        'atanh',
        'tanh',
        'argth',
        'th',
        'argch',
        'argsh',
        'argth',
        'alog',
        'log',
        'ln',
        'ln1',
        'exp',
        'expm',
        'trn',
        'con',
        'idn',
        'rdm',
        'rsd',
        'cnrm',
        'cross',
        'det',
        'dot',
        'cswp',
        'rswp',
        'rci',
        'rcij',
        'incr',
        'decr',
        'bessel',
        'gegvl',
        'egvl',
        'egv',
        'legv',
        'regv',
        'glegv',
        'gregv',
        'rnrm',
        'std',
        'fix',
        'sci',
        'eng',
        'rad',
        'deg',
        'nrand',
        'rand',
        'rdz',
        'ifft',
        'fft',
        'dec',
        'bin',
        'oct',
        'hex',
        'rclf',
        'stof',
        'cs]f',
        'chr',
        'num',
        'pos',
        'sub',
        'size',
        'stws',
        'rcws',
        'rr',
        'rrb',
        'sr',
        'srb',
        'rl',
        'rlb',
        'sl',
        'slb',
        'asr',
        'asl',
        'int',
        'der',
        'stos',
        'rcls',
        'cls',
        'drws',
        'scls',
        'ns',
        'tot',
        'mean',
        'psdev',
        'sdev',
        'pvar',
        'var',
        'maxs',
        'mins',
        'pcov',
        'cov',
        'cols',
        'sx',
        'sxy',
        'sx2',
        'sy',
        'sy2',
        'xcol',
        'ycol',
        'corr',
        'utpc',
        'utpf',
        'utpn',
        'utpt',
        'comb',
        'perm',
        'lu',
        'plu',
        'lchol',
        'uchol',
        'schur',
        'ch',
        'hms',
        'str',
        'array',
        'list',
        'col',
        'row',
    ],
    typeKeywords: [
        'true',
        'false',
    ],
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.bracket' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    tokenizer: {
        root: [
            { include: '@whitespace' },
            { include: '@numbers' },
            { include: '@strings' },
            [/[,:;]/, 'delimiter'],
            [/[{}\[\]()]/, '@brackets'],
            [/@[a-zA-Z_]\w*/, 'tag'],
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtins': 'type.identifier',
                        '@typeKeywords': 'keyword.flow',
                        '@default': 'identifier'
                    }
                }
            ]
        ],
        // Deal with white space, including single and multi-line comments
        whitespace: [
            [/\s+/, 'white'],
            [/(\/\/.*$)/, 'comment'],
            [/\/\*/, 'comment', '@comment'],
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
        numbers: [
            [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
            [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
        ],
        // Recognize strings, including those broken across lines with \ (but not without)
        strings: [
            [/'$/, 'string.escape', '@popall'],
            [/'/, 'string.escape', '@stringBody'],
            [/"$/, 'string.escape', '@popall'],
            [/"/, 'string.escape', '@dblStringBody']
        ],
        stringBody: [
            [/[^\\']+$/, 'string', '@popall'],
            [/[^\\']+/, 'string'],
            [/\\./, 'string'],
            [/'/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ],
        dblStringBody: [
            [/[^\\"]+$/, 'string', '@popall'],
            [/[^\\"]+/, 'string'],
            [/\\./, 'string'],
            [/"/, 'string.escape', '@popall'],
            [/\\$/, 'string']
        ]
    }
};
